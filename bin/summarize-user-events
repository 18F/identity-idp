#!/usr/bin/env ruby
# frozen_string_literal: true
Dir.chdir(__dir__) { require 'bundler/setup' }

require 'active_support'
require 'active_support/core_ext/integer/time'
require 'active_support/core_ext/object/blank'
require 'active_support/time'
require 'aws-sdk-cloudwatchlogs'
require 'concurrent-ruby'
require 'optparse'

$LOAD_PATH.unshift(File.expand_path(File.join(__dir__, '../lib')))
require 'reporting/cloudwatch_client'
require 'reporting/cloudwatch_query_quoting'
# Require all *_matcher.rb files in lib/event_summarizer
Dir[File.expand_path(File.join(__dir__, '../lib/event_summarizer', '**', '*_matcher.rb'))].sort.each do |f|
  require f
end

class SummarizeUserEvents
  attr_reader :uuid, :from_date, :to_date

  def initialize(user_uuid:, start_time: nil, end_time: nil)
    @uuid = user_uuid
    @from_date = start_time || 1.week.ago
    @to_date = end_time || DateTime.now
  end

  def run(&block)
    cloudwatch_client.fetch(
      query: query,
      from: from_date,
      to: to_date,
      &block
    )
  end


  def query
    format(<<~QUERY)
      fields
          name
        , properties.event_properties.success as success
        , @message
        , @timestamp
      | filter properties.user_id = '#{uuid}'
      | sort @timestamp asc
      | limit 10000
    QUERY
  end


  def cloudwatch_client
    @cloudwatch_client ||= Reporting::CloudwatchClient.new(
      num_threads: 5,
      ensure_complete_logs: true,
      log_group_name: 'prod_/srv/idp/shared/log/events.log',
    )
  end
end

def main(args)
  options = {}
  basename = File.basename($0)

  optparse = OptionParser.new do |opts|
    opts.banner = <<-EOM
      usage: #{basename} [OPTIONS]

    EOM
    opts.on('-h', '--help', 'Display this message') do
      STDERR.puts opts
      exit
    end

    opts.on('-u', '--user-uuid USER_UUID', 'UUID of the protagonist of the story') do |val|
      options[:user_uuid] = val
    end

    opts.on('-s', '--start-time START_TIME', 'DateTime of the start of the query period (e.g. 2024-12-09T10:00:00Z)') do |val|
      options[:start_time] = Time.parse(val)
    end

    opts.on('-e', '--end_time END_TIME', 'DateTime of the end of the query period (e.g. 2024-12-09T14:30:00Z)') do |val|
      options[:end_time] = Time.parse(val)
    end
  end

  optparse.parse!

  matchers = [
    EventSummarizer::DocAuthMatcher.new,
  ]

  SummarizeUserEvents.new(**options).run do |event|
    matchers.each do |matcher|
      if matcher.match?(event)
        puts matcher.format(event)
      end
    end
  end
end

if $PROGRAM_NAME == __FILE__
  main(ARGV)
end
