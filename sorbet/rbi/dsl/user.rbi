# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `User`.
# Please instead update this file by running `bin/tapioca dsl User`.


class User
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def new(attributes = nil, &block); end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def otp_delivery_preferences; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::User).void)
      ).returns(T::Array[::User])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::User).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::User).void)
      ).returns(T::Array[::User])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::User).void)
      ).returns(T::Array[::User])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::User).void)
      ).returns(T::Array[::User])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::User).void)
      ).returns(T::Array[::User])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::User]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::User)) }
    def fifth; end

    sig { returns(::User) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::User)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::User])
    end
    sig { params(args: NilClass, block: T.proc.params(object: ::User).void).returns(T.nilable(::User)) }
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::User)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::User) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::User).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::User])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::User]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::User]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::User).void)
      ).returns(T::Array[::User])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::User).void)
      ).returns(T::Array[::User])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::User).void)
      ).returns(T::Array[::User])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::User)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::User) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::User) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::User)) }
    sig { params(limit: Integer).returns(T::Array[::User]) }
    def first(limit = nil); end

    sig { returns(::User) }
    def first!; end

    sig { returns(T.nilable(::User)) }
    def forty_two; end

    sig { returns(::User) }
    def forty_two!; end

    sig { returns(T.nilable(::User)) }
    def fourth; end

    sig { returns(::User) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::User)) }
    sig { params(limit: Integer).returns(T::Array[::User]) }
    def last(limit = nil); end

    sig { returns(::User) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::User).void)
      ).returns(T::Array[::User])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::User)) }
    def second; end

    sig { returns(::User) }
    def second!; end

    sig { returns(T.nilable(::User)) }
    def second_to_last; end

    sig { returns(::User) }
    def second_to_last!; end

    sig { returns(::User) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::User).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::User)) }
    sig { params(limit: Integer).returns(T::Array[::User]) }
    def take(limit = nil); end

    sig { returns(::User) }
    def take!; end

    sig { returns(T.nilable(::User)) }
    def third; end

    sig { returns(::User) }
    def third!; end

    sig { returns(T.nilable(::User)) }
    def third_to_last; end

    sig { returns(::User) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def sms!; end

    sig { returns(T::Boolean) }
    def sms?; end

    sig { void }
    def voice!; end

    sig { returns(T::Boolean) }
    def voice?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::AccountResetRequest)) }
    def account_reset_request; end

    sig { params(value: T.nilable(::AccountResetRequest)).void }
    def account_reset_request=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :agency_identities`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AgencyIdentity::PrivateCollectionProxy) }
    def agency_identities; end

    sig { params(value: T::Enumerable[::AgencyIdentity]).void }
    def agency_identities=(value); end

    sig { returns(T::Array[T.untyped]) }
    def agency_identity_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def agency_identity_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def auth_app_configuration_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def auth_app_configuration_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :auth_app_configurations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::AuthAppConfiguration::PrivateCollectionProxy) }
    def auth_app_configurations; end

    sig { params(value: T::Enumerable[::AuthAppConfiguration]).void }
    def auth_app_configurations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def backup_code_configuration_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def backup_code_configuration_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :backup_code_configurations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::BackupCodeConfiguration::PrivateCollectionProxy) }
    def backup_code_configurations; end

    sig { params(value: T::Enumerable[::BackupCodeConfiguration]).void }
    def backup_code_configurations=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::AccountResetRequest) }
    def build_account_reset_request(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InPersonEnrollment) }
    def build_establishing_in_person_enrollment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InPersonEnrollment) }
    def build_pending_in_person_enrollment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RegistrationLog) }
    def build_registration_log(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::AccountResetRequest) }
    def create_account_reset_request(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::AccountResetRequest) }
    def create_account_reset_request!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InPersonEnrollment) }
    def create_establishing_in_person_enrollment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InPersonEnrollment) }
    def create_establishing_in_person_enrollment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InPersonEnrollment) }
    def create_pending_in_person_enrollment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::InPersonEnrollment) }
    def create_pending_in_person_enrollment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RegistrationLog) }
    def create_registration_log(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::RegistrationLog) }
    def create_registration_log!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def device_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def device_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :devices`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Device::PrivateCollectionProxy) }
    def devices; end

    sig { params(value: T::Enumerable[::Device]).void }
    def devices=(value); end

    sig { returns(T::Array[T.untyped]) }
    def document_capture_session_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def document_capture_session_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :document_capture_sessions`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::DocumentCaptureSession::PrivateCollectionProxy) }
    def document_capture_sessions; end

    sig { params(value: T::Enumerable[::DocumentCaptureSession]).void }
    def document_capture_sessions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def email_address_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def email_address_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :email_addresses`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::EmailAddress::PrivateCollectionProxy) }
    def email_addresses; end

    sig { params(value: T::Enumerable[::EmailAddress]).void }
    def email_addresses=(value); end

    sig { returns(T.nilable(::InPersonEnrollment)) }
    def establishing_in_person_enrollment; end

    sig { params(value: T.nilable(::InPersonEnrollment)).void }
    def establishing_in_person_enrollment=(value); end

    sig { returns(T::Array[T.untyped]) }
    def event_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def event_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :events`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Event::PrivateCollectionProxy) }
    def events; end

    sig { params(value: T::Enumerable[::Event]).void }
    def events=(value); end

    sig { returns(T::Array[T.untyped]) }
    def fraud_review_request_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def fraud_review_request_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :fraud_review_requests`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::FraudReviewRequest::PrivateCollectionProxy) }
    def fraud_review_requests; end

    sig { params(value: T::Enumerable[::FraudReviewRequest]).void }
    def fraud_review_requests=(value); end

    sig { returns(T::Array[T.untyped]) }
    def gpo_confirmation_code_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def gpo_confirmation_code_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :gpo_confirmation_codes, through: :profiles`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::GpoConfirmationCode::PrivateCollectionProxy) }
    def gpo_confirmation_codes; end

    sig { params(value: T::Enumerable[::GpoConfirmationCode]).void }
    def gpo_confirmation_codes=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :identities`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ServiceProviderIdentity::PrivateCollectionProxy) }
    def identities; end

    sig { params(value: T::Enumerable[::ServiceProviderIdentity]).void }
    def identities=(value); end

    sig { returns(T::Array[T.untyped]) }
    def identity_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def identity_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def in_person_enrollment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def in_person_enrollment_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :in_person_enrollments`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::InPersonEnrollment::PrivateCollectionProxy) }
    def in_person_enrollments; end

    sig { params(value: T::Enumerable[::InPersonEnrollment]).void }
    def in_person_enrollments=(value); end

    sig { returns(T.nilable(::InPersonEnrollment)) }
    def pending_in_person_enrollment; end

    sig { params(value: T.nilable(::InPersonEnrollment)).void }
    def pending_in_person_enrollment=(value); end

    sig { returns(T::Array[T.untyped]) }
    def phone_configuration_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def phone_configuration_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :phone_configurations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PhoneConfiguration::PrivateCollectionProxy) }
    def phone_configurations; end

    sig { params(value: T::Enumerable[::PhoneConfiguration]).void }
    def phone_configurations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def piv_cac_configuration_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def piv_cac_configuration_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :piv_cac_configurations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PivCacConfiguration::PrivateCollectionProxy) }
    def piv_cac_configurations; end

    sig { params(value: T::Enumerable[::PivCacConfiguration]).void }
    def piv_cac_configurations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def profile_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def profile_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :profiles`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Profile::PrivateCollectionProxy) }
    def profiles; end

    sig { params(value: T::Enumerable[::Profile]).void }
    def profiles=(value); end

    sig { returns(T.nilable(::RegistrationLog)) }
    def registration_log; end

    sig { params(value: T.nilable(::RegistrationLog)).void }
    def registration_log=(value); end

    sig { returns(T.nilable(::AccountResetRequest)) }
    def reload_account_reset_request; end

    sig { returns(T.nilable(::InPersonEnrollment)) }
    def reload_establishing_in_person_enrollment; end

    sig { returns(T.nilable(::InPersonEnrollment)) }
    def reload_pending_in_person_enrollment; end

    sig { returns(T.nilable(::RegistrationLog)) }
    def reload_registration_log; end

    sig { void }
    def reset_account_reset_request; end

    sig { void }
    def reset_establishing_in_person_enrollment; end

    sig { void }
    def reset_pending_in_person_enrollment; end

    sig { void }
    def reset_registration_log; end

    sig { returns(T::Array[T.untyped]) }
    def service_provider_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def service_provider_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :service_providers, through: :identities`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::ServiceProvider::PrivateCollectionProxy) }
    def service_providers; end

    sig { params(value: T::Enumerable[::ServiceProvider]).void }
    def service_providers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sign_in_restriction_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sign_in_restriction_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :sign_in_restrictions`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::SignInRestriction::PrivateCollectionProxy) }
    def sign_in_restrictions; end

    sig { params(value: T::Enumerable[::SignInRestriction]).void }
    def sign_in_restrictions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def webauthn_configuration_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def webauthn_configuration_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :webauthn_configurations`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::WebauthnConfiguration::PrivateCollectionProxy) }
    def webauthn_configurations; end

    sig { params(value: T::Enumerable[::WebauthnConfiguration]).void }
    def webauthn_configurations=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_sms(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_voice(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def sms(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def voice(*args, &blk); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accepted_terms_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accepted_terms_at=(value); end

    sig { returns(T::Boolean) }
    def accepted_terms_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accepted_terms_at_before_last_save; end

    sig { returns(T.untyped) }
    def accepted_terms_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def accepted_terms_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def accepted_terms_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def accepted_terms_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def accepted_terms_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accepted_terms_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def accepted_terms_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def accepted_terms_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accepted_terms_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def accepted_terms_at_was; end

    sig { void }
    def accepted_terms_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmed_at=(value); end

    sig { returns(T::Boolean) }
    def confirmed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmed_at_before_last_save; end

    sig { returns(T.untyped) }
    def confirmed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def confirmed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def confirmed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def confirmed_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def confirmed_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def confirmed_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def confirmed_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def confirmed_at_was; end

    sig { void }
    def confirmed_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def direct_otp; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def direct_otp=(value); end

    sig { returns(T::Boolean) }
    def direct_otp?; end

    sig { returns(T.nilable(::String)) }
    def direct_otp_before_last_save; end

    sig { returns(T.untyped) }
    def direct_otp_before_type_cast; end

    sig { returns(T::Boolean) }
    def direct_otp_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def direct_otp_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def direct_otp_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def direct_otp_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def direct_otp_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def direct_otp_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def direct_otp_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def direct_otp_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def direct_otp_sent_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def direct_otp_sent_at=(value); end

    sig { returns(T::Boolean) }
    def direct_otp_sent_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def direct_otp_sent_at_before_last_save; end

    sig { returns(T.untyped) }
    def direct_otp_sent_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def direct_otp_sent_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def direct_otp_sent_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def direct_otp_sent_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def direct_otp_sent_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def direct_otp_sent_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def direct_otp_sent_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def direct_otp_sent_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def direct_otp_sent_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def direct_otp_sent_at_was; end

    sig { void }
    def direct_otp_sent_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def direct_otp_was; end

    sig { void }
    def direct_otp_will_change!; end

    sig { returns(T.nilable(::String)) }
    def email_language; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def email_language=(value); end

    sig { returns(T::Boolean) }
    def email_language?; end

    sig { returns(T.nilable(::String)) }
    def email_language_before_last_save; end

    sig { returns(T.untyped) }
    def email_language_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_language_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_language_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_language_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def email_language_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def email_language_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_language_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def email_language_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def email_language_previously_was; end

    sig { returns(T.nilable(::String)) }
    def email_language_was; end

    sig { void }
    def email_language_will_change!; end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_digest; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def encrypted_password_digest=(value); end

    sig { returns(T::Boolean) }
    def encrypted_password_digest?; end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_digest_before_last_save; end

    sig { returns(T.untyped) }
    def encrypted_password_digest_before_type_cast; end

    sig { returns(T::Boolean) }
    def encrypted_password_digest_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def encrypted_password_digest_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def encrypted_password_digest_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def encrypted_password_digest_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_digest_in_database; end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_digest_multi_region; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def encrypted_password_digest_multi_region=(value); end

    sig { returns(T::Boolean) }
    def encrypted_password_digest_multi_region?; end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_digest_multi_region_before_last_save; end

    sig { returns(T.untyped) }
    def encrypted_password_digest_multi_region_before_type_cast; end

    sig { returns(T::Boolean) }
    def encrypted_password_digest_multi_region_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def encrypted_password_digest_multi_region_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def encrypted_password_digest_multi_region_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def encrypted_password_digest_multi_region_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_digest_multi_region_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def encrypted_password_digest_multi_region_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def encrypted_password_digest_multi_region_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_digest_multi_region_previously_was; end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_digest_multi_region_was; end

    sig { void }
    def encrypted_password_digest_multi_region_will_change!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def encrypted_password_digest_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def encrypted_password_digest_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_digest_previously_was; end

    sig { returns(T.nilable(::String)) }
    def encrypted_password_digest_was; end

    sig { void }
    def encrypted_password_digest_will_change!; end

    sig { returns(T.nilable(::String)) }
    def encrypted_recovery_code_digest; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def encrypted_recovery_code_digest=(value); end

    sig { returns(T::Boolean) }
    def encrypted_recovery_code_digest?; end

    sig { returns(T.nilable(::String)) }
    def encrypted_recovery_code_digest_before_last_save; end

    sig { returns(T.untyped) }
    def encrypted_recovery_code_digest_before_type_cast; end

    sig { returns(T::Boolean) }
    def encrypted_recovery_code_digest_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def encrypted_recovery_code_digest_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def encrypted_recovery_code_digest_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def encrypted_recovery_code_digest_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def encrypted_recovery_code_digest_generated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def encrypted_recovery_code_digest_generated_at=(value); end

    sig { returns(T::Boolean) }
    def encrypted_recovery_code_digest_generated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def encrypted_recovery_code_digest_generated_at_before_last_save; end

    sig { returns(T.untyped) }
    def encrypted_recovery_code_digest_generated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def encrypted_recovery_code_digest_generated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def encrypted_recovery_code_digest_generated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def encrypted_recovery_code_digest_generated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def encrypted_recovery_code_digest_generated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def encrypted_recovery_code_digest_generated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def encrypted_recovery_code_digest_generated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def encrypted_recovery_code_digest_generated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def encrypted_recovery_code_digest_generated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def encrypted_recovery_code_digest_generated_at_was; end

    sig { void }
    def encrypted_recovery_code_digest_generated_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def encrypted_recovery_code_digest_in_database; end

    sig { returns(T.nilable(::String)) }
    def encrypted_recovery_code_digest_multi_region; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def encrypted_recovery_code_digest_multi_region=(value); end

    sig { returns(T::Boolean) }
    def encrypted_recovery_code_digest_multi_region?; end

    sig { returns(T.nilable(::String)) }
    def encrypted_recovery_code_digest_multi_region_before_last_save; end

    sig { returns(T.untyped) }
    def encrypted_recovery_code_digest_multi_region_before_type_cast; end

    sig { returns(T::Boolean) }
    def encrypted_recovery_code_digest_multi_region_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def encrypted_recovery_code_digest_multi_region_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def encrypted_recovery_code_digest_multi_region_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def encrypted_recovery_code_digest_multi_region_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def encrypted_recovery_code_digest_multi_region_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def encrypted_recovery_code_digest_multi_region_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def encrypted_recovery_code_digest_multi_region_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def encrypted_recovery_code_digest_multi_region_previously_was; end

    sig { returns(T.nilable(::String)) }
    def encrypted_recovery_code_digest_multi_region_was; end

    sig { void }
    def encrypted_recovery_code_digest_multi_region_will_change!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def encrypted_recovery_code_digest_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def encrypted_recovery_code_digest_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def encrypted_recovery_code_digest_previously_was; end

    sig { returns(T.nilable(::String)) }
    def encrypted_recovery_code_digest_was; end

    sig { void }
    def encrypted_recovery_code_digest_will_change!; end

    sig { returns(::Integer) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(::Integer) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::String) }
    def otp_delivery_preference; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def otp_delivery_preference=(value); end

    sig { returns(T::Boolean) }
    def otp_delivery_preference?; end

    sig { returns(T.nilable(::String)) }
    def otp_delivery_preference_before_last_save; end

    sig { returns(T.untyped) }
    def otp_delivery_preference_before_type_cast; end

    sig { returns(T::Boolean) }
    def otp_delivery_preference_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def otp_delivery_preference_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def otp_delivery_preference_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def otp_delivery_preference_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def otp_delivery_preference_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def otp_delivery_preference_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def otp_delivery_preference_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def otp_delivery_preference_previously_was; end

    sig { returns(T.nilable(::String)) }
    def otp_delivery_preference_was; end

    sig { void }
    def otp_delivery_preference_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def password_compromised_checked_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def password_compromised_checked_at=(value); end

    sig { returns(T::Boolean) }
    def password_compromised_checked_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def password_compromised_checked_at_before_last_save; end

    sig { returns(T.untyped) }
    def password_compromised_checked_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def password_compromised_checked_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def password_compromised_checked_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def password_compromised_checked_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def password_compromised_checked_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def password_compromised_checked_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def password_compromised_checked_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def password_compromised_checked_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def password_compromised_checked_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def password_compromised_checked_at_was; end

    sig { void }
    def password_compromised_checked_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def phone_confirmed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def phone_confirmed_at=(value); end

    sig { returns(T::Boolean) }
    def phone_confirmed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def phone_confirmed_at_before_last_save; end

    sig { returns(T.untyped) }
    def phone_confirmed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def phone_confirmed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def phone_confirmed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def phone_confirmed_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def phone_confirmed_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def phone_confirmed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def phone_confirmed_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def phone_confirmed_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def phone_confirmed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def phone_confirmed_at_was; end

    sig { void }
    def phone_confirmed_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def piv_cac_recommended_dismissed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def piv_cac_recommended_dismissed_at=(value); end

    sig { returns(T::Boolean) }
    def piv_cac_recommended_dismissed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def piv_cac_recommended_dismissed_at_before_last_save; end

    sig { returns(T.untyped) }
    def piv_cac_recommended_dismissed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def piv_cac_recommended_dismissed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def piv_cac_recommended_dismissed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def piv_cac_recommended_dismissed_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def piv_cac_recommended_dismissed_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def piv_cac_recommended_dismissed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def piv_cac_recommended_dismissed_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def piv_cac_recommended_dismissed_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def piv_cac_recommended_dismissed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def piv_cac_recommended_dismissed_at_was; end

    sig { void }
    def piv_cac_recommended_dismissed_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reinstated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reinstated_at=(value); end

    sig { returns(T::Boolean) }
    def reinstated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reinstated_at_before_last_save; end

    sig { returns(T.untyped) }
    def reinstated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def reinstated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reinstated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reinstated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def reinstated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reinstated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reinstated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def reinstated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reinstated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reinstated_at_was; end

    sig { void }
    def reinstated_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_device_revoked_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_device_revoked_at=(value); end

    sig { returns(T::Boolean) }
    def remember_device_revoked_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_device_revoked_at_before_last_save; end

    sig { returns(T.untyped) }
    def remember_device_revoked_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def remember_device_revoked_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_device_revoked_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_device_revoked_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def remember_device_revoked_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_device_revoked_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_device_revoked_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def remember_device_revoked_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_device_revoked_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_device_revoked_at_was; end

    sig { void }
    def remember_device_revoked_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at=(value); end

    sig { returns(T::Boolean) }
    def reset_password_sent_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at_before_last_save; end

    sig { returns(T.untyped) }
    def reset_password_sent_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def reset_password_sent_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reset_password_sent_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reset_password_sent_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def reset_password_sent_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def reset_password_sent_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def reset_password_sent_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def reset_password_sent_at_was; end

    sig { void }
    def reset_password_sent_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def reset_password_token=(value); end

    sig { returns(T::Boolean) }
    def reset_password_token?; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_before_last_save; end

    sig { returns(T.untyped) }
    def reset_password_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def reset_password_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reset_password_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reset_password_token_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def reset_password_token_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reset_password_token_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def reset_password_token_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_was; end

    sig { void }
    def reset_password_token_will_change!; end

    sig { void }
    def restore_accepted_terms_at!; end

    sig { void }
    def restore_confirmed_at!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_direct_otp!; end

    sig { void }
    def restore_direct_otp_sent_at!; end

    sig { void }
    def restore_email_language!; end

    sig { void }
    def restore_encrypted_password_digest!; end

    sig { void }
    def restore_encrypted_password_digest_multi_region!; end

    sig { void }
    def restore_encrypted_recovery_code_digest!; end

    sig { void }
    def restore_encrypted_recovery_code_digest_generated_at!; end

    sig { void }
    def restore_encrypted_recovery_code_digest_multi_region!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_otp_delivery_preference!; end

    sig { void }
    def restore_password_compromised_checked_at!; end

    sig { void }
    def restore_phone_confirmed_at!; end

    sig { void }
    def restore_piv_cac_recommended_dismissed_at!; end

    sig { void }
    def restore_reinstated_at!; end

    sig { void }
    def restore_remember_device_revoked_at!; end

    sig { void }
    def restore_reset_password_sent_at!; end

    sig { void }
    def restore_reset_password_token!; end

    sig { void }
    def restore_second_factor_attempts_count!; end

    sig { void }
    def restore_second_factor_locked_at!; end

    sig { void }
    def restore_second_mfa_reminder_dismissed_at!; end

    sig { void }
    def restore_sign_in_new_device_at!; end

    sig { void }
    def restore_suspended_at!; end

    sig { void }
    def restore_unique_session_id!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_uuid!; end

    sig { void }
    def restore_webauthn_platform_recommended_dismissed_at!; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_accepted_terms_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_accepted_terms_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_confirmed_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_confirmed_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_direct_otp; end

    sig { returns(T::Boolean) }
    def saved_change_to_direct_otp?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_direct_otp_sent_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_direct_otp_sent_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_email_language; end

    sig { returns(T::Boolean) }
    def saved_change_to_email_language?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_encrypted_password_digest; end

    sig { returns(T::Boolean) }
    def saved_change_to_encrypted_password_digest?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_encrypted_password_digest_multi_region; end

    sig { returns(T::Boolean) }
    def saved_change_to_encrypted_password_digest_multi_region?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_encrypted_recovery_code_digest; end

    sig { returns(T::Boolean) }
    def saved_change_to_encrypted_recovery_code_digest?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_encrypted_recovery_code_digest_generated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_encrypted_recovery_code_digest_generated_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_encrypted_recovery_code_digest_multi_region; end

    sig { returns(T::Boolean) }
    def saved_change_to_encrypted_recovery_code_digest_multi_region?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_otp_delivery_preference; end

    sig { returns(T::Boolean) }
    def saved_change_to_otp_delivery_preference?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_password_compromised_checked_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_password_compromised_checked_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_phone_confirmed_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_phone_confirmed_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_piv_cac_recommended_dismissed_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_piv_cac_recommended_dismissed_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_reinstated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_reinstated_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_remember_device_revoked_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_remember_device_revoked_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_reset_password_sent_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_reset_password_sent_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_reset_password_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_reset_password_token?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_second_factor_attempts_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_second_factor_attempts_count?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_second_factor_locked_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_second_factor_locked_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_second_mfa_reminder_dismissed_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_second_mfa_reminder_dismissed_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_sign_in_new_device_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_sign_in_new_device_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_suspended_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_suspended_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_unique_session_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_unique_session_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_uuid; end

    sig { returns(T::Boolean) }
    def saved_change_to_uuid?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_webauthn_platform_recommended_dismissed_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_webauthn_platform_recommended_dismissed_at?; end

    sig { returns(T.nilable(::Integer)) }
    def second_factor_attempts_count; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def second_factor_attempts_count=(value); end

    sig { returns(T::Boolean) }
    def second_factor_attempts_count?; end

    sig { returns(T.nilable(::Integer)) }
    def second_factor_attempts_count_before_last_save; end

    sig { returns(T.untyped) }
    def second_factor_attempts_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def second_factor_attempts_count_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def second_factor_attempts_count_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def second_factor_attempts_count_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def second_factor_attempts_count_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def second_factor_attempts_count_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def second_factor_attempts_count_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def second_factor_attempts_count_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def second_factor_attempts_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def second_factor_attempts_count_was; end

    sig { void }
    def second_factor_attempts_count_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def second_factor_locked_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def second_factor_locked_at=(value); end

    sig { returns(T::Boolean) }
    def second_factor_locked_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def second_factor_locked_at_before_last_save; end

    sig { returns(T.untyped) }
    def second_factor_locked_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def second_factor_locked_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def second_factor_locked_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def second_factor_locked_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def second_factor_locked_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def second_factor_locked_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def second_factor_locked_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def second_factor_locked_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def second_factor_locked_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def second_factor_locked_at_was; end

    sig { void }
    def second_factor_locked_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def second_mfa_reminder_dismissed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def second_mfa_reminder_dismissed_at=(value); end

    sig { returns(T::Boolean) }
    def second_mfa_reminder_dismissed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def second_mfa_reminder_dismissed_at_before_last_save; end

    sig { returns(T.untyped) }
    def second_mfa_reminder_dismissed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def second_mfa_reminder_dismissed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def second_mfa_reminder_dismissed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def second_mfa_reminder_dismissed_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def second_mfa_reminder_dismissed_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def second_mfa_reminder_dismissed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def second_mfa_reminder_dismissed_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def second_mfa_reminder_dismissed_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def second_mfa_reminder_dismissed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def second_mfa_reminder_dismissed_at_was; end

    sig { void }
    def second_mfa_reminder_dismissed_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def sign_in_new_device_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def sign_in_new_device_at=(value); end

    sig { returns(T::Boolean) }
    def sign_in_new_device_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def sign_in_new_device_at_before_last_save; end

    sig { returns(T.untyped) }
    def sign_in_new_device_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def sign_in_new_device_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def sign_in_new_device_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def sign_in_new_device_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def sign_in_new_device_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def sign_in_new_device_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def sign_in_new_device_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def sign_in_new_device_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def sign_in_new_device_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def sign_in_new_device_at_was; end

    sig { void }
    def sign_in_new_device_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at=(value); end

    sig { returns(T::Boolean) }
    def suspended_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at_before_last_save; end

    sig { returns(T.untyped) }
    def suspended_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def suspended_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def suspended_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def suspended_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def suspended_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def suspended_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def suspended_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def suspended_at_was; end

    sig { void }
    def suspended_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def unique_session_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def unique_session_id=(value); end

    sig { returns(T::Boolean) }
    def unique_session_id?; end

    sig { returns(T.nilable(::String)) }
    def unique_session_id_before_last_save; end

    sig { returns(T.untyped) }
    def unique_session_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def unique_session_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def unique_session_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def unique_session_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def unique_session_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def unique_session_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def unique_session_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def unique_session_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def unique_session_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def unique_session_id_was; end

    sig { void }
    def unique_session_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::String) }
    def uuid; end

    sig { params(value: ::String).returns(::String) }
    def uuid=(value); end

    sig { returns(T::Boolean) }
    def uuid?; end

    sig { returns(T.nilable(::String)) }
    def uuid_before_last_save; end

    sig { returns(T.untyped) }
    def uuid_before_type_cast; end

    sig { returns(T::Boolean) }
    def uuid_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def uuid_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def uuid_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def uuid_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def uuid_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def uuid_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def uuid_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def uuid_previously_was; end

    sig { returns(T.nilable(::String)) }
    def uuid_was; end

    sig { void }
    def uuid_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def webauthn_platform_recommended_dismissed_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def webauthn_platform_recommended_dismissed_at=(value); end

    sig { returns(T::Boolean) }
    def webauthn_platform_recommended_dismissed_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def webauthn_platform_recommended_dismissed_at_before_last_save; end

    sig { returns(T.untyped) }
    def webauthn_platform_recommended_dismissed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def webauthn_platform_recommended_dismissed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def webauthn_platform_recommended_dismissed_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def webauthn_platform_recommended_dismissed_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def webauthn_platform_recommended_dismissed_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def webauthn_platform_recommended_dismissed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def webauthn_platform_recommended_dismissed_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def webauthn_platform_recommended_dismissed_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def webauthn_platform_recommended_dismissed_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def webauthn_platform_recommended_dismissed_at_was; end

    sig { void }
    def webauthn_platform_recommended_dismissed_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_accepted_terms_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_confirmed_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_direct_otp?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_direct_otp_sent_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email_language?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_encrypted_password_digest?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_encrypted_password_digest_multi_region?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_encrypted_recovery_code_digest?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_encrypted_recovery_code_digest_generated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_encrypted_recovery_code_digest_multi_region?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_otp_delivery_preference?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_password_compromised_checked_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_phone_confirmed_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_piv_cac_recommended_dismissed_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reinstated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_remember_device_revoked_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reset_password_sent_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reset_password_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_second_factor_attempts_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_second_factor_locked_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_second_mfa_reminder_dismissed_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sign_in_new_device_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_suspended_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_unique_session_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_uuid?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_webauthn_platform_recommended_dismissed_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_sms(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_voice(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def sms(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def voice(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig { returns(T::Array[::User]) }
    def to_a; end

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::User } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::User } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::User]) }
    def load_target; end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(T::Array[::User])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::User]) }
    def target; end

    sig { returns(T::Array[::User]) }
    def to_a; end

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig { returns(T::Array[::User]) }
    def to_a; end

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::User } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::User } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
