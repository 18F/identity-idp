# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `xmlmapper` gem.
# Please instead update this file by running `bin/tapioca gem xmlmapper`.


# source://xmlmapper//lib/xmlmapper/anonymous_mapper.rb#1
module XmlMapper
  extend ::XmlMapper::AnonymousMapper

  mixes_in_class_methods ::XmlMapper::ClassMethods

  # Set all attributes with a default to their default values
  #
  # source://xmlmapper//lib/xmlmapper.rb#494
  def initialize; end

  # Parse the xml and update this instance. This does not update instances
  # of XmlMappers that are children of this object.  New instances will be
  # created for any XmlMapper children of this object.
  #
  # Params and return are the same as the class parse() method above.
  #
  # source://xmlmapper//lib/xmlmapper.rb#790
  def parse(xml, options = T.unsafe(nil)); end

  # source://xmlmapper//lib/xmlmapper.rb#501
  def registered_namespaces; end

  # Create an xml representation of the specified class based on defined
  # XmlMapper elements and attributes. The method is defined in a way
  # that it can be called recursively by classes that are also XmlMapper
  # classes, allowg for the composition of classes.
  #
  # @param builder [Nokogiri::XML::Builder] an instance of the XML builder which
  #   is being used when called recursively.
  # @param default_namespace [String] The name of the namespace which is the
  #   default for the xml being produced; this is the namespace of the
  #   parent
  # @param namespace_override [String] The namespace specified with the element
  #   declaration in the parent. Overrides the namespace declaration in the
  #   element class itself when calling #to_xml recursively.
  # @param tag_from_parent [String] The xml tag to use on the element when being
  #   called recursively.  This lets the parent doc define its own structure.
  #   Otherwise the element uses the tag it has defined for itself.  Should only
  #   apply when calling a child XmlMapper element.
  # @return [String, Nokogiri::XML::Builder] return XML representation of the
  #   XmlMapper object; when called recursively this is going to return
  #   and Nokogiri::XML::Builder object.
  #
  # source://xmlmapper//lib/xmlmapper.rb#528
  def to_xml(builder = T.unsafe(nil), default_namespace = T.unsafe(nil), namespace_override = T.unsafe(nil), tag_from_parent = T.unsafe(nil)); end

  class << self
    # @private
    #
    # source://xmlmapper//lib/xmlmapper.rb#14
    def included(base); end
  end
end

# source://xmlmapper//lib/xmlmapper/anonymous_mapper.rb#2
module XmlMapper::AnonymousMapper
  # source://xmlmapper//lib/xmlmapper/anonymous_mapper.rb#4
  def parse(xml_content); end

  private

  # Used internally to create and define the necessary xmlmapper
  # elements.
  #
  # source://xmlmapper//lib/xmlmapper/anonymous_mapper.rb#54
  def create_xmlmapper_class_with_element(element); end

  # Used internally when parsing to create a class that is capable of
  # parsing the content. The name of the class is of course not likely
  # going to match the content it will be able to parse so the tag
  # value is set to the one provided.
  #
  # source://xmlmapper//lib/xmlmapper/anonymous_mapper.rb#41
  def create_xmlmapper_class_with_tag(tag_name); end

  # Define a XmlMapper attribute on the provided class based on
  # the attribute provided.
  #
  # source://xmlmapper//lib/xmlmapper/anonymous_mapper.rb#108
  def define_attribute_on_class(class_instance, attribute); end

  # Define a XmlMapper element on the provided class based on
  # the element provided.
  #
  # source://xmlmapper//lib/xmlmapper/anonymous_mapper.rb#79
  def define_element_on_class(class_instance, element); end

  # Borrowed from Active Support to convert unruly element names into a format
  # known and loved by Rubyists.
  #
  # source://xmlmapper//lib/xmlmapper/anonymous_mapper.rb#26
  def underscore(camel_cased_word); end
end

# Factory for creating anonmyous XmlMappers
#
# source://xmlmapper//lib/xmlmapper.rb#797
class XmlMapper::AnonymousWrapperClassFactory
  class << self
    # source://xmlmapper//lib/xmlmapper.rb#798
    def get(name, &blk); end
  end
end

# source://xmlmapper//lib/xmlmapper/attribute.rb#2
class XmlMapper::Attribute < ::XmlMapper::Item
  # Additional options:
  #   :default => Object The default value for this
  #
  # @return [Attribute] a new instance of Attribute
  # @see Item#initialize
  #
  # source://xmlmapper//lib/xmlmapper/attribute.rb#8
  def initialize(name, type, o = T.unsafe(nil)); end

  # Returns the value of attribute default.
  #
  # source://xmlmapper//lib/xmlmapper/attribute.rb#3
  def default; end

  # Sets the attribute default
  #
  # @param value the value to set the attribute default to.
  #
  # source://xmlmapper//lib/xmlmapper/attribute.rb#3
  def default=(_arg0); end

  # source://xmlmapper//lib/xmlmapper/attribute.rb#13
  def find(node, namespace, xpath_options); end
end

# source://xmlmapper//lib/xmlmapper.rb#7
class XmlMapper::Boolean; end

# source://xmlmapper//lib/xmlmapper.rb#38
module XmlMapper::ClassMethods
  # Register a new after_parse callback, given as a block.
  #
  # @yield [object] Yields the newly-parsed object to the block after parsing.
  #   Sub-objects will be already populated.
  #
  # source://xmlmapper//lib/xmlmapper.rb#199
  def after_parse(&block); end

  # The list of registered after_parse callbacks.
  #
  # source://xmlmapper//lib/xmlmapper.rb#190
  def after_parse_callbacks; end

  # The xml has the following attributes defined.
  #
  # @example
  #
  #   "<country code='de'>Germany</country>"
  #
  #   # definition of the 'code' attribute within the class
  #   attribute :code, String
  # @param name [Symbol] the name of the accessor that is created
  # @param type [String, Class] the class name of the name of the class whcih
  #   the object will be converted upon parsing
  # @param options [Hash] additional parameters to send to the relationship
  #
  # source://xmlmapper//lib/xmlmapper.rb#55
  def attribute(name, type, options = T.unsafe(nil)); end

  # The elements defined through {#attribute}.
  #
  # @return [Array<Attribute>] a list of the attributes defined for this class;
  #   an empty array is returned when there have been no attributes defined.
  #
  # source://xmlmapper//lib/xmlmapper.rb#67
  def attributes; end

  # The value stored in the text node of the current element.
  #
  # @example
  #
  #   "<firstName>Michael Jackson</firstName>"
  #
  #   # definition of the 'firstName' text node within the class
  #
  #   content :first_name, String
  # @param name [Symbol] the name of the accessor that is created
  # @param type [String, Class] the class name of the name of the class whcih
  #   the object will be converted upon parsing. By Default String class will be taken.
  # @param options [Hash] additional parameters to send to the relationship
  #
  # source://xmlmapper//lib/xmlmapper.rb#143
  def content(name, type = T.unsafe(nil), options = T.unsafe(nil)); end

  # An element defined in the XML that is parsed.
  #
  # @example
  #
  #   "<address location='home'>
  #   <city>Oldenburg</city>
  #   </address>"
  #
  #   # definition of the 'city' element within the class
  #
  #   element :city, String
  # @param name [Symbol] the name of the accessor that is created
  # @param type [String, Class] the class name of the name of the class whcih
  #   the object will be converted upon parsing
  # @param options [Hash] additional parameters to send to the relationship
  #
  # source://xmlmapper//lib/xmlmapper.rb#110
  def element(name, type, options = T.unsafe(nil)); end

  # The elements defined through {#element}, {#has_one}, and {#has_many}.
  #
  # @return [Array<Element>] a list of the elements contained defined for this
  #   class; an empty array is returned when there have been no elements
  #   defined.
  #
  # source://xmlmapper//lib/xmlmapper.rb#123
  def elements; end

  # The object has many of these elements in the XML.
  #
  # @param name [Symbol] the name of accessor that is created
  # @param type [String, Class] the class name or the name of the class which
  #   the object will be converted upon parsing.
  # @param options [Hash] additional parameters to send to the relationship
  # @see #element
  #
  # source://xmlmapper//lib/xmlmapper.rb#183
  def has_many(name, type, options = T.unsafe(nil)); end

  # The object has one of these elements in the XML. If there are multiple,
  # the last one will be set to this value.
  #
  # @param name [Symbol] the name of the accessor that is created
  # @param type [String, Class] the class name of the name of the class whcih
  #   the object will be converted upon parsing
  # @param options [Hash] additional parameters to send to the relationship
  # @see #element
  #
  # source://xmlmapper//lib/xmlmapper.rb#169
  def has_one(name, type, options = T.unsafe(nil)); end

  # Sets the object to have xml content, this will assign the XML contents
  # that are parsed to the attribute accessor xml_content. The object will
  # respond to the method #xml_content and will return the XML data that
  # it has parsed.
  #
  # source://xmlmapper//lib/xmlmapper.rb#154
  def has_xml_content; end

  # Specify a namespace if a node and all its children are all namespaced
  # elements. This is simpler than passing the :namespace option to each
  # defined element.
  #
  # @param namespace [String] the namespace to set as default for the class
  #   element.
  #
  # source://xmlmapper//lib/xmlmapper.rb#211
  def namespace(namespace = T.unsafe(nil)); end

  # The callback defined through {.with_nokogiri_config}.
  #
  # @return [Proc] the proc to pass to Nokogiri to setup parse options. nil if empty.
  #
  # source://xmlmapper//lib/xmlmapper.rb#268
  def nokogiri_config_callback; end

  # @param xml [Nokogiri::XML::Node, Nokogiri:XML::Document, String] the XML
  #   contents to convert into Object.
  # @param options [Hash] additional information for parsing. :single => true
  #   if requesting a single object, otherwise it defaults to retuning an
  #   array of multiple items. :xpath information where to start the parsing
  #   :namespace is the namespace to use for additional information.
  #
  # source://xmlmapper//lib/xmlmapper.rb#289
  def parse(xml, options = T.unsafe(nil)); end

  # Register a namespace that is used to persist the object namespace back to
  # XML.
  #
  # @example
  #
  #   register_namespace 'prefix', 'http://www.unicornland.com/prefix'
  #
  #   # the output will contain the namespace defined
  #
  #   "<outputXML xmlns:prefix="http://www.unicornland.com/prefix">
  #   ...
  #   </outputXML>"
  # @param namespace [String] the xml prefix
  # @param ns [String] url for the xml namespace
  #
  # source://xmlmapper//lib/xmlmapper.rb#88
  def register_namespace(namespace, ns); end

  # @param new_tag_name [String] the name for the tag
  #
  # source://xmlmapper//lib/xmlmapper.rb#219
  def tag(new_tag_name); end

  # The name of the tag
  #
  # @return [String] the name of the tag as a string, downcased
  #
  # source://xmlmapper//lib/xmlmapper.rb#228
  def tag_name; end

  # Register a config callback according to the block Nokogori expects when calling Nokogiri::XML::Document.parse().
  # See http://nokogiri.org/Nokogiri/XML/Document.html#method-c-parse
  #
  # @param the [Proc] proc to pass to Nokogiri to setup parse options
  #
  # source://xmlmapper//lib/xmlmapper.rb#277
  def with_nokogiri_config(&blk); end

  # There is an XML tag that needs to be known for parsing and should be generated
  # during a to_xml.  But it doesn't need to be a class and the contained elements should
  # be made available on the parent class
  #
  # @param name [String] the name of the element that is just a place holder
  # @param blk [Proc] the element definitions inside the place holder tag
  #
  # source://xmlmapper//lib/xmlmapper.rb#239
  def wrap(name, &blk); end
end

# source://xmlmapper//lib/xmlmapper.rb#12
XmlMapper::DEFAULT_NS = T.let(T.unsafe(nil), String)

# source://xmlmapper//lib/xmlmapper/element.rb#2
class XmlMapper::Element < ::XmlMapper::Item
  # source://xmlmapper//lib/xmlmapper/element.rb#4
  def find(node, namespace, xpath_options); end

  # source://xmlmapper//lib/xmlmapper/element.rb#34
  def handle_attributes_option(result, value, xpath_options); end
end

# source://xmlmapper//lib/xmlmapper/item.rb#2
class XmlMapper::Item
  # options:
  #   :deep   =>  Boolean False to only parse element's children, True to include
  #               grandchildren and all others down the chain (// in xpath)
  #   :namespace => String Element's namespace if it's not the global or inherited
  #                  default
  #   :parser =>  Symbol Class method to use for type coercion.
  #   :raw    =>  Boolean Use raw node value (inc. tags) when parsing.
  #   :single =>  Boolean False if object should be collection, True for single object
  #   :tag    =>  String Element name if it doesn't match the specified name.
  #
  # @return [Item] a new instance of Item
  #
  # source://xmlmapper//lib/xmlmapper/item.rb#14
  def initialize(name, type, o = T.unsafe(nil)); end

  # source://xmlmapper//lib/xmlmapper/item.rb#24
  def constant; end

  # @param node [XMLNode] the xml node that is being parsed
  # @param namespace [String] the name of the namespace
  # @param xpath_options [Hash] additional xpath options
  #
  # source://xmlmapper//lib/xmlmapper/item.rb#33
  def from_xml_node(node, namespace, xpath_options); end

  # source://xmlmapper//lib/xmlmapper/item.rb#58
  def method_name; end

  # Returns the value of attribute name.
  #
  # source://xmlmapper//lib/xmlmapper/item.rb#3
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://xmlmapper//lib/xmlmapper/item.rb#3
  def name=(_arg0); end

  # Returns the value of attribute namespace.
  #
  # source://xmlmapper//lib/xmlmapper/item.rb#3
  def namespace; end

  # Sets the attribute namespace
  #
  # @param value the value to set the attribute namespace to.
  #
  # source://xmlmapper//lib/xmlmapper/item.rb#3
  def namespace=(_arg0); end

  # Returns the value of attribute options.
  #
  # source://xmlmapper//lib/xmlmapper/item.rb#3
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://xmlmapper//lib/xmlmapper/item.rb#3
  def options=(_arg0); end

  # Returns the value of attribute tag.
  #
  # source://xmlmapper//lib/xmlmapper/item.rb#3
  def tag; end

  # Sets the attribute tag
  #
  # @param value the value to set the attribute tag to.
  #
  # source://xmlmapper//lib/xmlmapper/item.rb#3
  def tag=(_arg0); end

  # Returns the value of attribute type.
  #
  # source://xmlmapper//lib/xmlmapper/item.rb#3
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://xmlmapper//lib/xmlmapper/item.rb#3
  def type=(_arg0); end

  # Convert the value into the correct type.
  #
  # @param value [String] the string value parsed from the XML value that will
  #   be converted to the particular primitive type.
  # @return [String, Float, Time, Date, DateTime, Boolean, Integer] the converted value
  #   to the new type.
  #
  # source://xmlmapper//lib/xmlmapper/item.rb#71
  def typecast(value); end

  # source://xmlmapper//lib/xmlmapper/item.rb#49
  def xpath(namespace = T.unsafe(nil)); end

  private

  # Convert any String defined types into their constant version so that
  # the method #parse or the custom defined parser method would be used.
  #
  # @param type [String, Constant] is the name of the class or the constant
  #   for the class.
  # @return [Constant] the constant of the type
  #
  # source://xmlmapper//lib/xmlmapper/item.rb#141
  def constantize(type); end

  # source://xmlmapper//lib/xmlmapper/item.rb#145
  def convert_string_to_constant(type); end

  # A custom parser is a custom parse method on the class. When the parser
  # option has been set this value is the name of the method which will be
  # used to parse the node content.
  #
  # @return [Boolean]
  #
  # source://xmlmapper//lib/xmlmapper/item.rb#111
  def custom_parser_defined?; end

  # Processes a Nokogiri::XML::Node as a supported type
  #
  # source://xmlmapper//lib/xmlmapper/item.rb#93
  def process_node_as_supported_type(node); end

  # Process a Nokogiri::XML::Node as XML Content
  #
  # source://xmlmapper//lib/xmlmapper/item.rb#101
  def process_node_as_xml_content(node); end

  # source://xmlmapper//lib/xmlmapper/item.rb#115
  def process_node_with_custom_parser(node); end

  # source://xmlmapper//lib/xmlmapper/item.rb#129
  def process_node_with_default_parser(node, parse_options); end

  # @return [Boolean] true if the type defined for the item is defined in the
  #   list of support types.
  #
  # source://xmlmapper//lib/xmlmapper/item.rb#80
  def suported_type_registered?; end

  # @return [#apply] the typecaster object that will be able to convert
  #   the value into a value with the correct type.
  #
  # source://xmlmapper//lib/xmlmapper/item.rb#86
  def typecaster(value); end
end

# source://xmlmapper//lib/xmlmapper/supported_types.rb#2
module XmlMapper::SupportedTypes
  extend ::XmlMapper::SupportedTypes

  # Add a new converter to the list of supported types. A converter
  # is an object that adheres to the protocol which is defined with two
  # methods #apply?(value,convert_to_type) and #apply(value).
  #
  # @example Defining a class that would process `nil` or values that have
  #   already been converted.
  #
  #   class NilOrAlreadyConverted
  #   def apply?(value,convert_to_type)
  #   value.kind_of?(convert_to_type) || value.nil?
  #   end
  #
  #   def apply(value)
  #   value
  #   end
  #   end
  #
  # source://xmlmapper//lib/xmlmapper/supported_types.rb#33
  def register(type_converter); end

  # An additional shortcut registration method that assumes that you want
  # to perform a conversion on a specific type. A block is provided which
  # is the operation to perform when #apply(value) has been called.
  #
  # @example Registering a DateTime parser
  #
  #   XmlMapper::SupportedTypes.register_type DateTime do |value|
  #   DateTime.parse(value,to_s)
  #   end
  #
  # source://xmlmapper//lib/xmlmapper/supported_types.rb#48
  def register_type(type, &block); end

  # All of the registerd supported types that can be parsed.
  #
  # All types defined here are set through #register.
  #
  # source://xmlmapper//lib/xmlmapper/supported_types.rb#10
  def types; end
end

# Many of the conversions are based on type. When the type specified
# matches then perform the action specified in the specified block.
# If no block is provided the value is simply returned.
#
# source://xmlmapper//lib/xmlmapper/supported_types.rb#57
class XmlMapper::SupportedTypes::CastWhenType
  # @return [CastWhenType] a new instance of CastWhenType
  #
  # source://xmlmapper//lib/xmlmapper/supported_types.rb#60
  def initialize(type, &block); end

  # source://xmlmapper//lib/xmlmapper/supported_types.rb#73
  def apply(value); end

  # @return [Boolean]
  #
  # source://xmlmapper//lib/xmlmapper/supported_types.rb#69
  def apply?(value, convert_to_type); end

  # source://xmlmapper//lib/xmlmapper/supported_types.rb#65
  def no_operation; end

  # Returns the value of attribute type.
  #
  # source://xmlmapper//lib/xmlmapper/supported_types.rb#58
  def type; end
end

# For the cases when the value is nil or is already the
# intended type then no work needs to be done and the
# value simply can be returned.
#
# source://xmlmapper//lib/xmlmapper/supported_types.rb#83
class XmlMapper::SupportedTypes::NilOrAlreadyConverted
  # source://xmlmapper//lib/xmlmapper/supported_types.rb#93
  def apply(value); end

  # @return [Boolean]
  #
  # source://xmlmapper//lib/xmlmapper/supported_types.rb#89
  def apply?(value, convert_to_type); end

  # source://xmlmapper//lib/xmlmapper/supported_types.rb#85
  def type; end
end

# source://xmlmapper//lib/xmlmapper/text_node.rb#2
class XmlMapper::TextNode < ::XmlMapper::Item
  # source://xmlmapper//lib/xmlmapper/text_node.rb#4
  def find(node, namespace, xpath_options); end
end

# source://xmlmapper//lib/xmlmapper.rb#8
class XmlMapper::XmlContent; end
