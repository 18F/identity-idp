<% self.title = t('titles.visitors.index') %>

<% if decorated_sp_session.sp_name %>
  <%= render 'sign_up/registrations/sp_registration_heading' %>
<% end %>

<%= render TabNavigationComponent.new(
      label: t('account.login.tab_navigation'),
      routes: [
        { text: t('links.sign_in'), path: new_user_session_url },
        { text: t('links.create_account'), path: sign_up_email_url },
      ],
      class: 'margin-bottom-4',
    ) %>

<%= render PageHeadingComponent.new.with_content(t('headings.sign_in_existing_users')) %>

<%= render 'shared/sp_alert', section: 'sign_in' %>

<% if @issuer_forced_reauthentication %>
  <p>
    <%= t('account.login.forced_reauthentication_notice_html', sp_name: decorated_sp_session.sp_name) %>
  </p>
<% end %>

<%= simple_form_for(resource, as: resource_name, url: session_path(resource_name)) do |f| %>
  <%= render ValidatedFieldComponent.new(
        form: f,
        name: :email,
        label: t('account.index.email'),
        required: true,
        input_html: { autocorrect: 'off' },
      ) %>
  <%= render PasswordToggleComponent.new(
        form: f,
        class: 'margin-bottom-4',
        field_options: {
          required: true,
          input_html: {
            autocomplete: 'current-password',
          },
        },
      ) %>
  <%= hidden_field_tag :platform_authenticator_available, id: 'platform_authenticator_available' %>

  <% if FeatureManagement.sign_in_recaptcha_enabled? || IdentityConfig.store.recaptcha_mock_validator %>
    <%= render CaptchaSubmitButtonComponent.new(
          form: f,
          action: SignInRecaptchaForm::RECAPTCHA_ACTION,
          button_options: { full_width: true },
        ).with_content(t('links.sign_in')) %>
  <% else %>
    <%= f.submit t('links.sign_in'), full_width: true, wide: false %>
  <% end %>
<% end %>
<% if desktop_device? %>
  <div class='margin-x-neg-1 margin-top-205'>
    <%= link_to(
          t('account.login.piv_cac'),
          login_piv_cac_url,
          class: 'padding-x-1',
        ) %>
  </div>
<% end %>

<%= render PageFooterComponent.new do %>
  <% if decorated_sp_session.sp_name %>
    <div class="margin-bottom-1">
      <%= render 'devise/sessions/return_to_service_provider' %>
    </div>
  <% end %>

  <div class="margin-bottom-1">
    <%= link_to(t('links.passwords.forgot'), new_user_password_url) %>
  </div>

  <p class="margin-y-1">
    <%= new_tab_link_to(
          t('notices.privacy.security_and_privacy_practices'),
          MarketingSite.security_and_privacy_practices_url,
        ) %>
  </p>

  <p class="margin-y-1">
    <%= new_tab_link_to(
          t('notices.privacy.privacy_act_statement'),
          MarketingSite.privacy_act_statement_url,
        ) %>
  </p>
<% end %>

<%= javascript_packs_tag_once('platform-authenticator-available', preload_links_header: false) %>
<% if IdentityConfig.store.participate_in_dap %>
  <!-- <%= t('notices.dap_participation') %> -->
  <%= javascript_packs_tag_once(
        'https://dap.digitalgov.gov/Universal-Federated-Analytics-Min.js?agency=GSA&subagency=TTS',
        async: true,
        id: '_fed_an_ua_tag',
        preload_links_header: false,
      ) %>
<% end %>
