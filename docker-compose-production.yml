# Use this compose file to run a local production-like stack
#  `docker-compose --file docker-compose-production.yml` to use it up
# Not great for development work
version: '3'
services:
  app:
    build:
      context: .
      dockerfile: production.Dockerfile
    volumes:
       - ./app:/idp/app
       - ./certs:/idp/certs
       - ./config:/idp/config
       - ./db:/idp/db
       - ./keys:/idp/keys
       - ./lib:/idp/lib
       - ./log:/idp/log
       - ./pwned_passwords:/idp/pwned_passwords
       - ./vendor:/idp/vendor
    environment:
      redis_url: "redis://redis:6379"
      redis_throttle_url: "redis://redis:6379"
      DATABASE_URL: "postgres://postgres@db"
      DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL: 'true'
      # Set database timeouts to 30 seconds
      database_timeout: '30000'
      database_statement_timeout: '30000'
      RACK_TIMEOUT_SERVICE_TIMEOUT: '30000'
      DOCKER_DB_HOST: 'db'
      DOCKER_DB_USER: 'postgres'
      # '' == 1 thread for tests; performs better in a container
      TEST_ENV_NUMBER: ''
    depends_on:
      - db
      - redis
  web:
    image: nginx:alpine
    ports:
      - "3000:3000"
  db:
    image: postgres:9.6-alpine
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    # Trust Docker network - Not suitable for real production
    environment:
      POSTGRES_HOST_AUTH_METHOD: 'trust'
  redis:
    image: redis:5-alpine
