# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `propshaft` gem.
# Please instead update this file by running `bin/tapioca gem propshaft`.


# source://propshaft//lib/propshaft.rb#6
module Propshaft
  # source://propshaft//lib/propshaft.rb#7
  def logger; end

  # source://propshaft//lib/propshaft.rb#7
  def logger=(val); end

  class << self
    # source://propshaft//lib/propshaft.rb#7
    def logger; end

    # source://propshaft//lib/propshaft.rb#7
    def logger=(val); end
  end
end

# source://propshaft//lib/propshaft/assembly.rb#10
class Propshaft::Assembly
  # @return [Assembly] a new instance of Assembly
  #
  # source://propshaft//lib/propshaft/assembly.rb#13
  def initialize(config); end

  # source://propshaft//lib/propshaft/assembly.rb#38
  def compilers; end

  # Returns the value of attribute config.
  #
  # source://propshaft//lib/propshaft/assembly.rb#11
  def config; end

  # source://propshaft//lib/propshaft/assembly.rb#17
  def load_path; end

  # source://propshaft//lib/propshaft/assembly.rb#33
  def processor; end

  # source://propshaft//lib/propshaft/assembly.rb#21
  def resolver; end

  # source://propshaft//lib/propshaft/assembly.rb#47
  def reveal(path_type = T.unsafe(nil)); end

  # source://propshaft//lib/propshaft/assembly.rb#29
  def server; end

  private

  # source://propshaft//lib/propshaft/assembly.rb#56
  def manifest_path; end
end

# source://propshaft//lib/propshaft/asset.rb#4
class Propshaft::Asset
  # @return [Asset] a new instance of Asset
  #
  # source://propshaft//lib/propshaft/asset.rb#7
  def initialize(path, logical_path:, load_path:); end

  # source://propshaft//lib/propshaft/asset.rb#39
  def ==(other_asset); end

  # source://propshaft//lib/propshaft/asset.rb#11
  def content; end

  # source://propshaft//lib/propshaft/asset.rb#15
  def content_type; end

  # source://propshaft//lib/propshaft/asset.rb#23
  def digest; end

  # source://propshaft//lib/propshaft/asset.rb#27
  def digested_path; end

  # @return [Boolean]
  #
  # source://propshaft//lib/propshaft/asset.rb#35
  def fresh?(digest); end

  # source://propshaft//lib/propshaft/asset.rb#19
  def length; end

  # Returns the value of attribute load_path.
  #
  # source://propshaft//lib/propshaft/asset.rb#5
  def load_path; end

  # Returns the value of attribute logical_path.
  #
  # source://propshaft//lib/propshaft/asset.rb#5
  def logical_path; end

  # Returns the value of attribute path.
  #
  # source://propshaft//lib/propshaft/asset.rb#5
  def path; end

  private

  # @return [Boolean]
  #
  # source://propshaft//lib/propshaft/asset.rb#48
  def already_digested?; end

  # source://propshaft//lib/propshaft/asset.rb#44
  def content_with_compile_references; end
end

# Base compiler from which other compilers can inherit
#
# source://propshaft//lib/propshaft/compiler.rb#4
class Propshaft::Compiler
  # @return [Compiler] a new instance of Compiler
  #
  # source://propshaft//lib/propshaft/compiler.rb#8
  def initialize(assembly); end

  # Returns the value of attribute assembly.
  #
  # source://propshaft//lib/propshaft/compiler.rb#5
  def assembly; end

  # Override this in a specific compiler
  #
  # @raise [NotImplementedError]
  #
  # source://propshaft//lib/propshaft/compiler.rb#13
  def compile(asset, input); end

  # source://propshaft//lib/propshaft/compiler.rb#6
  def config(*_arg0, **_arg1, &_arg2); end

  # source://propshaft//lib/propshaft/compiler.rb#6
  def load_path(*_arg0, **_arg1, &_arg2); end

  # source://propshaft//lib/propshaft/compiler.rb#17
  def referenced_by(asset); end

  private

  # source://propshaft//lib/propshaft/compiler.rb#22
  def url_prefix; end
end

# source://propshaft//lib/propshaft/compiler/css_asset_urls.rb#5
class Propshaft::Compiler::CssAssetUrls < ::Propshaft::Compiler
  # source://propshaft//lib/propshaft/compiler/css_asset_urls.rb#8
  def compile(asset, input); end

  # source://propshaft//lib/propshaft/compiler/css_asset_urls.rb#12
  def referenced_by(asset, references: T.unsafe(nil)); end

  private

  # source://propshaft//lib/propshaft/compiler/css_asset_urls.rb#36
  def asset_url(resolved_path, logical_path, fingerprint, pattern); end

  # source://propshaft//lib/propshaft/compiler/css_asset_urls.rb#26
  def resolve_path(directory, filename); end
end

# source://propshaft//lib/propshaft/compiler/css_asset_urls.rb#6
Propshaft::Compiler::CssAssetUrls::ASSET_URL_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://propshaft//lib/propshaft/compiler/source_mapping_urls.rb#5
class Propshaft::Compiler::SourceMappingUrls < ::Propshaft::Compiler
  # source://propshaft//lib/propshaft/compiler/source_mapping_urls.rb#8
  def compile(asset, input); end

  private

  # source://propshaft//lib/propshaft/compiler/source_mapping_urls.rb#13
  def asset_path(source_mapping_url, logical_path); end

  # source://propshaft//lib/propshaft/compiler/source_mapping_urls.rb#23
  def source_mapping_url(logical_path, resolved_path, comment_start, comment_end); end
end

# source://propshaft//lib/propshaft/compiler/source_mapping_urls.rb#6
Propshaft::Compiler::SourceMappingUrls::SOURCE_MAPPING_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://propshaft//lib/propshaft/compilers.rb#1
class Propshaft::Compilers
  # @return [Compilers] a new instance of Compilers
  #
  # source://propshaft//lib/propshaft/compilers.rb#4
  def initialize(assembly); end

  # @return [Boolean]
  #
  # source://propshaft//lib/propshaft/compilers.rb#14
  def any?; end

  # Returns the value of attribute assembly.
  #
  # source://propshaft//lib/propshaft/compilers.rb#2
  def assembly; end

  # @return [Boolean]
  #
  # source://propshaft//lib/propshaft/compilers.rb#18
  def compilable?(asset); end

  # source://propshaft//lib/propshaft/compilers.rb#22
  def compile(asset); end

  # source://propshaft//lib/propshaft/compilers.rb#34
  def referenced_by(asset); end

  # source://propshaft//lib/propshaft/compilers.rb#9
  def register(mime_type, klass); end

  # Returns the value of attribute registrations.
  #
  # source://propshaft//lib/propshaft/compilers.rb#2
  def registrations; end
end

# Generic base class for all Propshaft exceptions.
#
# source://propshaft//lib/propshaft/errors.rb#5
class Propshaft::Error < ::StandardError; end

# source://propshaft//lib/propshaft/helper.rb#2
module Propshaft::Helper
  # Returns a sorted and unique array of logical paths for all stylesheets in the load path.
  #
  # source://propshaft//lib/propshaft/helper.rb#21
  def all_stylesheets_paths; end

  # Returns a sorted and unique array of logical paths for all stylesheets in app/assets/**/*.css.
  #
  # source://propshaft//lib/propshaft/helper.rb#26
  def app_stylesheets_paths; end

  # source://propshaft//lib/propshaft/helper.rb#3
  def compute_asset_path(path, options = T.unsafe(nil)); end

  # Add an option to call `stylesheet_link_tag` with `:all` to include every css file found on the load path
  # or `:app` to include css files found in `Rails.root("app/assets/**/*.css")`, which will exclude lib/ and plugins.
  #
  # source://propshaft//lib/propshaft/helper.rb#9
  def stylesheet_link_tag(*sources, **options); end
end

# source://propshaft//lib/propshaft/load_path.rb#3
class Propshaft::LoadPath
  # @return [LoadPath] a new instance of LoadPath
  #
  # source://propshaft//lib/propshaft/load_path.rb#6
  def initialize(paths = T.unsafe(nil), compilers:, version: T.unsafe(nil)); end

  # source://propshaft//lib/propshaft/load_path.rb#27
  def asset_paths_by_glob(glob); end

  # source://propshaft//lib/propshaft/load_path.rb#22
  def asset_paths_by_type(content_type); end

  # source://propshaft//lib/propshaft/load_path.rb#18
  def assets; end

  # Returns a file watcher object configured to clear the cache of the load_path
  # when the directories passed during its initialization have changes. This is used in development
  # and test to ensure the map caches are reset when javascript files are changed.
  #
  # source://propshaft//lib/propshaft/load_path.rb#43
  def cache_sweeper; end

  # Returns the value of attribute compilers.
  #
  # source://propshaft//lib/propshaft/load_path.rb#4
  def compilers; end

  # source://propshaft//lib/propshaft/load_path.rb#10
  def find(asset_name); end

  # source://propshaft//lib/propshaft/load_path.rb#14
  def find_referenced_by(asset); end

  # source://propshaft//lib/propshaft/load_path.rb#32
  def manifest; end

  # Returns the value of attribute paths.
  #
  # source://propshaft//lib/propshaft/load_path.rb#4
  def paths; end

  # Returns the value of attribute version.
  #
  # source://propshaft//lib/propshaft/load_path.rb#4
  def version; end

  private

  # source://propshaft//lib/propshaft/load_path.rb#70
  def all_files_from_tree(path); end

  # source://propshaft//lib/propshaft/load_path.rb#59
  def assets_by_path; end

  # source://propshaft//lib/propshaft/load_path.rb#82
  def clear_cache; end

  # source://propshaft//lib/propshaft/load_path.rb#92
  def dedup(paths); end

  # source://propshaft//lib/propshaft/load_path.rb#74
  def extract_logical_paths_from(assets); end

  # source://propshaft//lib/propshaft/load_path.rb#88
  def seed_cache; end

  # source://propshaft//lib/propshaft/load_path.rb#78
  def without_dotfiles(files); end
end

# Raised when LoadPath cannot find the requested asset
#
# source://propshaft//lib/propshaft/errors.rb#8
class Propshaft::MissingAssetError < ::Propshaft::Error
  # @return [MissingAssetError] a new instance of MissingAssetError
  #
  # source://propshaft//lib/propshaft/errors.rb#9
  def initialize(path); end

  # source://propshaft//lib/propshaft/errors.rb#14
  def message; end
end

# source://propshaft//lib/propshaft/output_path.rb#3
class Propshaft::OutputPath
  # @return [OutputPath] a new instance of OutputPath
  #
  # source://propshaft//lib/propshaft/output_path.rb#6
  def initialize(path, manifest); end

  # source://propshaft//lib/propshaft/output_path.rb#10
  def clean(count, age); end

  # source://propshaft//lib/propshaft/output_path.rb#25
  def files; end

  # Returns the value of attribute manifest.
  #
  # source://propshaft//lib/propshaft/output_path.rb#4
  def manifest; end

  # Returns the value of attribute path.
  #
  # source://propshaft//lib/propshaft/output_path.rb#4
  def path; end

  private

  # source://propshaft//lib/propshaft/output_path.rb#51
  def all_files_from_tree(path); end

  # source://propshaft//lib/propshaft/output_path.rb#55
  def extract_path_and_digest(digested_path); end

  # source://propshaft//lib/propshaft/output_path.rb#41
  def fresh_version_within_limit(mtime, count, expires_at:, limit:); end

  # source://propshaft//lib/propshaft/output_path.rb#46
  def remove(path); end
end

# source://propshaft//lib/propshaft/processor.rb#3
class Propshaft::Processor
  # @return [Processor] a new instance of Processor
  #
  # source://propshaft//lib/propshaft/processor.rb#8
  def initialize(load_path:, output_path:, compilers:); end

  # source://propshaft//lib/propshaft/processor.rb#23
  def clean(count); end

  # source://propshaft//lib/propshaft/processor.rb#19
  def clobber; end

  # Returns the value of attribute compilers.
  #
  # source://propshaft//lib/propshaft/processor.rb#6
  def compilers; end

  # Returns the value of attribute load_path.
  #
  # source://propshaft//lib/propshaft/processor.rb#6
  def load_path; end

  # Returns the value of attribute output_path.
  #
  # source://propshaft//lib/propshaft/processor.rb#6
  def output_path; end

  # source://propshaft//lib/propshaft/processor.rb#13
  def process; end

  private

  # source://propshaft//lib/propshaft/processor.rb#54
  def compile_asset(asset); end

  # source://propshaft//lib/propshaft/processor.rb#65
  def copy_asset(asset); end

  # source://propshaft//lib/propshaft/processor.rb#28
  def ensure_output_path_exists; end

  # source://propshaft//lib/propshaft/processor.rb#50
  def output_asset(asset); end

  # source://propshaft//lib/propshaft/processor.rb#40
  def output_assets; end

  # source://propshaft//lib/propshaft/processor.rb#33
  def write_manifest; end
end

# source://propshaft//lib/propshaft/processor.rb#4
Propshaft::Processor::MANIFEST_FILENAME = T.let(T.unsafe(nil), String)

# source://propshaft//lib/propshaft/quiet_assets.rb#1
class Propshaft::QuietAssets
  # @return [QuietAssets] a new instance of QuietAssets
  #
  # source://propshaft//lib/propshaft/quiet_assets.rb#2
  def initialize(app); end

  # source://propshaft//lib/propshaft/quiet_assets.rb#7
  def call(env); end
end

# source://propshaft//lib/propshaft/railtie.rb#6
class Propshaft::Railtie < ::Rails::Railtie; end

# source://propshaft//lib/propshaft/resolver/dynamic.rb#1
module Propshaft::Resolver; end

# source://propshaft//lib/propshaft/resolver/dynamic.rb#2
class Propshaft::Resolver::Dynamic
  # @return [Dynamic] a new instance of Dynamic
  #
  # source://propshaft//lib/propshaft/resolver/dynamic.rb#5
  def initialize(load_path:, prefix:); end

  # Returns the value of attribute load_path.
  #
  # source://propshaft//lib/propshaft/resolver/dynamic.rb#3
  def load_path; end

  # Returns the value of attribute prefix.
  #
  # source://propshaft//lib/propshaft/resolver/dynamic.rb#3
  def prefix; end

  # source://propshaft//lib/propshaft/resolver/dynamic.rb#15
  def read(logical_path); end

  # source://propshaft//lib/propshaft/resolver/dynamic.rb#9
  def resolve(logical_path); end
end

# source://propshaft//lib/propshaft/resolver/static.rb#2
class Propshaft::Resolver::Static
  # @return [Static] a new instance of Static
  #
  # source://propshaft//lib/propshaft/resolver/static.rb#5
  def initialize(manifest_path:, prefix:); end

  # Returns the value of attribute manifest_path.
  #
  # source://propshaft//lib/propshaft/resolver/static.rb#3
  def manifest_path; end

  # Returns the value of attribute prefix.
  #
  # source://propshaft//lib/propshaft/resolver/static.rb#3
  def prefix; end

  # source://propshaft//lib/propshaft/resolver/static.rb#15
  def read(logical_path); end

  # source://propshaft//lib/propshaft/resolver/static.rb#9
  def resolve(logical_path); end

  private

  # source://propshaft//lib/propshaft/resolver/static.rb#22
  def parsed_manifest; end
end

# source://propshaft//lib/propshaft/server.rb#4
class Propshaft::Server
  # @return [Server] a new instance of Server
  #
  # source://propshaft//lib/propshaft/server.rb#5
  def initialize(assembly); end

  # source://propshaft//lib/propshaft/server.rb#9
  def call(env); end

  # source://propshaft//lib/propshaft/server.rb#31
  def inspect; end

  private

  # source://propshaft//lib/propshaft/server.rb#36
  def extract_path_and_digest(env); end
end

# source://propshaft//lib/propshaft/server.rb#47
Propshaft::Server::VARY = T.let(T.unsafe(nil), String)
