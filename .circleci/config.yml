# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2.1

orbs:
  jq: circleci/jq@2.2.0
  slack: circleci/slack@3.4.2
executors:
  # Common container definition used by all jobs
  ruby_browsers:
    docker:
      # Specify the Ruby version you desire here
      - image: circleci/ruby:2.7.3-node-browsers
        environment:
          RAILS_ENV: test
          BUNDLER_VERSION: 2.2.20

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: circleci

      - image: redis:5.0.8

commands:
  bundle-yarn-install:
    steps:
      - run: gem install bundler --version $BUNDLER_VERSION
      - restore_cache:
          keys:
            - v2-identity-idp-bundle-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install dependencies
          command: |
            bundle check || bundle install --deployment --jobs=4 --retry=3 --without deploy development doc production --path vendor/bundle
      - save_cache:
          key: v2-identity-idp-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - restore_cache:
          keys:
            - v1-identity-idp-yarn-{{ checksum "yarn.lock" }}
            - v1-identity-idp-yarn-
      - run:
          name: Install Yarn
          command: yarn install --ignore-engines --cache-folder ~/.cache/yarn
      - save_cache:
          key: v1-identity-idp-yarn-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

  # Custom version of "checkout" that checks out a SHA deployed to sha_url param
  # Adapter from https://gist.github.com/drazisil/e97dc21454120251472154de1c1b1c7b
  checkout-deployed-sha:
    parameters:
      sha_url:
        type: string
    steps:
      - run:
          name: Custom Checkout of Deployed SHA
          command: |
            DEPLOYED_SHA=$(curl --silent << parameters.sha_url >> | jq -r '.git_sha')

            echo "URL: << parameters.sha_url >>"
            echo "SHA: $DEPLOYED_SHA"

            # Use HTTPS to check out, since we don't need to authenticate
            CIRCLE_REPOSITORY_URL_AS_HTTPS=$(echo $CIRCLE_REPOSITORY_URL | sed 's/git@github.com:/https:\/\/github.com\//g')
            echo "REPO: $CIRCLE_REPOSITORY_URL_AS_HTTPS"

            # Workaround old docker images with incorrect $HOME
            # check https://github.com/docker/docker/issues/2968 for details
            if [ "${HOME}" = "/" ]
            then
              export HOME=$(getent passwd $(id -un) | cut -d: -f6)
            fi

            EXPANDED_CIRCLE_WORKING_DIRECTORY="${CIRCLE_WORKING_DIRECTORY/#\~/$HOME}"

            git config --global gc.auto 0 || true

            if [ -e "$EXPANDED_CIRCLE_WORKING_DIRECTORY/.git" ]
            then
              cd "$EXPANDED_CIRCLE_WORKING_DIRECTORY"
              git remote set-url origin "$CIRCLE_REPOSITORY_URL_AS_HTTPS" || true
            else
              mkdir -p "$EXPANDED_CIRCLE_WORKING_DIRECTORY"
              cd "$EXPANDED_CIRCLE_WORKING_DIRECTORY"
              git clone "$CIRCLE_REPOSITORY_URL_AS_HTTPS" .
            fi

            if [ -n "$CIRCLE_TAG" ]
            then
              git fetch --force origin "refs/tags/${CIRCLE_TAG}"
            else
              git fetch --force origin "$CIRCLE_BRANCH:remotes/origin/$CIRCLE_BRANCH"
            fi
            git reset --hard "$DEPLOYED_SHA"

  notify-slack-smoke-test-status:
    steps:
      - slack/status:
          fail_only: true
          failure_message: ":smokeybear::red_circle: Smoke tests failed in environment: $MONITOR_ENV"
          include_project_field: false
  store-smoketest-results:
    steps:
      - store_test_results:
          path: tmp/capybara
      - store_artifacts:
          path: tmp/capybara
          destination: capybara

jobs:
  setup:
    working_directory: ~/identity-idp
    executor: ruby_browsers
    steps:
      - checkout
      - bundle-yarn-install
      - run:
          name: Test Setup
          command: |
            bundle exec rake assets:precompile
      - persist_to_workspace:
          root: .
          paths:
            - public/assets
            - public/packs
            - public/packs-test

  build:
    executor: ruby_browsers

    environment:
      CC_TEST_REPORTER_ID: faecd27e9aed532634b3f4d3e251542d7de9457cfca96a94208a63270ef9b42e
      COVERAGE: true

    parallelism: 5

    working_directory: ~/identity-idp

    steps:
      - checkout
      - bundle-yarn-install
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update
            sudo apt-get install python-pip python-dev jq
            sudo pip install awscli
      - run:
          name: Install Code Climate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            aws s3 --region us-west-2 rm s3://login-gov-test-coverage/coverage/$CIRCLE_PREVIOUS_BUILD_NUM --recursive
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Test Setup
          command: |
            cp config/application.yml.default config/application.yml
            cp config/service_providers.localdev.yml config/service_providers.yml
            cp config/agencies.localdev.yml config/agencies.yml
            cp config/iaa_gtcs{.localdev,}.yml
            cp config/iaa_orders{.localdev,}.yml
            cp config/iaa_statuses{.localdev,}.yml
            cp config/integration_statuses{.localdev,}.yml
            cp config/integrations{.localdev,}.yml
            cp config/partner_account_statuses{.localdev,}.yml
            cp config/partner_accounts{.localdev,}.yml
            cp -a keys.example keys
            cp -a certs.example certs
            cp pwned_passwords/pwned_passwords.txt.sample pwned_passwords/pwned_passwords.txt
            bundle exec rake db:create db:migrate --trace
            bundle exec rake db:seed
            ruby -i -pe 'gsub(/^(\s+)compile: true$/, "\\1compile: false")' config/webpacker.yml
      - attach_workspace:
          at: .
      - run:
          name: Run Tests
          command: |
            mkdir /tmp/test-results
            ./cc-test-reporter before-build

            bundle exec rake knapsack:rspec
      - run:
          name: Code Climate Test Coverage
          command: |
            ./cc-test-reporter format-coverage -t simplecov -o "coverage/codeclimate.$CIRCLE_NODE_INDEX.json"
            aws s3 sync coverage/ "s3://login-gov-test-coverage/coverage/$CIRCLE_BUILD_NUM"
      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
      - deploy:
          command: |
            aws s3 sync "s3://login-gov-test-coverage/coverage/$CIRCLE_BUILD_NUM" coverage/
            ./cc-test-reporter sum-coverage --output - --parts $CIRCLE_NODE_TOTAL coverage/codeclimate.*.json | ./cc-test-reporter upload-coverage --input -
  javascript_build:
    working_directory: ~/identity-idp
    executor: ruby_browsers
    steps:
      - checkout
      - bundle-yarn-install
      - run:
          name: Run Tests
          command: |
            yarn test

  lints:
    working_directory: ~/identity-idp
    executor: ruby_browsers
    steps:
      - checkout
      - bundle-yarn-install
      - run:
          name: Run Lints
          command: |
            make lint_yarn_lockfile
            make lint_yaml
            yarn run lint
            yarn run typecheck
            bundle exec rubocop
            bin/rails zeitwerk:check
            make lint_erb
            make check_asset_strings
            make lint_optimized_assets
            NODE_ENV=production ./bin/webpack && yarn es5-safe
  smoketest-dev:
    working_directory: ~/identity-idp
    executor: ruby_browsers
    environment:
      MONITOR_ENV: DEV
    steps:
      - jq/install
      - checkout-deployed-sha:
          sha_url: https://idp.dev.identitysandbox.gov/api/deploy.json
      - bundle-yarn-install
      - run:
          name: "Smoke tests"
          command: |
            bin/smoke_test --remote --no-source-env
      - notify-slack-smoke-test-status
      - store-smoketest-results
  smoketest-int:
    working_directory: ~/identity-idp
    executor: ruby_browsers
    environment:
      MONITOR_ENV: INT
    steps:
      - jq/install
      - checkout-deployed-sha:
          sha_url: https://idp.int.identitysandbox.gov/api/deploy.json
      - bundle-yarn-install
      - run:
          name: "Smoke tests"
          command: |
            bin/smoke_test --remote --no-source-env
      - notify-slack-smoke-test-status
      - store-smoketest-results
  smoketest-staging:
    working_directory: ~/identity-idp
    executor: ruby_browsers
    environment:
      MONITOR_ENV: STAGING
    steps:
      - jq/install
      - checkout-deployed-sha:
          sha_url: https://idp.staging.login.gov/api/deploy.json
      - bundle-yarn-install
      - run:
          name: "Smoke tests"
          command: |
            bin/smoke_test --remote --no-source-env
      - notify-slack-smoke-test-status
      - store-smoketest-results
  smoketest-prod:
    working_directory: ~/identity-idp
    executor: ruby_browsers
    environment:
      MONITOR_ENV: PROD
    steps:
      - checkout
      - bundle-yarn-install
      - run:
          name: "Smoke tests"
          command: |
            bin/smoke_test --remote --no-source-env
      - notify-slack-smoke-test-status
      - store-smoketest-results
  check-pinpoint-config:
    docker:
      - image: circleci/ruby:2.7.3
    steps:
      - checkout
      - bundle-yarn-install
      - run:
          name: Check current AWS Pinpoint country support
          command: |-
            make lint_country_dialing_codes
      - slack/status:
          fail_only: true
          failure_message: ":aws-emoji: :red_circle: AWS Pinpoint country configuration is out of date"
workflows:
  version: 2
  release:
    jobs:
      - setup
      - build:
          requires:
            - setup
      - javascript_build:
          requires:
            - setup
      - lints:
          requires:
            - setup

  daily-external-pinpoint-checker:
    jobs:
      - check-pinpoint-config
    triggers:
      - schedule:
          # Once a day at 12pm
          cron: "0 12 * * *"
          filters:
            branches:
              only:
                - main

  # Theses are staggered separately from the smoke tests in the identity-monitor repo
  # because they share credentials and would mess each other up if run concurrently
  # https://github.com/18F/identity-monitor/blob/master/.circleci/config.yml
  # DEV
  smoketest-dev-workflow:
    triggers:
      - schedule:
          cron: "55 * * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - smoketest-dev

  # INT
  smoketest-int-workflow:
    triggers:
      - schedule:
          cron: "45 * * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - smoketest-int

  # STAGING
  smoketest-staging-workflow:
    triggers:
      - schedule:
          cron: "35 * * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - smoketest-staging

  # PROD
  smoketest-prod-workflow:
    triggers:
      - schedule:
          cron: "25 * * * *"
          filters:
            branches:
              only:
                - stages/prod
    jobs:
      - smoketest-prod
