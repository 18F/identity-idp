<% title t('titles.doc_auth.doc_capture') %>
<% content_for :head do %>
  <%= tag.meta name: 'acuant-sdk-initialization-endpoint', content: IdentityConfig.store.acuant_sdk_initialization_endpoint %>
  <%= tag.meta name: 'acuant-sdk-initialization-creds', content: IdentityConfig.store.acuant_sdk_initialization_creds %>
  <%= stylesheet_link_tag 'document-capture' %>
<% end %>
<% add_document_capture_image_urls_to_csp(
     request,
     [front_image_upload_url, back_image_upload_url, selfie_image_upload_url],
   )
   session_id = flow_session[:document_capture_session_uuid]
%>
<%= tag.div id: 'document-capture-form', data: {
      app_name: APP_NAME,
      liveness_required: liveness_checking_enabled?.presence,
      mock_client: (DocAuthRouter.doc_auth_vendor(discriminator: session_id) == 'mock').presence,
      help_center_redirect_url: help_center_redirect_url(
        flow: :idv,
        step: :document_capture,
      ),
      document_capture_session_uuid: flow_session[:document_capture_session_uuid],
      endpoint: FeatureManagement.document_capture_async_uploads_enabled? ?
    api_verify_v2_document_capture_url :
    api_verify_images_url,
      status_endpoint: FeatureManagement.document_capture_async_uploads_enabled? ?
    send(@step_url, step: :verify_document_status) :
    nil,
      glare_threshold: IdentityConfig.store.doc_auth_client_glare_threshold,
      sharpness_threshold: IdentityConfig.store.doc_auth_client_sharpness_threshold,
      status_poll_interval_ms: IdentityConfig.store.poll_rate_for_verify_in_seconds * 1000,
      max_capture_attempts_before_tips: IdentityConfig.store.doc_auth_max_capture_attempts_before_tips,
      sp_name: sp_name,
      flow_path: flow_path,
      cancel_url: idv_cancel_path,
      failure_to_proof_url: failure_to_proof_url,
      front_image_upload_url: front_image_upload_url,
      back_image_upload_url: back_image_upload_url,
      selfie_image_upload_url: selfie_image_upload_url,
      keep_alive_endpoint: sessions_keepalive_url,
      idv_in_person_url: IdentityConfig.store.in_person_proofing_enabled ? idv_in_person_url : nil,
    } %>
  <%= validated_form_for(
        :doc_auth,
        url: url_for,
        method: 'PUT',
        html: { class: 'js-document-capture-form' },
      ) do |f| %>
    <%= f.input(
          :document_capture_session_uuid,
          as: :hidden,
          input_html: { value: flow_session[:document_capture_session_uuid] },
        ) %>
  <% end %>
</div>

<%= javascript_packs_tag_once 'document-capture' %>
