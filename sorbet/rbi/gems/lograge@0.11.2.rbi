# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `lograge` gem.
# Please instead update this file by running `bin/tapioca gem lograge`.


# source://lograge//lib/lograge/version.rb#1
module Lograge
  # source://lograge//lib/lograge.rb#24
  def application; end

  # source://lograge//lib/lograge.rb#24
  def application=(val); end

  # source://lograge//lib/lograge.rb#46
  def before_format=(val); end

  # source://lograge//lib/lograge.rb#32
  def custom_options=(val); end

  # source://lograge//lib/lograge.rb#103
  def formatter; end

  # source://lograge//lib/lograge.rb#103
  def formatter=(val); end

  # source://lograge//lib/lograge.rb#24
  def ignore_tests=(val); end

  # source://lograge//lib/lograge.rb#95
  def log_level; end

  # source://lograge//lib/lograge.rb#95
  def log_level=(val); end

  # source://lograge//lib/lograge.rb#24
  def logger; end

  # source://lograge//lib/lograge.rb#24
  def logger=(val); end

  private

  # source://lograge//lib/lograge.rb#155
  def attach_to_action_cable; end

  # source://lograge//lib/lograge.rb#151
  def attach_to_action_controller; end

  # source://lograge//lib/lograge.rb#49
  def before_format(data, payload); end

  # source://lograge//lib/lograge.rb#74
  def controller_field(params); end

  # source://lograge//lib/lograge.rb#35
  def custom_options(event); end

  # source://lograge//lib/lograge.rb#191
  def disable_rack_cache_verbose_output; end

  # source://lograge//lib/lograge.rb#174
  def extend_base_class(klass); end

  # source://lograge//lib/lograge.rb#82
  def ignore(test); end

  # source://lograge//lib/lograge.rb#90
  def ignore?(event); end

  # Set conditions for events that should be ignored
  #
  # Currently supported formats are:
  #  - A single string representing a controller action, e.g. 'UsersController#sign_in'
  #  - An array of strings representing controller actions
  #  - An object that responds to call with an event argument and returns
  #    true iff the event should be ignored.
  #
  # The action ignores are given to 'ignore_actions'. The callable ignores
  # are given to 'ignore'.  Both methods can be called multiple times, which
  # just adds more ignore conditions to a list that is checked before logging.
  #
  # source://lograge//lib/lograge.rb#67
  def ignore_actions(actions); end

  # source://lograge//lib/lograge.rb#86
  def ignore_nothing; end

  # source://lograge//lib/lograge.rb#78
  def ignore_tests; end

  # source://lograge//lib/lograge.rb#195
  def keep_original_rails_log; end

  # source://lograge//lib/lograge.rb#222
  def lograge_config; end

  # source://lograge//lib/lograge.rb#205
  def rack_cache_hashlike?(app); end

  # source://lograge//lib/lograge.rb#105
  def remove_existing_log_subscriptions; end

  # source://lograge//lib/lograge.rb#147
  def set_formatter; end

  # source://lograge//lib/lograge.rb#142
  def set_ignores; end

  # source://lograge//lib/lograge.rb#184
  def set_lograge_log_options; end

  # source://lograge//lib/lograge.rb#127
  def setup(app); end

  # source://lograge//lib/lograge.rb#162
  def setup_custom_payload; end

  # TODO: Remove with version 1.0
  #
  # source://lograge//lib/lograge.rb#212
  def support_deprecated_config; end

  # source://lograge//lib/lograge.rb#116
  def unsubscribe(component, subscriber); end

  class << self
    # source://lograge//lib/lograge.rb#24
    def application; end

    # source://lograge//lib/lograge.rb#24
    def application=(val); end

    # source://lograge//lib/lograge.rb#155
    def attach_to_action_cable; end

    # source://lograge//lib/lograge.rb#151
    def attach_to_action_controller; end

    # source://lograge//lib/lograge.rb#49
    def before_format(data, payload); end

    # source://lograge//lib/lograge.rb#46
    def before_format=(val); end

    # source://lograge//lib/lograge.rb#74
    def controller_field(params); end

    # source://lograge//lib/lograge.rb#35
    def custom_options(event); end

    # source://lograge//lib/lograge.rb#32
    def custom_options=(val); end

    # source://lograge//lib/lograge.rb#191
    def disable_rack_cache_verbose_output; end

    # source://lograge//lib/lograge.rb#174
    def extend_base_class(klass); end

    # source://lograge//lib/lograge.rb#103
    def formatter; end

    # source://lograge//lib/lograge.rb#103
    def formatter=(val); end

    # source://lograge//lib/lograge.rb#82
    def ignore(test); end

    # @return [Boolean]
    #
    # source://lograge//lib/lograge.rb#90
    def ignore?(event); end

    # Set conditions for events that should be ignored
    #
    # Currently supported formats are:
    #  - A single string representing a controller action, e.g. 'UsersController#sign_in'
    #  - An array of strings representing controller actions
    #  - An object that responds to call with an event argument and returns
    #    true iff the event should be ignored.
    #
    # The action ignores are given to 'ignore_actions'. The callable ignores
    # are given to 'ignore'.  Both methods can be called multiple times, which
    # just adds more ignore conditions to a list that is checked before logging.
    #
    # source://lograge//lib/lograge.rb#67
    def ignore_actions(actions); end

    # source://lograge//lib/lograge.rb#86
    def ignore_nothing; end

    # source://lograge//lib/lograge.rb#78
    def ignore_tests; end

    # source://lograge//lib/lograge.rb#24
    def ignore_tests=(val); end

    # source://lograge//lib/lograge.rb#195
    def keep_original_rails_log; end

    # source://lograge//lib/lograge.rb#95
    def log_level; end

    # source://lograge//lib/lograge.rb#95
    def log_level=(val); end

    # source://lograge//lib/lograge.rb#24
    def logger; end

    # source://lograge//lib/lograge.rb#24
    def logger=(val); end

    # source://lograge//lib/lograge.rb#222
    def lograge_config; end

    # source://lograge//lib/lograge.rb#105
    def remove_existing_log_subscriptions; end

    # source://lograge//lib/lograge.rb#147
    def set_formatter; end

    # source://lograge//lib/lograge.rb#142
    def set_ignores; end

    # source://lograge//lib/lograge.rb#184
    def set_lograge_log_options; end

    # source://lograge//lib/lograge.rb#127
    def setup(app); end

    # source://lograge//lib/lograge.rb#162
    def setup_custom_payload; end

    # TODO: Remove with version 1.0
    #
    # source://lograge//lib/lograge.rb#212
    def support_deprecated_config; end

    # source://lograge//lib/lograge.rb#116
    def unsubscribe(component, subscriber); end

    private

    # @return [Boolean]
    #
    # source://lograge//lib/lograge.rb#205
    def rack_cache_hashlike?(app); end
  end
end

# source://lograge//lib/lograge/formatters/helpers/method_and_path.rb#2
module Lograge::Formatters; end

# source://lograge//lib/lograge/formatters/cee.rb#3
class Lograge::Formatters::Cee
  # source://lograge//lib/lograge/formatters/cee.rb#4
  def call(data); end
end

# source://lograge//lib/lograge/formatters/graylog2.rb#3
class Lograge::Formatters::Graylog2
  include ::Lograge::Formatters::Helpers::MethodAndPath

  # source://lograge//lib/lograge/formatters/graylog2.rb#6
  def call(data); end

  # source://lograge//lib/lograge/formatters/graylog2.rb#27
  def short_message(data); end

  # source://lograge//lib/lograge/formatters/graylog2.rb#23
  def underscore_prefix(key); end
end

# source://lograge//lib/lograge/formatters/helpers/method_and_path.rb#3
module Lograge::Formatters::Helpers; end

# source://lograge//lib/lograge/formatters/helpers/method_and_path.rb#4
module Lograge::Formatters::Helpers::MethodAndPath
  # source://lograge//lib/lograge/formatters/helpers/method_and_path.rb#5
  def method_and_path_string(data); end
end

# source://lograge//lib/lograge/formatters/json.rb#4
class Lograge::Formatters::Json
  # source://lograge//lib/lograge/formatters/json.rb#5
  def call(data); end
end

# source://lograge//lib/lograge/formatters/key_value.rb#3
class Lograge::Formatters::KeyValue
  # source://lograge//lib/lograge/formatters/key_value.rb#4
  def call(data); end

  protected

  # source://lograge//lib/lograge/formatters/key_value.rb#12
  def fields_to_display(data); end

  # source://lograge//lib/lograge/formatters/key_value.rb#16
  def format(key, value); end

  # source://lograge//lib/lograge/formatters/key_value.rb#20
  def parse_value(key, value); end
end

# source://lograge//lib/lograge/formatters/l2met.rb#5
class Lograge::Formatters::L2met < ::Lograge::Formatters::KeyValue
  # source://lograge//lib/lograge/formatters/l2met.rb#24
  def call(data); end

  protected

  # source://lograge//lib/lograge/formatters/l2met.rb#34
  def additional_fields(data); end

  # source://lograge//lib/lograge/formatters/l2met.rb#30
  def fields_to_display(data); end

  # source://lograge//lib/lograge/formatters/l2met.rb#38
  def format(key, value); end

  # source://lograge//lib/lograge/formatters/l2met.rb#44
  def modify_payload(data); end

  # source://lograge//lib/lograge/formatters/l2met.rb#50
  def source_field(data); end
end

# source://lograge//lib/lograge/formatters/l2met.rb#6
Lograge::Formatters::L2met::L2MET_FIELDS = T.let(T.unsafe(nil), Array)

# source://lograge//lib/lograge/formatters/l2met.rb#19
Lograge::Formatters::L2met::UNWANTED_FIELDS = T.let(T.unsafe(nil), Array)

# source://lograge//lib/lograge/formatters/ltsv.rb#3
class Lograge::Formatters::LTSV
  # source://lograge//lib/lograge/formatters/ltsv.rb#4
  def call(data); end

  # source://lograge//lib/lograge/formatters/ltsv.rb#11
  def fields_to_display(data); end

  # source://lograge//lib/lograge/formatters/ltsv.rb#15
  def format(key, value); end

  private

  # source://lograge//lib/lograge/formatters/ltsv.rb#30
  def escape(string); end
end

# source://lograge//lib/lograge/formatters/lines.rb#3
class Lograge::Formatters::Lines
  # source://lograge//lib/lograge/formatters/lines.rb#4
  def call(data); end

  # source://lograge//lib/lograge/formatters/lines.rb#10
  def load_dependencies; end
end

# source://lograge//lib/lograge/formatters/logstash.rb#3
class Lograge::Formatters::Logstash
  include ::Lograge::Formatters::Helpers::MethodAndPath

  # source://lograge//lib/lograge/formatters/logstash.rb#6
  def call(data); end

  # source://lograge//lib/lograge/formatters/logstash.rb#14
  def load_dependencies; end
end

# source://lograge//lib/lograge/formatters/raw.rb#3
class Lograge::Formatters::Raw
  # source://lograge//lib/lograge/formatters/raw.rb#4
  def call(data); end
end

# source://lograge//lib/lograge/log_subscribers/base.rb#8
module Lograge::LogSubscribers; end

# source://lograge//lib/lograge/log_subscribers/action_cable.rb#3
class Lograge::LogSubscribers::ActionCable < ::Lograge::LogSubscribers::Base
  # source://lograge//lib/lograge/log_subscribers/action_cable.rb#5
  def connect(event); end

  # source://lograge//lib/lograge/log_subscribers/action_cable.rb#5
  def disconnect(event); end

  # source://lograge//lib/lograge/log_subscribers/action_cable.rb#5
  def perform_action(event); end

  # source://lograge//lib/lograge/log_subscribers/action_cable.rb#5
  def subscribe(event); end

  # source://lograge//lib/lograge/log_subscribers/action_cable.rb#5
  def unsubscribe(event); end

  private

  # source://lograge//lib/lograge/log_subscribers/action_cable.rb#23
  def default_status; end

  # source://lograge//lib/lograge/log_subscribers/action_cable.rb#27
  def extract_runtimes(event, _payload); end

  # source://lograge//lib/lograge/log_subscribers/action_cable.rb#12
  def initial_data(payload); end
end

# source://lograge//lib/lograge/log_subscribers/action_controller.rb#3
class Lograge::LogSubscribers::ActionController < ::Lograge::LogSubscribers::Base
  # source://lograge//lib/lograge/log_subscribers/action_controller.rb#4
  def process_action(event); end

  # source://lograge//lib/lograge/log_subscribers/action_controller.rb#8
  def redirect_to(event); end

  # source://lograge//lib/lograge/log_subscribers/action_controller.rb#12
  def unpermitted_parameters(event); end

  private

  # source://lograge//lib/lograge/log_subscribers/action_controller.rb#44
  def extract_format(payload); end

  # source://lograge//lib/lograge/log_subscribers/action_controller.rb#56
  def extract_location; end

  # source://lograge//lib/lograge/log_subscribers/action_controller.rb#29
  def extract_path(payload); end

  # source://lograge//lib/lograge/log_subscribers/action_controller.rb#49
  def extract_runtimes(event, payload); end

  # source://lograge//lib/lograge/log_subscribers/action_controller.rb#64
  def extract_unpermitted_params; end

  # source://lograge//lib/lograge/log_subscribers/action_controller.rb#19
  def initial_data(payload); end

  # source://lograge//lib/lograge/log_subscribers/action_controller.rb#34
  def strip_query_string(path); end
end

# source://lograge//lib/lograge/log_subscribers/base.rb#9
class Lograge::LogSubscribers::Base < ::ActiveSupport::LogSubscriber
  # source://lograge//lib/lograge/log_subscribers/base.rb#10
  def logger; end

  private

  # source://lograge//lib/lograge/log_subscribers/base.rb#65
  def before_format(data, payload); end

  # source://lograge//lib/lograge/log_subscribers/base.rb#60
  def custom_options(event); end

  # source://lograge//lib/lograge/log_subscribers/base.rb#51
  def default_status; end

  # source://lograge//lib/lograge/log_subscribers/base.rb#37
  def extract_location(*_arg); end

  # source://lograge//lib/lograge/log_subscribers/base.rb#26
  def extract_request(event, payload); end

  # source://lograge//lib/lograge/log_subscribers/base.rb#37
  def extract_runtimes(*_arg); end

  # source://lograge//lib/lograge/log_subscribers/base.rb#40
  def extract_status(payload); end

  # source://lograge//lib/lograge/log_subscribers/base.rb#37
  def extract_unpermitted_params(*_arg); end

  # source://lograge//lib/lograge/log_subscribers/base.rb#55
  def get_error_status_code(exception); end

  # source://lograge//lib/lograge/log_subscribers/base.rb#37
  def initial_data(*_arg); end

  # source://lograge//lib/lograge/log_subscribers/base.rb#16
  def process_main_event(event); end
end

# source://lograge//lib/lograge/ordered_options.rb#4
class Lograge::OrderedOptions < ::ActiveSupport::OrderedOptions
  # source://lograge//lib/lograge/ordered_options.rb#5
  def custom_payload(&block); end
end

# source://lograge//lib/lograge/railtie.rb#6
class Lograge::Railtie < ::Rails::Railtie; end

# source://lograge//lib/lograge/silent_logger.rb#2
class Lograge::SilentLogger < ::SimpleDelegator
  # @return [SilentLogger] a new instance of SilentLogger
  #
  # source://lograge//lib/lograge/silent_logger.rb#3
  def initialize(logger); end

  # source://lograge//lib/lograge/silent_logger.rb#8
  def debug(*_args); end

  # source://lograge//lib/lograge/silent_logger.rb#8
  def error(*_args); end

  # source://lograge//lib/lograge/silent_logger.rb#8
  def fatal(*_args); end

  # source://lograge//lib/lograge/silent_logger.rb#8
  def info(*_args); end

  # source://lograge//lib/lograge/silent_logger.rb#8
  def unknown(*_args); end

  # source://lograge//lib/lograge/silent_logger.rb#8
  def warn(*_args); end
end

# source://lograge//lib/lograge/version.rb#2
Lograge::VERSION = T.let(T.unsafe(nil), String)
