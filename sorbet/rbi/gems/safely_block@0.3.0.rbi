# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `safely_block` gem.
# Please instead update this file by running `bin/tapioca gem safely_block`.


# source://safely_block//lib/safely/version.rb#1
module Safely
  extend ::Safely::Methods

  class << self
    # source://safely_block//lib/safely/core.rb#26
    def env; end

    # Sets the attribute env
    #
    # @param value the value to set the attribute env to.
    #
    # source://safely_block//lib/safely/core.rb#8
    def env=(_arg0); end

    # Returns the value of attribute raise_envs.
    #
    # source://safely_block//lib/safely/core.rb#7
    def raise_envs; end

    # Sets the attribute raise_envs
    #
    # @param value the value to set the attribute raise_envs to.
    #
    # source://safely_block//lib/safely/core.rb#7
    def raise_envs=(_arg0); end

    # source://safely_block//lib/safely/core.rb#10
    def report_exception(e, tag: T.unsafe(nil), context: T.unsafe(nil)); end

    # Returns the value of attribute report_exception_method.
    #
    # source://safely_block//lib/safely/core.rb#7
    def report_exception_method; end

    # Sets the attribute report_exception_method
    #
    # @param value the value to set the attribute report_exception_method to.
    #
    # source://safely_block//lib/safely/core.rb#7
    def report_exception_method=(_arg0); end

    # Returns the value of attribute tag.
    #
    # source://safely_block//lib/safely/core.rb#7
    def tag; end

    # Sets the attribute tag
    #
    # @param value the value to set the attribute tag to.
    #
    # source://safely_block//lib/safely/core.rb#7
    def tag=(_arg0); end

    # Returns the value of attribute throttle_counter.
    #
    # source://safely_block//lib/safely/core.rb#7
    def throttle_counter; end

    # Sets the attribute throttle_counter
    #
    # @param value the value to set the attribute throttle_counter to.
    #
    # source://safely_block//lib/safely/core.rb#7
    def throttle_counter=(_arg0); end

    # @return [Boolean]
    #
    # source://safely_block//lib/safely/core.rb#30
    def throttled?(e, options); end
  end
end

# source://safely_block//lib/safely/core.rb#38
Safely::DEFAULT_EXCEPTION_METHOD = T.let(T.unsafe(nil), Proc)

# source://safely_block//lib/safely/core.rb#48
module Safely::Methods
  # source://safely_block//lib/safely/core.rb#49
  def safely(tag: T.unsafe(nil), sample: T.unsafe(nil), except: T.unsafe(nil), only: T.unsafe(nil), silence: T.unsafe(nil), throttle: T.unsafe(nil), default: T.unsafe(nil), context: T.unsafe(nil)); end

  # source://safely_block//lib/safely/core.rb#49
  def yolo(tag: T.unsafe(nil), sample: T.unsafe(nil), except: T.unsafe(nil), only: T.unsafe(nil), silence: T.unsafe(nil), throttle: T.unsafe(nil), default: T.unsafe(nil), context: T.unsafe(nil)); end
end

# source://safely_block//lib/safely/version.rb#2
Safely::VERSION = T.let(T.unsafe(nil), String)
