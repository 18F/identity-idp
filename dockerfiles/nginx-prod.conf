# user  nginx;
worker_processes 2;
worker_rlimit_nofile 2048;
pid /var/run/nginx.pid;
daemon off;
load_module /usr/lib/nginx/modules/ngx_http_headers_more_filter_module.so;


events {
  worker_connections  1024;
}

http {
  include mime.types;
  default_type application/octet-stream;

  sendfile on;
  tcp_nopush off;
  keepalive_timeout 60 50;
  gzip on;
  gzip_types text/plain text/css application/xml application/javascript application/json image/jpg image/jpeg image/png image/gif image/svg+xml font/woff2 woff2;

  # Timeouts definition
  client_body_timeout   10;
  client_header_timeout 10;
  send_timeout          10;
  # Set buffer size limits
  client_body_buffer_size  1k;
  client_header_buffer_size 1k;
  client_max_body_size 20k;
  large_client_header_buffers 2 20k;
  # Limit connections
  #limit_conn addr       20;
  #limit_conn_status     429;
  #limit_conn_zone       $binary_remote_addr zone=addr:5m;
  # Disable sending server info and versions
  server_tokens off;
  more_clear_headers Server;
  more_clear_headers X-Powered-By;
  # Prevent clickJacking attack
  add_header X-Frame-Options SAMEORIGIN;
  # Disable content-type sniffing
  add_header X-Content-Type-Options nosniff;
  # Enable XSS filter
  add_header X-XSS-Protection "1; mode=block";

  # Enables nginx to check multiple set_real_ip_from lines 
  real_ip_recursive on;

  real_ip_header X-Forwarded-For;

  # Exclude all private IPv4 space from client source calculation when
  # processing the X-Forewarded-For header
  set_real_ip_from 10.0.0.0/8;
  set_real_ip_from 100.64.0.0/10;
  set_real_ip_from 172.16.0.0/12;
  set_real_ip_from 192.168.0.0/16;
  # TODO - IPv6 CIDR for VPCs will require autoconfiguration

  # Add CloudFront source address ranges to trusted CIDR range for real ip computation
  include /etc/nginx/cloudfront-ips.conf;

  # logging
  access_log /dev/stdout;
  error_log  /dev/stdout info;

  # Specify a key=value format useful for machine parsing
  log_format kv escape=json
    '{'
        '"time": "$time_local", '
        '"hostname": "$host", '
        '"dest_port": "$server_port", '
        '"dest_ip": "$server_addr", '
        '"src": "$remote_addr", '
        '"src_ip": "$realip_remote_addr", '
        '"user": "$remote_user", '
        '"protocol": "$server_protocol", '
        '"http_method": "$request_method", '
        '"status": "$status", '
        '"bytes_out": "$body_bytes_sent", '
        '"bytes_in": "$request_length", '
        '"http_referer": "$http_referer", '
        '"http_user_agent": "$http_user_agent", '
        '"nginx_version": "$nginx_version", '
        '"http_cloudfront_viewer_address": "$http_cloudfront_viewer_address", '
        '"http_cloudfront_viewer_http_version": "$http_cloudfront_viewer_http_version", '
        '"http_cloudfront_viewer_tls": "$http_cloudfront_viewer_tls", '
        '"http_cloudfront_viewer_country": "$http_cloudfront_viewer_country", '
        '"http_cloudfront_viewer_country_region": "$http_cloudfront_viewer_country_region", '
        '"http_x_forwarded_for": "$http_x_forwarded_for", '
        '"http_x_amzn_trace_id": "$http_x_amzn_trace_id", '
        '"response_time": "$upstream_response_time", '
        '"request_time": "$request_time", '
        '"request": "$request", '
        '"tls_protocol": "$ssl_protocol", '
        '"tls_cipher": "$ssl_cipher", '
        '"uri_path": "$uri", '
        '"uri_query": "$query_string",'
        '"log_filename": "nginx_access.log"'
    '}';

  # Get $status_reason variable, a human readable version of $status
  include status-map.conf;

  # Set HSTS header only if not already set by app. Some clients get unhappy if
  # you set multiple Strict-Transport-Security headers.
  # https://serverfault.com/a/598106
  map $upstream_http_strict_transport_security $sts_value {
    '' "max-age=31536000; preload";
  }

  # Always add a HSTS header - This is still inside the http block, so will not
  # conflict with headers set in nginx.conf
  add_header Strict-Transport-Security $sts_value always;

  server {
    listen        8443 ssl;
    server_name   _;
    access_log    /dev/stdout kv;

    ssl_certificate      /keys/localhost.crt;
    ssl_certificate_key  /keys/localhost.key;
    ssl_verify_client optional_no_ca; # on;
    ssl_verify_depth 10;

    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1.2;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 5m;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver_timeout 5s;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header   Host $host;
    proxy_buffer_size          32k;
    proxy_buffers              8 32k;
    proxy_busy_buffers_size    64k;

    if ($request_method !~ ^(DELETE|GET|HEAD|OPTIONS|POST|PUT)$ ) {
       return 405;
    }

    # Content expiry rules
    # Content pages set to no-cache
    location ~* \.(?:manifest|appcache|html?|xml|json)$ {
        expires -1;
        proxy_pass https://0.0.0.0:3000;
    }

    # Mutable assets set to no-cache
    location ~* /AcuantImageProcessingWorker\.min\.js$ {
      expires -1;
      add_header Strict-Transport-Security $sts_value;
        proxy_pass https://0.0.0.0:3000;
    }

    # Media: images, icons, video, audio, HTC
    location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
        expires 1M;
        add_header Strict-Transport-Security $sts_value;
        add_header Cache-Control "public";
        proxy_pass https://0.0.0.0:3000;
    }

    # CSS and Javascript
    location ~* \.(?:css|js)$ {
        expires 1M;
        add_header Strict-Transport-Security $sts_value;
        add_header Cache-Control "public";
        proxy_pass https://0.0.0.0:3000;
    }

    # WebFonts
    location ~* \.(?:ttf|ttc|otf|eot|woff|woff2)$ {
      types {font/woff2 woff2;}
      expires 1M;
      add_header Strict-Transport-Security $sts_value;
      add_header Access-Control-Allow-Origin https://$host;
      add_header Access-Control-Allow-Methods 'GET';
      proxy_pass https://0.0.0.0:3000;
    }

    # TODO - The following matches result in inconsistent headers!  Should refactor to use include blocks

    ## Very large upload limits

    # Combined async image uploads - Require very large cap
    location /api/verify/images {
      add_header Strict-Transport-Security $sts_value;
      client_max_body_size 30M;
      proxy_pass https://0.0.0.0:3000;
    }

    # Fallback (noscript) combined uploads
    location ~ ^(/(en|es|fr))?/verify/(capture_doc|doc_auth)/document_capture {
      add_header Strict-Transport-Security $sts_value;
      client_max_body_size 30M;
      proxy_pass https://0.0.0.0:3000;
    }

    ## Large upload limits

    location ~ /api/v1/(facematch|liveness) {
      add_header Strict-Transport-Security $sts_value;
      client_max_body_size 10M;
      proxy_pass https://0.0.0.0:3000;
    }

    location ^~ /AssureIDService/Document/ {
      add_header Strict-Transport-Security $sts_value;
      client_max_body_size 10M;
      proxy_pass https://0.0.0.0:3000;
    }

    location ^~ /api/service_provider {
      add_header Strict-Transport-Security $sts_value;
      client_max_body_size 30k;
      proxy_pass https://0.0.0.0:3000;
    }

    location /service_providers {
      add_header Strict-Transport-Security $sts_value;
      client_max_body_size 2M;
      error_page 413 =303 https://$host/413_logo.html;
      proxy_pass https://0.0.0.0:3000;
    }

    location / {
      # Avoid ssl stripping attack
      add_header Strict-Transport-Security $sts_value;
      proxy_pass https://0.0.0.0:3000;
    }
  }
}
