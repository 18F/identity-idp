# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `numbers_and_words` gem.
# Please instead update this file by running `bin/tapioca gem numbers_and_words`.


# source://numbers_and_words//lib/numbers_and_words/core_ext/array.rb#3
class Array
  include ::Enumerable

  # source://numbers_and_words//lib/numbers_and_words/core_ext/array.rb#8
  def to_figures; end

  # source://numbers_and_words//lib/numbers_and_words/core_ext/array.rb#4
  def to_words(options = T.unsafe(nil)); end
end

# source://numbers_and_words//lib/numbers_and_words/core_ext/float.rb#3
class Float < ::Numeric
  # source://numbers_and_words//lib/numbers_and_words/core_ext/float.rb#4
  def to_words(options = T.unsafe(nil)); end
end

# source://numbers_and_words//lib/numbers_and_words/core_ext/integer.rb#3
class Integer < ::Numeric
  # source://numbers_and_words//lib/numbers_and_words/core_ext/integer.rb#4
  def to_words(options = T.unsafe(nil)); end
end

Integer::GMP_VERSION = T.let(T.unsafe(nil), String)

# source://numbers_and_words//lib/numbers_and_words/translations/base.rb#3
module NumbersAndWords; end

# source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#4
module NumbersAndWords::ArrayExtensions; end

# source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#5
module NumbersAndWords::ArrayExtensions::Helpers
  # source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#15
  def capacity_count; end

  # source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#11
  def capacity_length; end

  # source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#20
  def figures_array_in_capacity(capacity); end

  # source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#37
  def figures_array_under_capacity(capacity); end

  # source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#73
  def fraction_capacity; end

  # source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#77
  def fraction_capacity_count; end

  # source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#81
  def fraction_sub_capacity; end

  # source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#61
  def hundreds; end

  # source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#24
  def number_in_capacity(capacity); end

  # source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#28
  def number_under_capacity(capacity); end

  # source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#41
  def ones; end

  # source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#45
  def only_ones; end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#32
  def opaque?(capacity); end

  # source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#89
  def ordinal_capacity; end

  # source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#85
  def ordinal_index; end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#65
  def round_hundred?; end

  # source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#69
  def sub_capacity; end

  # source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#49
  def teens; end

  # source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#53
  def tens; end

  # source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#57
  def tens_with_ones; end
end

# source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#7
NumbersAndWords::ArrayExtensions::Helpers::FIGURES_IN_CAPACITY = T.let(T.unsafe(nil), Integer)

# source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#6
NumbersAndWords::ArrayExtensions::Helpers::MICRO_CAPACITY_SHIFT = T.let(T.unsafe(nil), Integer)

# source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#9
NumbersAndWords::ArrayExtensions::Helpers::ONES_SHIFT = T.let(T.unsafe(nil), Integer)

# source://numbers_and_words//lib/numbers_and_words/helper_classes/array_extensions/helpers.rb#8
NumbersAndWords::ArrayExtensions::Helpers::THOUSAND_CAPACITY = T.let(T.unsafe(nil), Integer)

# source://numbers_and_words//lib/numbers_and_words/helper_classes/figures_array.rb#6
class NumbersAndWords::FiguresArray < ::Array
  include ::NumbersAndWords::ArrayExtensions::Helpers

  # source://numbers_and_words//lib/numbers_and_words/helper_classes/figures_array.rb#17
  def figures_array_in_capacity(capacity); end

  # source://numbers_and_words//lib/numbers_and_words/helper_classes/figures_array.rb#21
  def local_language(&block); end

  # source://numbers_and_words//lib/numbers_and_words/helper_classes/figures_array.rb#13
  def reverse; end

  # source://numbers_and_words//lib/numbers_and_words/helper_classes/figures_array.rb#9
  def to_words(options = T.unsafe(nil)); end
end

# source://numbers_and_words//lib/numbers_and_words/i18n/plurals/cs.rb#4
module NumbersAndWords::I18n
  private

  # source://numbers_and_words//lib/numbers_and_words/i18n.rb#31
  def files(directory, ext); end

  # source://numbers_and_words//lib/numbers_and_words/i18n.rb#23
  def language_class_name; end

  # source://numbers_and_words//lib/numbers_and_words/i18n.rb#10
  def languages; end

  # source://numbers_and_words//lib/numbers_and_words/i18n.rb#14
  def local_language(locale = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/i18n.rb#27
  def locale_files; end

  class << self
    # source://numbers_and_words//lib/numbers_and_words/i18n.rb#31
    def files(directory, ext); end

    # source://numbers_and_words//lib/numbers_and_words/i18n.rb#23
    def language_class_name; end

    # source://numbers_and_words//lib/numbers_and_words/i18n.rb#10
    def languages; end

    # source://numbers_and_words//lib/numbers_and_words/i18n.rb#14
    def local_language(locale = T.unsafe(nil)); end

    # source://numbers_and_words//lib/numbers_and_words/i18n.rb#27
    def locale_files; end
  end
end

# source://numbers_and_words//lib/numbers_and_words/i18n/initialization.rb#5
module NumbersAndWords::I18n::Initialization
  private

  # source://numbers_and_words//lib/numbers_and_words/i18n/initialization.rb#8
  def init; end

  class << self
    # source://numbers_and_words//lib/numbers_and_words/i18n/initialization.rb#8
    def init; end
  end
end

# source://numbers_and_words//lib/numbers_and_words/i18n/pluralization.rb#11
module NumbersAndWords::I18n::Pluralization
  private

  # source://numbers_and_words//lib/numbers_and_words/i18n/pluralization.rb#23
  def config_file; end

  # source://numbers_and_words//lib/numbers_and_words/i18n/pluralization.rb#19
  def files; end

  # source://numbers_and_words//lib/numbers_and_words/i18n/pluralization.rb#14
  def init; end

  # source://numbers_and_words//lib/numbers_and_words/i18n/pluralization.rb#31
  def languages; end

  # source://numbers_and_words//lib/numbers_and_words/i18n/pluralization.rb#27
  def plurals_files; end

  class << self
    # source://numbers_and_words//lib/numbers_and_words/i18n/pluralization.rb#23
    def config_file; end

    # source://numbers_and_words//lib/numbers_and_words/i18n/pluralization.rb#19
    def files; end

    # source://numbers_and_words//lib/numbers_and_words/i18n/pluralization.rb#14
    def init; end

    # source://numbers_and_words//lib/numbers_and_words/i18n/pluralization.rb#31
    def languages; end

    # source://numbers_and_words//lib/numbers_and_words/i18n/pluralization.rb#27
    def plurals_files; end
  end
end

# source://numbers_and_words//lib/numbers_and_words/i18n/plurals/cs.rb#5
module NumbersAndWords::I18n::Plurals; end

# source://numbers_and_words//lib/numbers_and_words/i18n/plurals/cs.rb#6
module NumbersAndWords::I18n::Plurals::Cs
  private

  # source://numbers_and_words//lib/numbers_and_words/i18n/plurals/cs.rb#25
  def few_conditions(number); end

  # source://numbers_and_words//lib/numbers_and_words/i18n/plurals/cs.rb#30
  def many_conditions(number); end

  # source://numbers_and_words//lib/numbers_and_words/i18n/plurals/cs.rb#21
  def one_conditions(number); end

  class << self
    # source://numbers_and_words//lib/numbers_and_words/i18n/plurals/cs.rb#25
    def few_conditions(number); end

    # source://numbers_and_words//lib/numbers_and_words/i18n/plurals/cs.rb#30
    def many_conditions(number); end

    # source://numbers_and_words//lib/numbers_and_words/i18n/plurals/cs.rb#21
    def one_conditions(number); end
  end
end

# source://numbers_and_words//lib/numbers_and_words/i18n/plurals/cs.rb#9
NumbersAndWords::I18n::Plurals::Cs::RULE = T.let(T.unsafe(nil), Proc)

# source://numbers_and_words//lib/numbers_and_words/i18n/plurals/lt.rb#6
module NumbersAndWords::I18n::Plurals::Lt
  private

  # source://numbers_and_words//lib/numbers_and_words/i18n/plurals/lt.rb#19
  def one_conditions(number); end

  # source://numbers_and_words//lib/numbers_and_words/i18n/plurals/lt.rb#23
  def ones_conditions(number); end

  class << self
    # source://numbers_and_words//lib/numbers_and_words/i18n/plurals/lt.rb#19
    def one_conditions(number); end

    # source://numbers_and_words//lib/numbers_and_words/i18n/plurals/lt.rb#23
    def ones_conditions(number); end
  end
end

# source://numbers_and_words//lib/numbers_and_words/i18n/plurals/lt.rb#9
NumbersAndWords::I18n::Plurals::Lt::RULE = T.let(T.unsafe(nil), Proc)

# source://numbers_and_words//lib/numbers_and_words/i18n/plurals/lv.rb#6
module NumbersAndWords::I18n::Plurals::Lv
  private

  # source://numbers_and_words//lib/numbers_and_words/i18n/plurals/lv.rb#11
  def one_conditions(number); end

  class << self
    # source://numbers_and_words//lib/numbers_and_words/i18n/plurals/lv.rb#11
    def one_conditions(number); end
  end
end

# source://numbers_and_words//lib/numbers_and_words/i18n/plurals/lv.rb#9
NumbersAndWords::I18n::Plurals::Lv::RULE = T.let(T.unsafe(nil), Proc)

# source://numbers_and_words//lib/numbers_and_words/i18n/plurals/ru.rb#6
module NumbersAndWords::I18n::Plurals::Ru
  private

  # source://numbers_and_words//lib/numbers_and_words/i18n/plurals/ru.rb#25
  def few_conditions(number); end

  # source://numbers_and_words//lib/numbers_and_words/i18n/plurals/ru.rb#30
  def many_conditions(number); end

  # source://numbers_and_words//lib/numbers_and_words/i18n/plurals/ru.rb#21
  def one_conditions(number); end

  class << self
    # source://numbers_and_words//lib/numbers_and_words/i18n/plurals/ru.rb#25
    def few_conditions(number); end

    # source://numbers_and_words//lib/numbers_and_words/i18n/plurals/ru.rb#30
    def many_conditions(number); end

    # source://numbers_and_words//lib/numbers_and_words/i18n/plurals/ru.rb#21
    def one_conditions(number); end
  end
end

# source://numbers_and_words//lib/numbers_and_words/i18n/plurals/ru.rb#9
NumbersAndWords::I18n::Plurals::Ru::RULE = T.let(T.unsafe(nil), Proc)

# source://numbers_and_words//lib/numbers_and_words/i18n/plurals/ua.rb#6
module NumbersAndWords::I18n::Plurals::Ua; end

# source://numbers_and_words//lib/numbers_and_words/i18n/plurals/ua.rb#7
NumbersAndWords::I18n::Plurals::Ua::RULE = T.let(T.unsafe(nil), Proc)

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/helpers.rb#4
module NumbersAndWords::Strategies
  class << self
    # source://numbers_and_words//lib/numbers_and_words/strategies.rb#13
    def array_joiner; end

    # source://numbers_and_words//lib/numbers_and_words/strategies.rb#9
    def figures_converter; end
  end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/families/base.rb#5
module NumbersAndWords::Strategies::ArrayJoiner; end

# source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner.rb#8
class NumbersAndWords::Strategies::ArrayJoiner::Base
  # @return [Base] a new instance of Base
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner.rb#11
  def initialize(elements, options = T.unsafe(nil)); end

  # Returns the value of attribute elements.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner.rb#9
  def elements; end

  # Sets the attribute elements
  #
  # @param value the value to set the attribute elements to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner.rb#9
  def elements=(_arg0); end

  # Returns the value of attribute language.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner.rb#9
  def language; end

  # Sets the attribute language
  #
  # @param value the value to set the attribute language to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner.rb#9
  def language=(_arg0); end

  # Returns the value of attribute options.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner.rb#9
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner.rb#9
  def options=(_arg0); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner.rb#18
  def run; end

  # Returns the value of attribute translations.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner.rb#9
  def translations; end

  # Sets the attribute translations
  #
  # @param value the value to set the attribute translations to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner.rb#9
  def translations=(_arg0); end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/families/base.rb#6
module NumbersAndWords::Strategies::ArrayJoiner::Languages
  class << self
    # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages.rb#23
    def factory(strategy); end
  end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/base.rb#7
class NumbersAndWords::Strategies::ArrayJoiner::Languages::Base
  include ::NumbersAndWords::Strategies::ArrayJoiner::Languages::Families::Base

  # @return [Base] a new instance of Base
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/base.rb#12
  def initialize(strategy); end

  # Returns the value of attribute elements.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/base.rb#10
  def elements; end

  # Sets the attribute elements
  #
  # @param value the value to set the attribute elements to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/base.rb#10
  def elements=(_arg0); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/base.rb#19
  def join; end

  # Returns the value of attribute options.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/base.rb#10
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/base.rb#10
  def options=(_arg0); end

  # Returns the value of attribute strategy.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/base.rb#10
  def strategy; end

  # Sets the attribute strategy
  #
  # @param value the value to set the attribute strategy to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/base.rb#10
  def strategy=(_arg0); end

  # Returns the value of attribute strings.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/base.rb#10
  def strings; end

  # Sets the attribute strings
  #
  # @param value the value to set the attribute strings to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/base.rb#10
  def strings=(_arg0); end

  # Returns the value of attribute translations.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/base.rb#10
  def translations; end

  # Sets the attribute translations
  #
  # @param value the value to set the attribute translations to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/base.rb#10
  def translations=(_arg0); end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/cs.rb#7
class NumbersAndWords::Strategies::ArrayJoiner::Languages::Cs < ::NumbersAndWords::Strategies::ArrayJoiner::Languages::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/en.rb#7
class NumbersAndWords::Strategies::ArrayJoiner::Languages::En < ::NumbersAndWords::Strategies::ArrayJoiner::Languages::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/en-GB.rb#7
class NumbersAndWords::Strategies::ArrayJoiner::Languages::EnGb < ::NumbersAndWords::Strategies::ArrayJoiner::Languages::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/en-GB.rb#8
  def elements_logic; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/en-GB.rb#12
  def union_element; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/es.rb#7
class NumbersAndWords::Strategies::ArrayJoiner::Languages::Es < ::NumbersAndWords::Strategies::ArrayJoiner::Languages::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/families/base.rb#7
module NumbersAndWords::Strategies::ArrayJoiner::Languages::Families; end

# source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/families/base.rb#8
module NumbersAndWords::Strategies::ArrayJoiner::Languages::Families::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/families/base.rb#9
  def elements_logic; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/families/base.rb#17
  def micro_separator; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/families/base.rb#13
  def union_element; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/fr.rb#7
class NumbersAndWords::Strategies::ArrayJoiner::Languages::Fr < ::NumbersAndWords::Strategies::ArrayJoiner::Languages::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/hu.rb#7
class NumbersAndWords::Strategies::ArrayJoiner::Languages::Hu < ::NumbersAndWords::Strategies::ArrayJoiner::Languages::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/pt-BR.rb#7
class NumbersAndWords::Strategies::ArrayJoiner::Languages::PtBr < ::NumbersAndWords::Strategies::ArrayJoiner::Languages::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/ru.rb#7
class NumbersAndWords::Strategies::ArrayJoiner::Languages::Ru < ::NumbersAndWords::Strategies::ArrayJoiner::Languages::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/ua.rb#7
class NumbersAndWords::Strategies::ArrayJoiner::Languages::Ua < ::NumbersAndWords::Strategies::ArrayJoiner::Languages::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/array_joiner/languages/vi.rb#7
class NumbersAndWords::Strategies::ArrayJoiner::Languages::Vi < ::NumbersAndWords::Strategies::ArrayJoiner::Languages::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/helpers.rb#5
module NumbersAndWords::Strategies::FiguresConverter; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter.rb#10
class NumbersAndWords::Strategies::FiguresConverter::Base
  # @return [Base] a new instance of Base
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter.rb#13
  def initialize(figures, options = T.unsafe(nil)); end

  # Returns the value of attribute decorator.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter.rb#11
  def decorator; end

  # Sets the attribute decorator
  #
  # @param value the value to set the attribute decorator to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter.rb#11
  def decorator=(_arg0); end

  # Returns the value of attribute figures.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter.rb#11
  def figures; end

  # Sets the attribute figures
  #
  # @param value the value to set the attribute figures to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter.rb#11
  def figures=(_arg0); end

  # Returns the value of attribute language.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter.rb#11
  def language; end

  # Sets the attribute language
  #
  # @param value the value to set the attribute language to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter.rb#11
  def language=(_arg0); end

  # Returns the value of attribute options.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter.rb#11
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter.rb#11
  def options=(_arg0); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter.rb#22
  def run; end

  # Returns the value of attribute translations.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter.rb#11
  def translations; end

  # Sets the attribute translations
  #
  # @param value the value to set the attribute translations to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter.rb#11
  def translations=(_arg0); end

  private

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter.rb#28
  def around(&block); end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/base.rb#6
module NumbersAndWords::Strategies::FiguresConverter::Decorators
  class << self
    # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators.rb#22
    def factory(strategy, options); end

    private

    # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators.rb#32
    def decorator_class(method_name); end

    # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators.rb#36
    def decorator_class_name(method_name); end

    # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators.rb#28
    def enabled_decorator(options); end
  end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/base.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Decorators::Base
  # @return [Base] a new instance of Base
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/base.rb#8
  def initialize(strategy, options); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/base.rb#13
  def run; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/cs/base.rb#7
module NumbersAndWords::Strategies::FiguresConverter::Decorators::Cs; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/cs/base.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::Cs::Base < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/cs/fractional.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::Cs::Fractional < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Cs::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/cs/fractional.rb#9
  def run; end

  private

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/cs/fractional.rb#24
  def figures; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/cs/fractional.rb#32
  def fraction_length; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/cs/fractional.rb#16
  def fraction_significance; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/cs/fractional.rb#20
  def full_fraction; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/cs/fractional.rb#28
  def zero_length; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/cs/integral.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::Cs::Integral < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Cs::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/cs/integral.rb#9
  def run; end

  private

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/cs/integral.rb#23
  def figures; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/cs/integral.rb#16
  def integral_significance; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/en/base.rb#7
module NumbersAndWords::Strategies::FiguresConverter::Decorators::En; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/en/base.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::En::Base < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/en/fractional.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::En::Fractional < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::En::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/en/fractional.rb#9
  def run; end

  private

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/en/fractional.rb#23
  def figures; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/en/fractional.rb#31
  def fraction_length; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/en/fractional.rb#15
  def fraction_significance; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/en/fractional.rb#19
  def full_fraction; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/en/fractional.rb#27
  def zero_length; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/en/integral.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::En::Integral < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::En::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/en-GB/base.rb#7
module NumbersAndWords::Strategies::FiguresConverter::Decorators::EnGb; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/en-GB/base.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::EnGb::Base < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::En::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/en-GB/fractional.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::EnGb::Fractional < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::En::Fractional
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/en-GB/fractional.rb#11
  def run; end

  private

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/en-GB/fractional.rb#17
  def fraction_to_digits; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/en-GB/fractional.rb#21
  def zero_length; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/en-GB/fractional.rb#9
NumbersAndWords::Strategies::FiguresConverter::Decorators::EnGb::Fractional::SHIFT_ZERO_LENGTH = T.let(T.unsafe(nil), Integer)

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/en-GB/integral.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::EnGb::Integral < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::En::Integral; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/es/base.rb#7
module NumbersAndWords::Strategies::FiguresConverter::Decorators::Es; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/es/base.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::Es::Base < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/es/fractional.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::Es::Fractional < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Es::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/es/fractional.rb#9
  def run; end

  private

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/es/fractional.rb#24
  def figures; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/es/fractional.rb#32
  def fraction_length; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/es/fractional.rb#16
  def fraction_significance; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/es/fractional.rb#20
  def full_fraction; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/es/fractional.rb#28
  def zero_length; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/es/integral.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::Es::Integral < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Es::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/fr/base.rb#7
module NumbersAndWords::Strategies::FiguresConverter::Decorators::Fr; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/fr/base.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::Fr::Base < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/fr/fractional.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::Fr::Fractional < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Fr::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/fr/fractional.rb#9
  def run; end

  private

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/fr/fractional.rb#23
  def figures; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/fr/fractional.rb#31
  def fraction_length; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/fr/fractional.rb#15
  def fraction_significance; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/fr/fractional.rb#19
  def full_fraction; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/fr/fractional.rb#27
  def zero_length; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/fr/integral.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::Fr::Integral < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Fr::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/hu/base.rb#7
module NumbersAndWords::Strategies::FiguresConverter::Decorators::Hu; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/hu/base.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::Hu::Base < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/hu/fractional.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::Hu::Fractional < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Hu::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/hu/fractional.rb#9
  def run; end

  private

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/hu/fractional.rb#23
  def figures; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/hu/fractional.rb#31
  def fraction_length; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/hu/fractional.rb#15
  def fraction_significance; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/hu/fractional.rb#19
  def full_fraction; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/hu/fractional.rb#27
  def zero_length; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/hu/integral.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::Hu::Integral < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Hu::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/pt-BR/base.rb#7
module NumbersAndWords::Strategies::FiguresConverter::Decorators::PtBr; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/pt-BR/base.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::PtBr::Base < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/pt-BR/fractional.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::PtBr::Fractional < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::PtBr::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/pt-BR/fractional.rb#9
  def run; end

  private

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/pt-BR/fractional.rb#23
  def figures; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/pt-BR/fractional.rb#31
  def fraction_length; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/pt-BR/fractional.rb#15
  def fraction_significance; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/pt-BR/fractional.rb#19
  def full_fraction; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/pt-BR/fractional.rb#27
  def zero_length; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/pt-BR/integral.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::PtBr::Integral < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::PtBr::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/pt-BR/integral.rb#9
  def run; end

  private

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/pt-BR/integral.rb#23
  def figures; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/pt-BR/integral.rb#15
  def integral_significance; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/pt-BR/integral.rb#19
  def quantity; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ru/base.rb#7
module NumbersAndWords::Strategies::FiguresConverter::Decorators::Ru; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ru/base.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::Ru::Base < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ru/fractional.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::Ru::Fractional < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Ru::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ru/fractional.rb#9
  def run; end

  private

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ru/fractional.rb#24
  def figures; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ru/fractional.rb#32
  def fraction_length; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ru/fractional.rb#16
  def fraction_significance; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ru/fractional.rb#20
  def full_fraction; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ru/fractional.rb#28
  def zero_length; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ru/integral.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::Ru::Integral < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Ru::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ru/integral.rb#9
  def run; end

  private

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ru/integral.rb#20
  def figures; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ru/integral.rb#16
  def integral_significance; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ua/base.rb#7
module NumbersAndWords::Strategies::FiguresConverter::Decorators::Ua; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ua/base.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::Ua::Base < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ua/fractional.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::Ua::Fractional < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Ua::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ua/fractional.rb#9
  def run; end

  private

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ua/fractional.rb#24
  def figures; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ua/fractional.rb#32
  def fraction_length; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ua/fractional.rb#16
  def fraction_significance; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ua/fractional.rb#20
  def full_fraction; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ua/fractional.rb#28
  def zero_length; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ua/integral.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::Ua::Integral < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Ua::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ua/integral.rb#9
  def run; end

  private

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ua/integral.rb#20
  def figures; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/ua/integral.rb#16
  def integral_significance; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/vi/base.rb#7
module NumbersAndWords::Strategies::FiguresConverter::Decorators::Vi; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/vi/base.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::Vi::Base < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/vi/fractional.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::Vi::Fractional < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Vi::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/decorators/vi/integral.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Decorators::Vi::Integral < ::NumbersAndWords::Strategies::FiguresConverter::Decorators::Vi::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/helpers.rb#6
module NumbersAndWords::Strategies::FiguresConverter::Languages
  class << self
    # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages.rb#37
    def factory(strategy); end
  end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/base.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::Base
  include ::NumbersAndWords::Strategies::FiguresConverter::Languages::Families::Helpers
  include ::NumbersAndWords::Strategies::FiguresConverter::Languages::Families::Base

  # @return [Base] a new instance of Base
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/base.rb#12
  def initialize(strategy); end

  # Returns the value of attribute figures.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/base.rb#10
  def figures; end

  # Sets the attribute figures
  #
  # @param value the value to set the attribute figures to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/base.rb#10
  def figures=(_arg0); end

  # Returns the value of attribute options.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/base.rb#10
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/base.rb#10
  def options=(_arg0); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/base.rb#24
  def print_words; end

  # Returns the value of attribute strategy.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/base.rb#10
  def strategy; end

  # Sets the attribute strategy
  #
  # @param value the value to set the attribute strategy to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/base.rb#10
  def strategy=(_arg0); end

  # Returns the value of attribute strings.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/base.rb#10
  def strings; end

  # Sets the attribute strings
  #
  # @param value the value to set the attribute strings to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/base.rb#10
  def strings=(_arg0); end

  # Returns the value of attribute translations.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/base.rb#10
  def translations; end

  # Sets the attribute translations
  #
  # @param value the value to set the attribute translations to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/base.rb#10
  def translations=(_arg0); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/base.rb#19
  def words; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/cs.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::Cs < ::NumbersAndWords::Strategies::FiguresConverter::Languages::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/cs.rb#23
  def gender; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/cs.rb#10
  def hundreds; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/cs.rb#19
  def megs(*args); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/cs.rb#10
  def ones; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/cs.rb#10
  def teens; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/cs.rb#10
  def tens; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/cs.rb#10
  def tens_with_ones; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/cs.rb#15
  def zero; end

  private

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/cs.rb#38
  def internal_options; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/cs.rb#46
  def maybe_ordinal; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/cs.rb#42
  def maybe_remove_zero; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/de.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::De < ::NumbersAndWords::Strategies::FiguresConverter::Languages::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/de.rb#16
  def complex_number_to_words; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/de.rb#35
  def megs; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/de.rb#23
  def ones; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/de.rb#27
  def postfix; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/de.rb#12
  def print_megs_words; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/de.rb#8
  def print_words; end

  private

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/de.rb#59
  def complex_part; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/de.rb#41
  def print_megs; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/de.rb#47
  def print_other; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/de.rb#51
  def print_thousands; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/de.rb#55
  def simple_part; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/en.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::En < ::NumbersAndWords::Strategies::FiguresConverter::Languages::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/en.rb#14
  def hundreds; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/en.rb#37
  def maybe_hyphen_separator; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/en.rb#41
  def maybe_ordinal(type); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/en.rb#49
  def maybe_remove_zero; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/en.rb#45
  def maybe_union_after_hundreds(translations); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/en.rb#9
  def megs; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/en.rb#9
  def ones; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/en.rb#29
  def strings_logic; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/en.rb#9
  def teens; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/en.rb#9
  def tens; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/en.rb#22
  def tens_with_ones; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/en.rb#18
  def zero; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/en-GB.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::EnGb < ::NumbersAndWords::Strategies::FiguresConverter::Languages::En; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/es.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::Es < ::NumbersAndWords::Strategies::FiguresConverter::Languages::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/es.rb#8
  def capacity_iteration; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/es.rb#29
  def hundreds; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/es.rb#34
  def megs; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/es.rb#16
  def ones; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/es.rb#22
  def tens_with_ones; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/es.rb#12
  def zero; end

  private

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/es.rb#63
  def gender; end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/es.rb#59
  def hundred_apocopated?; end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/es.rb#49
  def long_scale_thousand?; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/es.rb#71
  def maybe_remove_zero; end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/es.rb#54
  def one_apocopated?; end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/es.rb#42
  def one_thousand?; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/et.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::Et < ::NumbersAndWords::Strategies::FiguresConverter::Languages::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/et.rb#8
  def megs; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/helpers.rb#7
module NumbersAndWords::Strategies::FiguresConverter::Languages::Families; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/base.rb#8
module NumbersAndWords::Strategies::FiguresConverter::Languages::Families::Base
  include ::NumbersAndWords::Strategies::FiguresConverter::Languages::Families::Helpers

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/base.rb#32
  def capacity_iteration; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/base.rb#25
  def complex_number_to_words; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/base.rb#52
  def complex_tens; end

  # Returns the value of attribute current_capacity.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/base.rb#11
  def current_capacity; end

  # Sets the attribute current_capacity
  #
  # @param value the value to set the attribute current_capacity to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/base.rb#11
  def current_capacity=(_arg0); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/base.rb#48
  def hundreds_number_to_words; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/base.rb#39
  def number_without_capacity_to_words(capacity = T.unsafe(nil)); end

  # Returns the value of attribute parent_figures.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/base.rb#11
  def parent_figures; end

  # Sets the attribute parent_figures
  #
  # @param value the value to set the attribute parent_figures to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/base.rb#11
  def parent_figures=(_arg0); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/base.rb#68
  def save_parent_figures; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/base.rb#56
  def simple_number_to_words; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/base.rb#13
  def strings_logic; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/base.rb#39
  def words_in_capacity(capacity = T.unsafe(nil)); end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/cyrillic.rb#8
module NumbersAndWords::Strategies::FiguresConverter::Languages::Families::Cyrillic
  include ::NumbersAndWords::Strategies::FiguresConverter::Languages::Families::Helpers
  include ::NumbersAndWords::Strategies::FiguresConverter::Languages::Families::Base

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/cyrillic.rb#11
  def gender; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/cyrillic.rb#30
  def megs(*args); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/cyrillic.rb#25
  def ones(*args); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/cyrillic.rb#25
  def tens_with_ones(*args); end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/helpers.rb#8
module NumbersAndWords::Strategies::FiguresConverter::Languages::Families::Helpers
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/helpers.rb#15
  def hundreds(*args); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/helpers.rb#21
  def megs(*args); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/helpers.rb#15
  def ones(*args); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/helpers.rb#15
  def teens(*args); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/helpers.rb#15
  def tens(*args); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/helpers.rb#15
  def tens_with_ones(*args); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/helpers.rb#26
  def translate(method_name, *args); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/families/helpers.rb#9
  def zero(*args); end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/fr.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::Fr < ::NumbersAndWords::Strategies::FiguresConverter::Languages::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/fr.rb#8
  def capacity_iteration; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/fr.rb#16
  def hundreds; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/fr.rb#20
  def megs; end

  private

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/fr.rb#26
  def one?; end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/fr.rb#30
  def thousand?; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/hu.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::Hu < ::NumbersAndWords::Strategies::FiguresConverter::Languages::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/hu.rb#32
  def complex_number_to_words; end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/hu.rb#16
  def greater_than_2000?; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/hu.rb#51
  def hundreds; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/hu.rb#12
  def inner_reverse_words; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/hu.rb#56
  def maybe_ordinal(type); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/hu.rb#51
  def megs; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/hu.rb#51
  def ones; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/hu.rb#8
  def print_words; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/hu.rb#40
  def simple_number_to_words; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/hu.rb#20
  def strings_logic; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/hu.rb#51
  def teens; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/hu.rb#51
  def tens; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/hu.rb#51
  def tens_with_ones; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/hu.rb#51
  def zero; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/hy.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::Hy < ::NumbersAndWords::Strategies::FiguresConverter::Languages::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/it.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::It < ::NumbersAndWords::Strategies::FiguresConverter::Languages::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/ka.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::Ka < ::NumbersAndWords::Strategies::FiguresConverter::Languages::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/ka.rb#8
  def capacity_iteration; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/ka.rb#16
  def hundreds; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/ka.rb#20
  def megs; end

  private

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/ka.rb#28
  def one?; end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/ka.rb#32
  def thousand?; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/kz.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::Kz < ::NumbersAndWords::Strategies::FiguresConverter::Languages::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/lt.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::Lt < ::NumbersAndWords::Strategies::FiguresConverter::Languages::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/lt.rb#8
  def capacity_iteration; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/lt.rb#16
  def megs; end

  private

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/lt.rb#22
  def one?; end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/lt.rb#26
  def thousand?; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/lv.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::Lv < ::NumbersAndWords::Strategies::FiguresConverter::Languages::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/lv.rb#12
  def megs; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/lv.rb#8
  def tens_with_ones; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/nl.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::Nl < ::NumbersAndWords::Strategies::FiguresConverter::Languages::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/nl.rb#12
  def capacity_iteration; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/nl.rb#8
  def hundreds_number_to_words; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/nl.rb#29
  def number_without_capacity_to_words; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/nl.rb#21
  def simple_number_to_words; end

  private

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/nl.rb#41
  def apply_tens_of_hundreds?; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::Pt < ::NumbersAndWords::Strategies::FiguresConverter::Languages::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt.rb#8
  def hundreds; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt.rb#12
  def megs; end

  private

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt.rb#18
  def hundred?; end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt.rb#22
  def one_hundred?; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt-BR.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::PtBr < ::NumbersAndWords::Strategies::FiguresConverter::Languages::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt-BR.rb#26
  def capacity_iteration; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt-BR.rb#22
  def complex_number_to_words; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt-BR.rb#37
  def hundreds; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt-BR.rb#41
  def megs; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt-BR.rb#33
  def ones; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt-BR.rb#9
  def teens; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt-BR.rb#9
  def tens; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt-BR.rb#9
  def tens_with_ones; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt-BR.rb#18
  def words; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt-BR.rb#14
  def zero; end

  private

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt-BR.rb#58
  def gender; end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt-BR.rb#68
  def hundred?; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt-BR.rb#50
  def internal_options; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt-BR.rb#54
  def maybe_ordinal; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt-BR.rb#111
  def maybe_remove_zero; end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt-BR.rb#72
  def one_hundred?; end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt-BR.rb#80
  def one_thousand?; end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt-BR.rb#76
  def opaque?; end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt-BR.rb#97
  def with_comma?; end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/pt-BR.rb#87
  def without_connector?; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/ru.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::Ru < ::NumbersAndWords::Strategies::FiguresConverter::Languages::Base
  include ::NumbersAndWords::Strategies::FiguresConverter::Languages::Families::Cyrillic
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/se.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::Se < ::NumbersAndWords::Strategies::FiguresConverter::Languages::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/tr.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::Tr < ::NumbersAndWords::Strategies::FiguresConverter::Languages::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/tr.rb#8
  def capacity_iteration; end

  private

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/tr.rb#18
  def one?; end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/tr.rb#22
  def thousand?; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/ua.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::Ua < ::NumbersAndWords::Strategies::FiguresConverter::Languages::Base
  include ::NumbersAndWords::Strategies::FiguresConverter::Languages::Families::Cyrillic
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/vi.rb#7
class NumbersAndWords::Strategies::FiguresConverter::Languages::Vi < ::NumbersAndWords::Strategies::FiguresConverter::Languages::Base
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/vi.rb#93
  def billion_unit; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/vi.rb#72
  def fraction_length; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/vi.rb#78
  def fraction_number_zeros_leading; end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/vi.rb#68
  def fractional?; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/vi.rb#26
  def fractional_with_zero_leading_string_logic; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/vi.rb#48
  def hundreds(options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/vi.rb#43
  def hundreds?; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/vi.rb#31
  def integeral_string_logic; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/vi.rb#56
  def ones(options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/vi.rb#64
  def ones_union(options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/vi.rb#8
  def print_words; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/vi.rb#82
  def remove_billion_noice(value); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/languages/vi.rb#13
  def strings_logic; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/base/gender.rb#6
module NumbersAndWords::Strategies::FiguresConverter::Options; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/base/gender.rb#7
module NumbersAndWords::Strategies::FiguresConverter::Options::Base; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/base/gender.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::Base::Gender
  # @return [Gender] a new instance of Gender
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/base/gender.rb#11
  def initialize(proxy, *_args); end

  # Returns the value of attribute options.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/base/gender.rb#9
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/base/gender.rb#9
  def options=(_arg0); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/base/gender.rb#16
  def result; end

  # Returns the value of attribute strategy.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/base/gender.rb#9
  def strategy; end

  # Sets the attribute strategy
  #
  # @param value the value to set the attribute strategy to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/base/gender.rb#9
  def strategy=(_arg0); end

  private

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/base/gender.rb#22
  def active?; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/base/ordinal.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::Base::Ordinal
  # @return [Ordinal] a new instance of Ordinal
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/base/ordinal.rb#9
  def initialize(proxy, *_args); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/base/ordinal.rb#14
  def result; end

  private

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/base/ordinal.rb#20
  def active?; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/base/remove_zero.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::Base::RemoveZero
  # @return [RemoveZero] a new instance of RemoveZero
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/base/remove_zero.rb#11
  def initialize(proxy, *_args); end

  # Returns the value of attribute options.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/base/remove_zero.rb#9
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/base/remove_zero.rb#9
  def options=(_arg0); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/base/remove_zero.rb#16
  def result; end

  # Returns the value of attribute strategy.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/base/remove_zero.rb#9
  def strategy; end

  # Sets the attribute strategy
  #
  # @param value the value to set the attribute strategy to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/base/remove_zero.rb#9
  def strategy=(_arg0); end

  private

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/base/remove_zero.rb#22
  def active?; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/cs/gender.rb#7
module NumbersAndWords::Strategies::FiguresConverter::Options::Cs; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/cs/gender.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::Cs::Gender < ::NumbersAndWords::Strategies::FiguresConverter::Options::Base::Gender
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/cs/gender.rb#9
  def result; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/cs/ordinal.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::Cs::Ordinal < ::NumbersAndWords::Strategies::FiguresConverter::Options::Base::Ordinal; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/cs/remove_zero.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::Cs::RemoveZero < ::NumbersAndWords::Strategies::FiguresConverter::Options::Base::RemoveZero; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/hundreds_with_union.rb#7
module NumbersAndWords::Strategies::FiguresConverter::Options::En; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/hundreds_with_union.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::En::HundredsWithUnion
  # @return [HundredsWithUnion] a new instance of HundredsWithUnion
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/hundreds_with_union.rb#11
  def initialize(proxy, *_args); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/hundreds_with_union.rb#16
  def modify_or_leave(hundreds); end

  # Returns the value of attribute options.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/hundreds_with_union.rb#9
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/hundreds_with_union.rb#9
  def options=(_arg0); end

  # Returns the value of attribute strategy.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/hundreds_with_union.rb#9
  def strategy; end

  # Sets the attribute strategy
  #
  # @param value the value to set the attribute strategy to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/hundreds_with_union.rb#9
  def strategy=(_arg0); end

  private

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/hundreds_with_union.rb#23
  def active?; end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/hundreds_with_union.rb#27
  def round_hundred?; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/hundreds_with_union.rb#31
  def translations; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/ordinal.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::En::Ordinal < ::NumbersAndWords::Strategies::FiguresConverter::Options::Base::Ordinal
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/ordinal.rb#13
  def result(type); end

  private

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/ordinal.rb#24
  def check_megs_numbers; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/ordinal.rb#20
  def check_simple_numbers; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/ordinal.rb#42
  def current_capacity; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/ordinal.rb#46
  def language_figures; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/ordinal.rb#34
  def megs_numbers_condition; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/ordinal.rb#38
  def simple_number_to_words; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/ordinal.rb#28
  def simple_numbers_condition; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/ordinal.rb#10
NumbersAndWords::Strategies::FiguresConverter::Options::En::Ordinal::HUNDRED_TYPE = T.let(T.unsafe(nil), Symbol)

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/ordinal.rb#11
NumbersAndWords::Strategies::FiguresConverter::Options::En::Ordinal::MEGS_TYPE = T.let(T.unsafe(nil), Symbol)

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/ordinal.rb#9
NumbersAndWords::Strategies::FiguresConverter::Options::En::Ordinal::ZERO_TYPE = T.let(T.unsafe(nil), Symbol)

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/pronounced.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::En::Pronounced
  # @return [Pronounced] a new instance of Pronounced
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/pronounced.rb#11
  def initialize(proxy, *_args); end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/pronounced.rb#16
  def active?; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/pronounced.rb#42
  def handle_hundreds(language, figures); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/pronounced.rb#32
  def handle_thousands(language, figures); end

  # Returns the value of attribute options.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/pronounced.rb#9
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/pronounced.rb#9
  def options=(_arg0); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/pronounced.rb#20
  def process(language, figures); end

  # Returns the value of attribute strategy.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/pronounced.rb#9
  def strategy; end

  # Sets the attribute strategy
  #
  # @param value the value to set the attribute strategy to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/pronounced.rb#9
  def strategy=(_arg0); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/pronounced.rb#48
  def tens_with_oh(language, figures); end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/remove_hyphen.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::En::RemoveHyphen
  # @return [RemoveHyphen] a new instance of RemoveHyphen
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/remove_hyphen.rb#11
  def initialize(proxy, *_args); end

  # Returns the value of attribute options.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/remove_hyphen.rb#9
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/remove_hyphen.rb#9
  def options=(_arg0); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/remove_hyphen.rb#16
  def result; end

  # Returns the value of attribute strategy.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/remove_hyphen.rb#9
  def strategy; end

  # Sets the attribute strategy
  #
  # @param value the value to set the attribute strategy to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/remove_hyphen.rb#9
  def strategy=(_arg0); end

  private

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/remove_hyphen.rb#22
  def active?; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en/remove_zero.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::En::RemoveZero < ::NumbersAndWords::Strategies::FiguresConverter::Options::Base::RemoveZero; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en-GB/hundreds_with_union.rb#7
module NumbersAndWords::Strategies::FiguresConverter::Options::EnGb; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en-GB/hundreds_with_union.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::EnGb::HundredsWithUnion < ::NumbersAndWords::Strategies::FiguresConverter::Options::En::HundredsWithUnion; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en-GB/ordinal.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::EnGb::Ordinal < ::NumbersAndWords::Strategies::FiguresConverter::Options::En::Ordinal; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en-GB/pronounced.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::EnGb::Pronounced < ::NumbersAndWords::Strategies::FiguresConverter::Options::En::Pronounced; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en-GB/remove_hyphen.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::EnGb::RemoveHyphen < ::NumbersAndWords::Strategies::FiguresConverter::Options::En::RemoveHyphen; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/en-GB/remove_zero.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::EnGb::RemoveZero < ::NumbersAndWords::Strategies::FiguresConverter::Options::En::RemoveZero; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/es/apocopated.rb#7
module NumbersAndWords::Strategies::FiguresConverter::Options::Es; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/es/apocopated.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::Es::Apocopated
  # @return [Apocopated] a new instance of Apocopated
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/es/apocopated.rb#11
  def initialize(proxy, *_args); end

  # Returns the value of attribute options.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/es/apocopated.rb#9
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/es/apocopated.rb#9
  def options=(_arg0); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/es/apocopated.rb#16
  def result; end

  # Returns the value of attribute strategy.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/es/apocopated.rb#9
  def strategy; end

  # Sets the attribute strategy
  #
  # @param value the value to set the attribute strategy to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/es/apocopated.rb#9
  def strategy=(_arg0); end

  private

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/es/apocopated.rb#22
  def active?; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/es/gender.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::Es::Gender < ::NumbersAndWords::Strategies::FiguresConverter::Options::Base::Gender; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/es/remove_zero.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::Es::RemoveZero < ::NumbersAndWords::Strategies::FiguresConverter::Options::Base::RemoveZero; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/hu/ordinal.rb#7
module NumbersAndWords::Strategies::FiguresConverter::Options::Hu; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/hu/ordinal.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::Hu::Ordinal < ::NumbersAndWords::Strategies::FiguresConverter::Options::En::Ordinal; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/nl/tens_of_hundreds.rb#7
module NumbersAndWords::Strategies::FiguresConverter::Options::Nl; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/nl/tens_of_hundreds.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::Nl::TensOfHundreds
  # @return [TensOfHundreds] a new instance of TensOfHundreds
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/nl/tens_of_hundreds.rb#11
  def initialize(proxy, *_args); end

  # Returns the value of attribute options.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/nl/tens_of_hundreds.rb#9
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/nl/tens_of_hundreds.rb#9
  def options=(_arg0); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/nl/tens_of_hundreds.rb#16
  def result; end

  # Returns the value of attribute strategy.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/nl/tens_of_hundreds.rb#9
  def strategy; end

  # Sets the attribute strategy
  #
  # @param value the value to set the attribute strategy to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/nl/tens_of_hundreds.rb#9
  def strategy=(_arg0); end

  private

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/nl/tens_of_hundreds.rb#22
  def active?; end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options.rb#18
class NumbersAndWords::Strategies::FiguresConverter::Options::Proxy
  # @return [Proxy] a new instance of Proxy
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options.rb#21
  def initialize(strategy, options); end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options.rb#26
  def method_missing(method_name, *args, &block); end

  # Returns the value of attribute options.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options.rb#19
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options.rb#19
  def options=(_arg0); end

  # Returns the value of attribute strategy.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options.rb#19
  def strategy; end

  # Sets the attribute strategy
  #
  # @param value the value to set the attribute strategy to.
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options.rb#19
  def strategy=(_arg0); end

  private

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options.rb#48
  def module_name; end

  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options.rb#44
  def proxy_class_name(method_name); end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options.rb#38
  def respond_to_missing?(method_name, include_private: T.unsafe(nil)); end
end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/pt-BR/gender.rb#7
module NumbersAndWords::Strategies::FiguresConverter::Options::PtBr; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/pt-BR/gender.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::PtBr::Gender < ::NumbersAndWords::Strategies::FiguresConverter::Options::Base::Gender; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/pt-BR/ordinal.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::PtBr::Ordinal < ::NumbersAndWords::Strategies::FiguresConverter::Options::Base::Ordinal; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/pt-BR/remove_zero.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::PtBr::RemoveZero < ::NumbersAndWords::Strategies::FiguresConverter::Options::Base::RemoveZero; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/ru/gender.rb#7
module NumbersAndWords::Strategies::FiguresConverter::Options::Ru; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/ru/gender.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::Ru::Gender < ::NumbersAndWords::Strategies::FiguresConverter::Options::Base::Gender; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/ua/gender.rb#7
module NumbersAndWords::Strategies::FiguresConverter::Options::Ua; end

# source://numbers_and_words//lib/numbers_and_words/strategies/figures_converter/options/ua/gender.rb#8
class NumbersAndWords::Strategies::FiguresConverter::Options::Ua::Gender < ::NumbersAndWords::Strategies::FiguresConverter::Options::Base::Gender; end

# source://numbers_and_words//lib/numbers_and_words/translations/base.rb#4
module NumbersAndWords::Translations
  class << self
    # source://numbers_and_words//lib/numbers_and_words/translations.rb#34
    def factory; end
  end
end

# source://numbers_and_words//lib/numbers_and_words/translations/base.rb#5
class NumbersAndWords::Translations::Base
  # source://numbers_and_words//lib/numbers_and_words/translations/base.rb#8
  def t(attribute, options = T.unsafe(nil)); end
end

# source://numbers_and_words//lib/numbers_and_words/translations/base.rb#6
NumbersAndWords::Translations::Base::I18N_NAMESPACE = T.let(T.unsafe(nil), Symbol)

# source://numbers_and_words//lib/numbers_and_words/translations/cs.rb#5
class NumbersAndWords::Translations::Cs < ::NumbersAndWords::Translations::Base
  include ::NumbersAndWords::Translations::Families::Base
  include ::NumbersAndWords::Translations::Extensions::FractionSignificance

  # source://numbers_and_words//lib/numbers_and_words/translations/cs.rb#29
  def hundreds(number, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/cs.rb#33
  def integral(number, _options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/cs.rb#13
  def ones(number, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/cs.rb#21
  def teens(numbers, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/cs.rb#17
  def tens(number, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/cs.rb#25
  def tens_with_ones(numbers, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/cs.rb#9
  def zero(options = T.unsafe(nil)); end

  private

  # source://numbers_and_words//lib/numbers_and_words/translations/cs.rb#43
  def gender_to_use(options); end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/translations/cs.rb#39
  def ordinal?(options); end
end

# source://numbers_and_words//lib/numbers_and_words/translations/de.rb#5
class NumbersAndWords::Translations::De < ::NumbersAndWords::Translations::Base
  include ::NumbersAndWords::Translations::Families::Base

  # source://numbers_and_words//lib/numbers_and_words/translations/de.rb#17
  def hundreds(number, _options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/de.rb#9
  def ones(number, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/de.rb#13
  def tens_with_ones(numbers, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/de.rb#21
  def zero(_options = T.unsafe(nil)); end
end

# source://numbers_and_words//lib/numbers_and_words/translations/de.rb#7
NumbersAndWords::Translations::De::DEFAULT_POSTFIX = T.let(T.unsafe(nil), Symbol)

# source://numbers_and_words//lib/numbers_and_words/translations/en.rb#5
class NumbersAndWords::Translations::En < ::NumbersAndWords::Translations::Base
  include ::NumbersAndWords::Translations::Families::Base
  include ::NumbersAndWords::Translations::Families::Latin
  include ::NumbersAndWords::Translations::Extensions::FractionSignificance
end

# source://numbers_and_words//lib/numbers_and_words/translations/en-GB.rb#5
class NumbersAndWords::Translations::EnGb < ::NumbersAndWords::Translations::Base
  include ::NumbersAndWords::Translations::Families::Base
  include ::NumbersAndWords::Translations::Families::Latin
  include ::NumbersAndWords::Translations::Extensions::FractionSignificance
end

# source://numbers_and_words//lib/numbers_and_words/translations/es.rb#5
class NumbersAndWords::Translations::Es < ::NumbersAndWords::Translations::Base
  include ::NumbersAndWords::Translations::Families::Base
  include ::NumbersAndWords::Translations::Extensions::FractionSignificance

  # source://numbers_and_words//lib/numbers_and_words/translations/es.rb#31
  def hundreds(number, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/es.rb#13
  def ones(number, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/es.rb#21
  def tens_with_ones(numbers, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/es.rb#25
  def twenties_with_ones(numbers, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/es.rb#9
  def zero(_options = T.unsafe(nil)); end
end

# source://numbers_and_words//lib/numbers_and_words/translations/et.rb#5
class NumbersAndWords::Translations::Et < ::NumbersAndWords::Translations::Base
  include ::NumbersAndWords::Translations::Families::Base
  include ::NumbersAndWords::Translations::Families::Latin

  # source://numbers_and_words//lib/numbers_and_words/translations/et.rb#8
  def hundreds(number, _options = T.unsafe(nil)); end
end

# source://numbers_and_words//lib/numbers_and_words/translations/extensions/fraction_significance.rb#5
module NumbersAndWords::Translations::Extensions; end

# source://numbers_and_words//lib/numbers_and_words/translations/extensions/fraction_significance.rb#6
module NumbersAndWords::Translations::Extensions::FractionSignificance
  # source://numbers_and_words//lib/numbers_and_words/translations/extensions/fraction_significance.rb#13
  def micro(capacity); end

  # source://numbers_and_words//lib/numbers_and_words/translations/extensions/fraction_significance.rb#17
  def micro_prefix(capacity); end

  # source://numbers_and_words//lib/numbers_and_words/translations/extensions/fraction_significance.rb#7
  def micros(capacity, number = T.unsafe(nil)); end
end

# source://numbers_and_words//lib/numbers_and_words/translations/families/base.rb#5
module NumbersAndWords::Translations::Families; end

# source://numbers_and_words//lib/numbers_and_words/translations/families/base.rb#6
module NumbersAndWords::Translations::Families::Base
  # source://numbers_and_words//lib/numbers_and_words/translations/families/base.rb#25
  def mega(capacity); end

  # source://numbers_and_words//lib/numbers_and_words/translations/families/base.rb#19
  def megs(capacity, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/families/base.rb#33
  def micro_separator; end

  # source://numbers_and_words//lib/numbers_and_words/translations/families/base.rb#7
  def teens(numbers, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/families/base.rb#11
  def tens(number, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/families/base.rb#15
  def tens_with_ones(numbers, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/families/base.rb#29
  def union; end
end

# source://numbers_and_words//lib/numbers_and_words/translations/families/cyrillic.rb#6
module NumbersAndWords::Translations::Families::Cyrillic
  include ::NumbersAndWords::Translations::Families::Base

  # source://numbers_and_words//lib/numbers_and_words/translations/families/cyrillic.rb#17
  def hundreds(number, _options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/families/cyrillic.rb#21
  def integral(number, _options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/families/cyrillic.rb#13
  def ones(number, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/families/cyrillic.rb#9
  def zero(_options = T.unsafe(nil)); end
end

# source://numbers_and_words//lib/numbers_and_words/translations/families/latin.rb#6
module NumbersAndWords::Translations::Families::Latin
  include ::NumbersAndWords::Translations::Families::Base

  # source://numbers_and_words//lib/numbers_and_words/translations/families/latin.rb#17
  def hundreds(number, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/families/latin.rb#13
  def ones(number, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/families/latin.rb#9
  def zero(options = T.unsafe(nil)); end
end

# source://numbers_and_words//lib/numbers_and_words/translations/fr.rb#5
class NumbersAndWords::Translations::Fr < ::NumbersAndWords::Translations::Base
  include ::NumbersAndWords::Translations::Families::Base
  include ::NumbersAndWords::Translations::Families::Latin
  include ::NumbersAndWords::Translations::Extensions::FractionSignificance

  # source://numbers_and_words//lib/numbers_and_words/translations/fr.rb#24
  def hundreds(number, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/fr.rb#11
  def tens(number, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/fr.rb#17
  def tens_with_ones(numbers, options = T.unsafe(nil)); end
end

# source://numbers_and_words//lib/numbers_and_words/translations/fr.rb#9
NumbersAndWords::Translations::Fr::SPECIAL_TENS_CASE = T.let(T.unsafe(nil), Integer)

# source://numbers_and_words//lib/numbers_and_words/translations/hu.rb#5
class NumbersAndWords::Translations::Hu < ::NumbersAndWords::Translations::Base
  include ::NumbersAndWords::Translations::Families::Base
  include ::NumbersAndWords::Translations::Families::Latin
  include ::NumbersAndWords::Translations::Extensions::FractionSignificance

  # source://numbers_and_words//lib/numbers_and_words/translations/hu.rb#14
  def hundreds(number, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/hu.rb#9
  def tens_with_ones(numbers, options = T.unsafe(nil)); end
end

# source://numbers_and_words//lib/numbers_and_words/translations/hy.rb#5
class NumbersAndWords::Translations::Hy < ::NumbersAndWords::Translations::Base
  include ::NumbersAndWords::Translations::Families::Base
  include ::NumbersAndWords::Translations::Families::Latin

  # source://numbers_and_words//lib/numbers_and_words/translations/hy.rb#13
  def hundreds(number, _options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/hy.rb#8
  def tens_with_ones(numbers, options = T.unsafe(nil)); end
end

# source://numbers_and_words//lib/numbers_and_words/translations/it.rb#5
class NumbersAndWords::Translations::It < ::NumbersAndWords::Translations::Base
  include ::NumbersAndWords::Translations::Families::Base
  include ::NumbersAndWords::Translations::Families::Latin

  # source://numbers_and_words//lib/numbers_and_words/translations/it.rb#12
  def hundreds(number, _options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/it.rb#8
  def tens_with_ones(numbers, _options = T.unsafe(nil)); end
end

# source://numbers_and_words//lib/numbers_and_words/translations/ka.rb#5
class NumbersAndWords::Translations::Ka < ::NumbersAndWords::Translations::Base
  include ::NumbersAndWords::Translations::Families::Base
  include ::NumbersAndWords::Translations::Families::Latin

  # source://numbers_and_words//lib/numbers_and_words/translations/ka.rb#54
  def hundreds(number, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/ka.rb#42
  def tens_with_ones(numbers, _options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/ka.rb#30
  def vigesimal_range(number); end
end

# source://numbers_and_words//lib/numbers_and_words/translations/ka.rb#7
NumbersAndWords::Translations::Ka::TENS_VIGESIMAL_RANGES = T.let(T.unsafe(nil), Array)

# source://numbers_and_words//lib/numbers_and_words/translations/kz.rb#5
class NumbersAndWords::Translations::Kz < ::NumbersAndWords::Translations::Base
  include ::NumbersAndWords::Translations::Families::Base
  include ::NumbersAndWords::Translations::Families::Latin
end

# source://numbers_and_words//lib/numbers_and_words/translations/lt.rb#5
class NumbersAndWords::Translations::Lt < ::NumbersAndWords::Translations::Base
  include ::NumbersAndWords::Translations::Families::Base
  include ::NumbersAndWords::Translations::Families::Latin

  # source://numbers_and_words//lib/numbers_and_words/translations/lt.rb#8
  def hundreds(number, _options = T.unsafe(nil)); end
end

# source://numbers_and_words//lib/numbers_and_words/translations/lv.rb#5
class NumbersAndWords::Translations::Lv < ::NumbersAndWords::Translations::Base
  include ::NumbersAndWords::Translations::Families::Base
  include ::NumbersAndWords::Translations::Families::Latin

  # source://numbers_and_words//lib/numbers_and_words/translations/lv.rb#8
  def hundreds(number, _options = T.unsafe(nil)); end
end

# source://numbers_and_words//lib/numbers_and_words/translations/nl.rb#5
class NumbersAndWords::Translations::Nl < ::NumbersAndWords::Translations::Base
  include ::NumbersAndWords::Translations::Families::Base
  include ::NumbersAndWords::Translations::Families::Latin

  # source://numbers_and_words//lib/numbers_and_words/translations/nl.rb#12
  def hundreds(number, _options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/nl.rb#8
  def tens_with_ones(numbers, _options = T.unsafe(nil)); end

  private

  # source://numbers_and_words//lib/numbers_and_words/translations/nl.rb#20
  def union(units); end
end

# source://numbers_and_words//lib/numbers_and_words/translations/pt.rb#5
class NumbersAndWords::Translations::Pt < ::NumbersAndWords::Translations::Base
  include ::NumbersAndWords::Translations::Families::Base
  include ::NumbersAndWords::Translations::Families::Latin

  # source://numbers_and_words//lib/numbers_and_words/translations/pt.rb#12
  def hundreds(number, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/pt.rb#8
  def tens_with_ones(numbers, _options = T.unsafe(nil)); end
end

# source://numbers_and_words//lib/numbers_and_words/translations/pt-BR.rb#5
class NumbersAndWords::Translations::PtBr < ::NumbersAndWords::Translations::Base
  include ::NumbersAndWords::Translations::Families::Base
  include ::NumbersAndWords::Translations::Extensions::FractionSignificance

  # source://numbers_and_words//lib/numbers_and_words/translations/pt-BR.rb#40
  def hundreds(number, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/pt-BR.rb#9
  def integral(number, _options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/pt-BR.rb#49
  def megs(capacity, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/pt-BR.rb#63
  def micro_prefix(capacity, number); end

  # source://numbers_and_words//lib/numbers_and_words/translations/pt-BR.rb#57
  def micros(capacity, number = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/pt-BR.rb#17
  def ones(number, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/pt-BR.rb#29
  def teens(number, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/pt-BR.rb#23
  def tens(number, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/pt-BR.rb#35
  def tens_with_ones(numbers, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/pt-BR.rb#13
  def zero(options = T.unsafe(nil)); end

  private

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/translations/pt-BR.rb#72
  def ordinal?(options); end
end

# source://numbers_and_words//lib/numbers_and_words/translations/ru.rb#5
class NumbersAndWords::Translations::Ru < ::NumbersAndWords::Translations::Base
  include ::NumbersAndWords::Translations::Families::Base
  include ::NumbersAndWords::Translations::Families::Cyrillic
  include ::NumbersAndWords::Translations::Extensions::FractionSignificance
end

# source://numbers_and_words//lib/numbers_and_words/translations/se.rb#5
class NumbersAndWords::Translations::Se < ::NumbersAndWords::Translations::Base
  include ::NumbersAndWords::Translations::Families::Base
  include ::NumbersAndWords::Translations::Families::Latin

  # source://numbers_and_words//lib/numbers_and_words/translations/se.rb#8
  def tens_with_ones(numbers, _options = T.unsafe(nil)); end
end

# source://numbers_and_words//lib/numbers_and_words/translations/tr.rb#5
class NumbersAndWords::Translations::Tr < ::NumbersAndWords::Translations::Base
  include ::NumbersAndWords::Translations::Families::Base
  include ::NumbersAndWords::Translations::Families::Latin

  # source://numbers_and_words//lib/numbers_and_words/translations/tr.rb#8
  def hundreds(number, options = T.unsafe(nil)); end
end

# source://numbers_and_words//lib/numbers_and_words/translations/ua.rb#5
class NumbersAndWords::Translations::Ua < ::NumbersAndWords::Translations::Base
  include ::NumbersAndWords::Translations::Families::Base
  include ::NumbersAndWords::Translations::Families::Cyrillic
  include ::NumbersAndWords::Translations::Extensions::FractionSignificance
end

# source://numbers_and_words//lib/numbers_and_words/translations/vi.rb#5
class NumbersAndWords::Translations::Vi < ::NumbersAndWords::Translations::Base
  include ::NumbersAndWords::Translations::Families::Base
  include ::NumbersAndWords::Translations::Families::Latin
  include ::NumbersAndWords::Translations::Extensions::FractionSignificance

  # source://numbers_and_words//lib/numbers_and_words/translations/vi.rb#8
  def ones_of_tens(number, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/vi.rb#19
  def ones_union(number, options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/translations/vi.rb#15
  def tens_with_ones(numbers, options = T.unsafe(nil)); end
end

# source://numbers_and_words//lib/numbers_and_words/version.rb#4
NumbersAndWords::VERSION = T.let(T.unsafe(nil), String)

# source://numbers_and_words//lib/numbers_and_words/helper_classes/words_array.rb#6
class NumbersAndWords::WordsArray < ::Array
  # source://numbers_and_words//lib/numbers_and_words/helper_classes/words_array.rb#7
  def join(options = T.unsafe(nil)); end

  # source://numbers_and_words//lib/numbers_and_words/helper_classes/words_array.rb#11
  def local_language(&block); end
end

# source://numbers_and_words//lib/numbers_and_words/wrappers/integer.rb#4
module NumbersAndWords::Wrappers; end

# source://numbers_and_words//lib/numbers_and_words/wrappers/float.rb#5
class NumbersAndWords::Wrappers::Float
  # @return [Float] a new instance of Float
  #
  # source://numbers_and_words//lib/numbers_and_words/wrappers/float.rb#10
  def initialize(number); end

  # Returns the value of attribute number.
  #
  # source://numbers_and_words//lib/numbers_and_words/wrappers/float.rb#8
  def number; end

  # Sets the attribute number
  #
  # @param value the value to set the attribute number to.
  #
  # source://numbers_and_words//lib/numbers_and_words/wrappers/float.rb#8
  def number=(_arg0); end

  # source://numbers_and_words//lib/numbers_and_words/wrappers/float.rb#14
  def to_words(options = T.unsafe(nil)); end

  private

  # source://numbers_and_words//lib/numbers_and_words/wrappers/float.rb#52
  def fractional_options; end

  # source://numbers_and_words//lib/numbers_and_words/wrappers/float.rb#34
  def fractional_part; end

  # @return [Boolean]
  #
  # source://numbers_and_words//lib/numbers_and_words/wrappers/float.rb#57
  def fractional_part_is_nil?; end

  # source://numbers_and_words//lib/numbers_and_words/wrappers/float.rb#44
  def fractional_part_with(options); end

  # source://numbers_and_words//lib/numbers_and_words/wrappers/float.rb#48
  def integral_options; end

  # source://numbers_and_words//lib/numbers_and_words/wrappers/float.rb#30
  def integral_part; end

  # source://numbers_and_words//lib/numbers_and_words/wrappers/float.rb#40
  def integral_part_with(options); end

  # Returns the value of attribute options.
  #
  # source://numbers_and_words//lib/numbers_and_words/wrappers/float.rb#24
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://numbers_and_words//lib/numbers_and_words/wrappers/float.rb#24
  def options=(_arg0); end

  # source://numbers_and_words//lib/numbers_and_words/wrappers/float.rb#26
  def parts; end

  # source://numbers_and_words//lib/numbers_and_words/wrappers/float.rb#61
  def precision; end
end

# source://numbers_and_words//lib/numbers_and_words/wrappers/float.rb#6
NumbersAndWords::Wrappers::Float::ZERO_SYMBOL = T.let(T.unsafe(nil), String)

# source://numbers_and_words//lib/numbers_and_words/wrappers/integer.rb#5
class NumbersAndWords::Wrappers::Integer
  # @return [Integer] a new instance of Integer
  #
  # source://numbers_and_words//lib/numbers_and_words/wrappers/integer.rb#8
  def initialize(number); end

  # Returns the value of attribute number.
  #
  # source://numbers_and_words//lib/numbers_and_words/wrappers/integer.rb#6
  def number; end

  # Sets the attribute number
  #
  # @param value the value to set the attribute number to.
  #
  # source://numbers_and_words//lib/numbers_and_words/wrappers/integer.rb#6
  def number=(_arg0); end

  # source://numbers_and_words//lib/numbers_and_words/wrappers/integer.rb#12
  def to_words(options = T.unsafe(nil)); end

  private

  # source://numbers_and_words//lib/numbers_and_words/wrappers/integer.rb#18
  def to_figures_array; end
end
