class ApplicationController < ActionController::Base
  @analytics: untyped

  @user_event_creator: untyped

  @decorated_sp_session: untyped

  @resolved_authn_context_result: untyped

  @current_sp: untyped

  @service_provider_request: untyped

  @skip_session_expiration: untyped

  @skip_session_load: untyped

  @mfa_policy: untyped

  @service_provider_mfa_policy: untyped

  include VerifyProfileConcern

  # include BackupCodeReminderConcern

  # include LocaleHelper

  # include VerifySpAttributesConcern

  # include SecondMfaReminderConcern

  # include TwoFactorAuthenticatableMethods

  # include AbTestingConcern

  def session_expires_at: () -> (nil | untyped)

  # for lograge
  def append_info_to_payload: (untyped payload) -> (nil | untyped)

  attr_writer analytics: untyped

  def analytics: () -> untyped

  def analytics_user: () -> untyped

  def user_event_creator: () -> untyped

  def decorated_sp_session: () -> untyped

  def default_url_options: () -> { locale: untyped, host: untyped }

  def sign_out: (*untyped args) -> untyped

  def resolved_authn_context_result: () -> untyped

  def context: () -> untyped

  def current_sp: () -> untyped

  private

  # These attributes show up in New Relic traces for all requests.
  # https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/collect-custom-attributes
  def add_new_relic_trace_attributes: () -> untyped

  def amzn_trace_id: () -> untyped

  def disable_caching: () -> untyped

  def cache_issuer_in_cookie: () -> (nil | untyped)

  def redirect_with_flash_if_timeout: () -> (nil | untyped)

  def permitted_timeout_params: () -> untyped

  def sp_from_sp_session: () -> (untyped | nil)

  def sp_from_request_id: () -> (untyped | nil)

  def sp_from_request_issuer_logout: () -> (nil | untyped)

  def service_provider_request: () -> untyped

  def fix_broken_personal_key_url: () -> untyped

  def after_sign_in_path_for: (untyped _user) -> untyped

  def signed_in_url: () -> untyped

  def after_mfa_setup_path: () -> untyped

  def user_needs_to_reactivate_account?: () -> (false | untyped)

  def user_recommended_for_piv_cac?: () -> untyped

  def user_already_has_piv?: () -> untyped

  def pending_profile_newer_than_password_reset_profile?: () -> (false | untyped)

  def invalid_auth_token: (untyped _exception) -> untyped

  def unsafe_redirect_error: (untyped _exception) -> untyped

  def user_fully_authenticated?: () -> untyped

  def confirm_two_factor_authenticated: () -> (untyped | true)

  def enforce_total_session_duration_timeout: () -> untyped

  def sign_out_with_timeout_error: () -> untyped

  def ensure_user_session_has_created_at: () -> (nil | untyped)

  def session_total_duration_expired?: () -> (nil | untyped)

  def prompt_to_setup_mfa: () -> untyped

  def prompt_to_verify_mfa: () -> untyped

  def prompt_to_verify_sp_required_mfa: () -> untyped

  def sp_required_mfa_verification_url: () -> untyped

  def two_factor_enabled?: () -> untyped

  # Prevent the session from being written back to the session store at the end of the request.
  def skip_session_commit: () -> untyped

  def skip_session_expiration: () -> untyped

  def skip_session_load: () -> untyped

  def set_locale: () -> untyped

  def pii_requested_but_locked?: () -> (untyped | nil)

  def mfa_policy: () -> untyped

  def service_provider_mfa_policy: () -> untyped

  def sp_session: () -> untyped

  # Retrieves the current service provider session hash's logged request URL, if present
  # Conditionally sets the final_auth_request service provider session attribute
  # when applicable (the original SP request is SAML)
  def sp_session_request_url_with_updated_params: () -> (nil | untyped)

  def render_not_found: () -> untyped

  def render_not_acceptable: () -> untyped

  def render_bad_request: () -> untyped

  def render_timeout: (untyped exception) -> untyped

  def render_full_width: (untyped template, **untyped opts) -> untyped

  def analytics_exception_info: (untyped exception) -> { backtrace: untyped, exception_message: untyped, exception_class: untyped }

  def mobile?: () -> untyped

  def user_is_banned?: () -> (false | untyped)

  def handle_banned_user: () -> (nil | untyped)
end