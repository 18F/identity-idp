# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `valid_email` gem.
# Please instead update this file by running `bin/tapioca gem valid_email`.


# source://valid_email//lib/valid_email/ban_disposable_email_validator.rb#4
class BanDisposableEmailValidator < ::ActiveModel::EachValidator
  # source://valid_email//lib/valid_email/ban_disposable_email_validator.rb#17
  def validate_each(record, attribute, value); end

  class << self
    # Required to use config outside
    #
    # source://valid_email//lib/valid_email/ban_disposable_email_validator.rb#11
    def config; end

    # A list of disposable email domains
    #
    # source://valid_email//lib/valid_email/ban_disposable_email_validator.rb#6
    def config=(options); end
  end
end

# source://valid_email//lib/valid_email/domain_validator.rb#5
class DomainValidator < ::ActiveModel::EachValidator
  # source://valid_email//lib/valid_email/domain_validator.rb#6
  def validate_each(record, attribute, value); end
end

# source://valid_email//lib/valid_email/email_validator.rb#4
class EmailValidator < ::ActiveModel::EachValidator
  # source://valid_email//lib/valid_email/email_validator.rb#5
  def validate_each(record, attribute, value); end
end

# source://valid_email//lib/valid_email/mx_validator.rb#5
class MxValidator < ::ActiveModel::EachValidator
  # source://valid_email//lib/valid_email/mx_validator.rb#12
  def validate_each(record, attribute, value); end

  class << self
    # source://valid_email//lib/valid_email/mx_validator.rb#6
    def config; end
  end
end

# source://valid_email//lib/valid_email/mx_with_fallback_validator.rb#3
class MxWithFallbackValidator < ::ActiveModel::EachValidator
  # source://valid_email//lib/valid_email/mx_with_fallback_validator.rb#4
  def validate_each(record, attribute, value); end
end

# source://valid_email//lib/valid_email/validate_email.rb#4
class ValidateEmail
  class << self
    # @return [Boolean]
    #
    # source://valid_email//lib/valid_email/validate_email.rb#125
    def ban_disposable_email?(value); end

    # @return [Boolean]
    #
    # source://valid_email//lib/valid_email/validate_email.rb#132
    def ban_partial_disposable_email?(value); end

    # @return [Boolean]
    #
    # source://valid_email//lib/valid_email/validate_email.rb#115
    def domain_valid?(value); end

    # @return [Boolean]
    #
    # source://valid_email//lib/valid_email/validate_email.rb#90
    def mx_valid?(value, fallback = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://valid_email//lib/valid_email/validate_email.rb#111
    def mx_valid_with_fallback?(value); end

    # @return [Boolean]
    #
    # source://valid_email//lib/valid_email/validate_email.rb#11
    def valid?(value, user_options = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://valid_email//lib/valid_email/validate_email.rb#65
    def valid_dot_atom?(dot_atom); end

    # @return [Boolean]
    #
    # source://valid_email//lib/valid_email/validate_email.rb#58
    def valid_local?(local); end
  end
end
