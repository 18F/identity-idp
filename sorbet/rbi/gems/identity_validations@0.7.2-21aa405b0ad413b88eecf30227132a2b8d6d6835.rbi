# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `identity_validations` gem.
# Please instead update this file by running `bin/tapioca gem identity_validations`.


# source://identity_validations//lib/identity_validations/version.rb#3
module IdentityValidations; end

# source://identity_validations//lib/identity_validations.rb#7
class IdentityValidations::Error < ::StandardError; end

# Applies consistent validations to service providers
#
# source://identity_validations//lib/identity_validations/service_provider_validation.rb#7
module IdentityValidations::ServiceProviderValidation
  private

  # source://identity_validations//lib/identity_validations/service_provider_validation.rb#56
  def acs_url_is_parsable; end

  # source://identity_validations//lib/identity_validations/service_provider_validation.rb#62
  def assertion_consumer_logout_service_url_is_parsable; end

  # source://identity_validations//lib/identity_validations/service_provider_validation.rb#117
  def cert_content(cert); end

  # source://identity_validations//lib/identity_validations/service_provider_validation.rb#69
  def certs_are_x509_if_present; end

  # @return [Boolean]
  #
  # source://identity_validations//lib/identity_validations/service_provider_validation.rb#113
  def custom_uri?(uri); end

  # source://identity_validations//lib/identity_validations/service_provider_validation.rb#44
  def failure_to_proof_url_is_parsable; end

  # Not a strict definition of native uri, but a catch-all
  # to ensure we have the bare minimum
  #
  # @return [Boolean]
  #
  # source://identity_validations//lib/identity_validations/service_provider_validation.rb#109
  def native_uri?(uri); end

  # source://identity_validations//lib/identity_validations/service_provider_validation.rb#50
  def push_notification_url_is_parsable; end

  # source://identity_validations//lib/identity_validations/service_provider_validation.rb#33
  def redirect_uris_are_parsable; end

  # @return [Boolean]
  #
  # source://identity_validations//lib/identity_validations/service_provider_validation.rb#99
  def unsupported_uri?(uri); end

  # @return [Boolean]
  #
  # source://identity_validations//lib/identity_validations/service_provider_validation.rb#89
  def uri_custom_scheme_only?(uri); end

  # @return [Boolean]
  #
  # source://identity_validations//lib/identity_validations/service_provider_validation.rb#80
  def uri_valid?(uri); end

  # @return [Boolean]
  #
  # source://identity_validations//lib/identity_validations/service_provider_validation.rb#103
  def web_uri?(uri); end

  class << self
    # @private
    #
    # source://identity_validations//lib/identity_validations/service_provider_validation.rb#8
    def included(base); end
  end
end

# Note: We no longer have strong validation of the issuer string.
#         We used to require that the issuer matched this format:
#         'urn:gov:gsa:<protocol>:2.0.profiles:sp:sso:<agency>:<app name>'
#         However, it was too restrictive for many COTS applications. Now,
#         we just enforce uniqueness, without whitespace.
#
# source://identity_validations//lib/identity_validations/service_provider_validation.rb#31
IdentityValidations::ServiceProviderValidation::ISSUER_FORMAT_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://identity_validations//lib/identity_validations/version.rb#4
IdentityValidations::VERSION = T.let(T.unsafe(nil), String)
