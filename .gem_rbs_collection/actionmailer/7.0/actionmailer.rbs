module ActionMailer
  class Base < AbstractController::Base
    include AbstractController::Rendering
    include AbstractController::Helpers
    extend AbstractController::Helpers::ClassMethods
    include AbstractController::Translation
    include AbstractController::AssetPaths
    include AbstractController::Callbacks
    extend AbstractController::Callbacks::ClassMethods
    include AbstractController::Caching
    extend AbstractController::Caching::ClassMethods

    include ActionView::Layouts
    extend ActionView::Layouts::ClassMethods

    def self.default: (**untyped) -> void

    def self.layout: (String) -> void

    def mail: (**untyped) ?{ (untyped) -> void } -> Mail::Message

    def self.with: (**untyped) -> untyped

    def params: () -> Hash[untyped, untyped]

    def self?.email_address_with_name: (String, String) -> String

    def headers: () -> Mail::Message
               | (Hash[untyped, untyped]) -> untyped

    private

    def default_i18n_subject: (?Hash[untyped, untyped] interpolations) -> String
  end

  class MessageDelivery
    def deliver_later: (?wait: untyped, ?wait_until: untyped, ?queue: untyped, ?priority: Integer) -> void

    def deliver_now: () -> void

    def deliver_now!: () -> void

    def message: () -> Mail::Message

    def processed: () -> bool
  end
end
