# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `redis-session-store` gem.
# Please instead update this file by running `bin/tapioca gem redis-session-store`.


# Redis session storage for Rails, and for Rails only. Derived from
# the MemCacheStore code, simply dropping in Redis instead.
#
# source://redis-session-store//lib/redis-session-store.rb#7
class RedisSessionStore < ::ActionDispatch::Session::AbstractSecureStore
  # ==== Options
  # * +:key+ - Same as with the other cookie stores, key name
  # * +:redis+ - A hash with redis-specific options
  #   * +:url+ - Redis url, default is redis://localhost:6379/0
  #   * +:key_prefix+ - Prefix for keys used in Redis, e.g. +myapp:+
  #   * +:ttl+ - Default Redis TTL for sessions
  #   * +:client+ - Connect to Redis with given object rather than create one
  #   * +:client_pool:+ - Connect to Redis with a ConnectionPool
  # * +:on_redis_down:+ - Called with err, env, and SID on Errno::ECONNREFUSED
  # * +:on_session_load_error:+ - Called with err and SID on Marshal.load fail
  # * +:serializer:+ - Serializer to use on session data, default is :marshal.
  #
  # ==== Examples
  #
  #     Rails.application.config.session_store :redis_session_store,
  #       key: 'your_session_key',
  #       redis: {
  #         ttl: 120.minutes,
  #         key_prefix: 'myapp:session:',
  #         url: 'redis://localhost:6379/0'
  #       },
  #       on_redis_down: ->(*a) { logger.error("Redis down! #{a.inspect}") },
  #       serializer: :hybrid # migrate from Marshal to JSON
  #
  # @return [RedisSessionStore] a new instance of RedisSessionStore
  #
  # source://redis-session-store//lib/redis-session-store.rb#34
  def initialize(app, options = T.unsafe(nil)); end

  # Returns the value of attribute on_redis_down.
  #
  # source://redis-session-store//lib/redis-session-store.rb#65
  def on_redis_down; end

  # Sets the attribute on_redis_down
  #
  # @param value the value to set the attribute on_redis_down to.
  #
  # source://redis-session-store//lib/redis-session-store.rb#65
  def on_redis_down=(_arg0); end

  # Returns the value of attribute on_session_load_error.
  #
  # source://redis-session-store//lib/redis-session-store.rb#65
  def on_session_load_error; end

  # Sets the attribute on_session_load_error
  #
  # @param value the value to set the attribute on_session_load_error to.
  #
  # source://redis-session-store//lib/redis-session-store.rb#65
  def on_session_load_error=(_arg0); end

  private

  # source://redis-session-store//lib/redis-session-store.rb#93
  def create_sid(req); end

  # source://redis-session-store//lib/redis-session-store.rb#127
  def decode(data); end

  # Returns the value of attribute default_options.
  #
  # source://redis-session-store//lib/redis-session-store.rb#69
  def default_options; end

  # Returns the value of attribute default_redis_ttl.
  #
  # source://redis-session-store//lib/redis-session-store.rb#69
  def default_redis_ttl; end

  # @api public
  #
  # source://redis-session-store//lib/redis-session-store.rb#179
  def delete_session(req, sid, options); end

  # source://redis-session-store//lib/redis-session-store.rb#189
  def delete_session_from_redis(redis_connection, sid, req, options); end

  # source://redis-session-store//lib/redis-session-store.rb#199
  def determine_serializer(serializer); end

  # source://redis-session-store//lib/redis-session-store.rb#174
  def encode(session_data); end

  # @api public
  #
  # source://redis-session-store//lib/redis-session-store.rb#99
  def find_session(req, sid); end

  # Returns the value of attribute key.
  #
  # source://redis-session-store//lib/redis-session-store.rb#69
  def key; end

  # source://redis-session-store//lib/redis-session-store.rb#108
  def load_session_from_redis(redis_connection, req, sid); end

  # source://redis-session-store//lib/redis-session-store.rb#80
  def prefixed(sid); end

  # source://redis-session-store//lib/redis-session-store.rb#88
  def prefixed_public_id(sid); end

  # Returns the value of attribute read_private_id.
  #
  # source://redis-session-store//lib/redis-session-store.rb#69
  def read_private_id; end

  # Returns the value of attribute read_public_id.
  #
  # source://redis-session-store//lib/redis-session-store.rb#69
  def read_public_id; end

  # Returns the value of attribute redis_pool.
  #
  # source://redis-session-store//lib/redis-session-store.rb#69
  def redis_pool; end

  # Returns the value of attribute serializer.
  #
  # source://redis-session-store//lib/redis-session-store.rb#69
  def serializer; end

  # Returns the value of attribute single_redis.
  #
  # source://redis-session-store//lib/redis-session-store.rb#69
  def single_redis; end

  # source://redis-session-store//lib/redis-session-store.rb#72
  def verify_handlers!; end

  # Consistent interface for a redis instance from a pool
  #
  # @yield [Redis]
  #
  # source://redis-session-store//lib/redis-session-store.rb#210
  def with_redis_connection(default_rescue_value: T.unsafe(nil)); end

  # Returns the value of attribute write_private_id.
  #
  # source://redis-session-store//lib/redis-session-store.rb#69
  def write_private_id; end

  # Returns the value of attribute write_public_id.
  #
  # source://redis-session-store//lib/redis-session-store.rb#69
  def write_public_id; end

  # source://redis-session-store//lib/redis-session-store.rb#160
  def write_redis_session(key, data, expiry: T.unsafe(nil), new_session: T.unsafe(nil)); end

  # @api public
  #
  # source://redis-session-store//lib/redis-session-store.rb#132
  def write_session(req, sid, session_data, options = T.unsafe(nil)); end
end

# Uses built-in JSON library to encode/decode session
#
# source://redis-session-store//lib/redis-session-store.rb#224
class RedisSessionStore::JsonSerializer
  class << self
    # source://redis-session-store//lib/redis-session-store.rb#229
    def dump(value); end

    # source://redis-session-store//lib/redis-session-store.rb#225
    def load(value); end
  end
end

# source://redis-session-store//lib/redis-session-store.rb#8
RedisSessionStore::VERSION = T.let(T.unsafe(nil), String)
