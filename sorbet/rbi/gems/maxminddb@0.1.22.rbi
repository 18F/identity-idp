# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `maxminddb` gem.
# Please instead update this file by running `bin/tapioca gem maxminddb`.


# source://maxminddb//lib/maxminddb/version.rb#1
module MaxMindDB
  class << self
    # source://maxminddb//lib/maxminddb.rb#16
    def new(path, file_reader = T.unsafe(nil)); end
  end
end

# source://maxminddb//lib/maxminddb.rb#20
class MaxMindDB::Client
  # @return [Client] a new instance of Client
  #
  # source://maxminddb//lib/maxminddb.rb#31
  def initialize(path, file_reader = T.unsafe(nil)); end

  # source://maxminddb//lib/maxminddb.rb#46
  def inspect; end

  # An IP that is used instead of local IPs
  #
  # source://maxminddb//lib/maxminddb.rb#29
  def local_ip_alias; end

  # An IP that is used instead of local IPs
  #
  # source://maxminddb//lib/maxminddb.rb#29
  def local_ip_alias=(_arg0); end

  # source://maxminddb//lib/maxminddb.rb#50
  def lookup(ip_or_hostname); end

  # Returns the value of attribute metadata.
  #
  # source://maxminddb//lib/maxminddb.rb#26
  def metadata; end

  private

  # source://maxminddb//lib/maxminddb.rb#180
  def addr_from_ip(ip_or_hostname); end

  # source://maxminddb//lib/maxminddb.rb#92
  def decode(pos, base_pos); end

  # @return [Boolean]
  #
  # source://maxminddb//lib/maxminddb.rb#201
  def is_local?(ip_or_hostname); end

  # source://maxminddb//lib/maxminddb.rb#191
  def network_from_addr(addr, i); end

  # source://maxminddb//lib/maxminddb.rb#78
  def read_record(node_no, flag); end

  # source://maxminddb//lib/maxminddb.rb#175
  def read_value(pos, base_pos, size); end
end

# source://maxminddb//lib/maxminddb.rb#22
MaxMindDB::Client::DATA_SECTION_SEPARATOR_SIZE = T.let(T.unsafe(nil), Integer)

# source://maxminddb//lib/maxminddb.rb#21
MaxMindDB::Client::METADATA_BEGIN_MARKER = T.let(T.unsafe(nil), String)

# source://maxminddb//lib/maxminddb.rb#24
MaxMindDB::Client::POINTER_BASE_VALUES = T.let(T.unsafe(nil), Array)

# source://maxminddb//lib/maxminddb.rb#23
MaxMindDB::Client::SIZE_BASE_VALUES = T.let(T.unsafe(nil), Array)

# The default reader for MaxMindDB files. Reads the database into memory.
# This creates a higher memory overhead, but faster lookup times.
#
# source://maxminddb//lib/maxminddb.rb#10
MaxMindDB::DEFAULT_FILE_READER = T.let(T.unsafe(nil), Proc)

# A low memory file reader for MaxMindDB files. Avoids reading the database
# into memory. Has a lower memory footprint but slower lookup times.
#
# source://maxminddb//lib/maxminddb.rb#14
MaxMindDB::LOW_MEMORY_FILE_READER = T.let(T.unsafe(nil), Proc)

# source://maxminddb//lib/maxminddb/reader.rb#5
class MaxMindDB::LowMemoryReader
  # @return [LowMemoryReader] a new instance of LowMemoryReader
  #
  # source://maxminddb//lib/maxminddb/reader.rb#8
  def initialize(path); end

  # source://maxminddb//lib/maxminddb/reader.rb#13
  def [](pos, length = T.unsafe(nil)); end

  # source://maxminddb//lib/maxminddb/reader.rb#25
  def atomic_read(length, pos); end

  # source://maxminddb//lib/maxminddb/reader.rb#17
  def rindex(search); end
end

# source://maxminddb//lib/maxminddb/reader.rb#6
MaxMindDB::LowMemoryReader::METADATA_MAX_SIZE = T.let(T.unsafe(nil), Integer)

# source://maxminddb//lib/maxminddb/result/location.rb#2
class MaxMindDB::Result
  # @return [Result] a new instance of Result
  #
  # source://maxminddb//lib/maxminddb/result.rb#9
  def initialize(raw); end

  # source://maxminddb//lib/maxminddb/result.rb#13
  def [](attr); end

  # source://maxminddb//lib/maxminddb/result.rb#17
  def city; end

  # source://maxminddb//lib/maxminddb/result.rb#57
  def connection_type; end

  # source://maxminddb//lib/maxminddb/result.rb#21
  def continent; end

  # source://maxminddb//lib/maxminddb/result.rb#25
  def country; end

  # @return [Boolean]
  #
  # source://maxminddb//lib/maxminddb/result.rb#29
  def found?; end

  # source://maxminddb//lib/maxminddb/result.rb#33
  def location; end

  # source://maxminddb//lib/maxminddb/result.rb#61
  def network; end

  # source://maxminddb//lib/maxminddb/result.rb#37
  def postal; end

  # source://maxminddb//lib/maxminddb/result.rb#41
  def registered_country; end

  # source://maxminddb//lib/maxminddb/result.rb#45
  def represented_country; end

  # source://maxminddb//lib/maxminddb/result.rb#49
  def subdivisions; end

  # source://maxminddb//lib/maxminddb/result.rb#65
  def to_hash; end

  # source://maxminddb//lib/maxminddb/result.rb#53
  def traits; end

  private

  # Returns the value of attribute raw.
  #
  # source://maxminddb//lib/maxminddb/result.rb#71
  def raw; end
end

# source://maxminddb//lib/maxminddb/result/location.rb#3
class MaxMindDB::Result::Location
  # @return [Location] a new instance of Location
  #
  # source://maxminddb//lib/maxminddb/result/location.rb#4
  def initialize(raw); end

  # source://maxminddb//lib/maxminddb/result/location.rb#24
  def accuracy_radius; end

  # source://maxminddb//lib/maxminddb/result/location.rb#8
  def latitude; end

  # source://maxminddb//lib/maxminddb/result/location.rb#12
  def longitude; end

  # source://maxminddb//lib/maxminddb/result/location.rb#16
  def metro_code; end

  # source://maxminddb//lib/maxminddb/result/location.rb#20
  def time_zone; end

  private

  # Returns the value of attribute raw.
  #
  # source://maxminddb//lib/maxminddb/result/location.rb#30
  def raw; end
end

# source://maxminddb//lib/maxminddb/result/named_location.rb#3
class MaxMindDB::Result::NamedLocation
  # @return [NamedLocation] a new instance of NamedLocation
  #
  # source://maxminddb//lib/maxminddb/result/named_location.rb#4
  def initialize(raw); end

  # source://maxminddb//lib/maxminddb/result/named_location.rb#8
  def code; end

  # source://maxminddb//lib/maxminddb/result/named_location.rb#12
  def geoname_id; end

  # source://maxminddb//lib/maxminddb/result/named_location.rb#16
  def is_in_european_union; end

  # source://maxminddb//lib/maxminddb/result/named_location.rb#20
  def iso_code; end

  # source://maxminddb//lib/maxminddb/result/named_location.rb#24
  def name(locale = T.unsafe(nil)); end

  private

  # Returns the value of attribute raw.
  #
  # source://maxminddb//lib/maxminddb/result/named_location.rb#30
  def raw; end
end

# source://maxminddb//lib/maxminddb/result/postal.rb#3
class MaxMindDB::Result::Postal
  # @return [Postal] a new instance of Postal
  #
  # source://maxminddb//lib/maxminddb/result/postal.rb#4
  def initialize(raw); end

  # source://maxminddb//lib/maxminddb/result/postal.rb#8
  def code; end

  private

  # Returns the value of attribute raw.
  #
  # source://maxminddb//lib/maxminddb/result/postal.rb#14
  def raw; end
end

# source://maxminddb//lib/maxminddb/result/subdivisions.rb#3
class MaxMindDB::Result::Subdivisions < ::Array
  # @return [Subdivisions] a new instance of Subdivisions
  #
  # source://maxminddb//lib/maxminddb/result/subdivisions.rb#4
  def initialize(raw); end

  # source://maxminddb//lib/maxminddb/result/subdivisions.rb#12
  def inspect; end

  # source://maxminddb//lib/maxminddb/result/subdivisions.rb#8
  def most_specific; end
end

# source://maxminddb//lib/maxminddb/result/traits.rb#3
class MaxMindDB::Result::Traits
  # @return [Traits] a new instance of Traits
  #
  # source://maxminddb//lib/maxminddb/result/traits.rb#4
  def initialize(raw); end

  # source://maxminddb//lib/maxminddb/result/traits.rb#8
  def is_anonymous_proxy; end

  # source://maxminddb//lib/maxminddb/result/traits.rb#12
  def is_satellite_provider; end

  private

  # Returns the value of attribute raw.
  #
  # source://maxminddb//lib/maxminddb/result/traits.rb#18
  def raw; end
end

# source://maxminddb//lib/maxminddb/version.rb#2
MaxMindDB::VERSION = T.let(T.unsafe(nil), String)
