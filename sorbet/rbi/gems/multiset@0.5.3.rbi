# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `multiset` gem.
# Please instead update this file by running `bin/tapioca gem multiset`.


# source://multiset//lib/multimap.rb#458
class Hash
  include ::Enumerable

  # Generates multiset from <code>self</code>.
  # In generated multiset, only one value is associated with a key
  # (value in <code>self</code>).
  #
  # <code>self</code>を多重連想配列に変換し、その結果を返します。
  # 新しく生成される多重連想配列においてキーに割り当てられる値は、
  # <code>self</code>に含まれる1要素のみです。
  #
  # source://multiset//lib/multimap.rb#491
  def multimap; end

  # Generates multiset from <code>self</code>.
  # In generated multiset, values associated with a key are defined by
  # the result of Multiset.parse(values_in_<code>self</code>) .
  #
  # (example)
  # Key <code>:a</code> is associated with values one <code>:x</code> and one <code>:y</code>, and
  # key <code>:b</code> is associated with values two <code>:x</code>
  #
  # <code>{:a => [:x, :y], :b => [:x, :x]}.to_multimap</code>
  #
  # <code>self</code>を多重連想配列に変換し、その結果を返します。
  # 新しく生成される多重連想配列においてキーに割り当てられる値は、
  # <code>self</code>におけるキーの値をMultiset.parseによって多重集合に
  # 変換したものとなります。
  #
  # （例）キー<code>:a</code>には<code>:x</code>と<code>:y</code>が1個ずつ、
  # キー<code>:b</code>には<code>:x</code>が2個割り当てられた多重連想配列
  #
  # <code>{:a => [:x, :y], :b => [:x, :x]}.to_multimap</code>
  #
  # source://multiset//lib/multimap.rb#478
  def to_multimap; end

  # Generates multiset from <code>self</code>.
  # Keys of the Hash are treated as items in the multiset,
  # while values of the Hash are number of items.
  #
  # (example) <code>{:a => 4, :b => 2}.to_multiset # Multiset with four :a's and two :b's</code>
  #
  # <code>self</code>を多重集合に変換し、その結果を返します。
  # Hashのキーを要素、Hashの値をその要素の要素数とします。
  #
  # （例）<code>{:a => 4, :b => 2}.to_multiset # :aを4個、:bを2個含む多重集合</code>
  #
  # source://multiset//lib/multiset.rb#1182
  def to_multiset; end
end

# ==概要(Basic information)
#
# Ruby implementation of multimap.
# Unlike ordinary map, also known as associative array
# (see Ruby documentation for "Hash" class),
# multimap can contain two or more items for a key.
#
# Methods' names are basically consistent with those of Hash class.
#
# Rubyによる多重連想配列（マルチマップ）の実装です。
# 通常の連想配列（Rubyでは"Hash"クラス）と異なり、多重連想配列は
# 1つのキーに対して複数の要素が存在し得ます。
#
# メソッド名は基本的にHashクラスに合わせてあります。
#
# source://multiset//lib/multimap.rb#21
class Multimap
  include ::Enumerable

  # Generates a new multimap. Different from Hash#new , you cannot
  # specify default value.
  #
  # 新しい多重連想配列を生成します。Hash#newと異なり、デフォルト値は
  # 設定できません。
  #
  # @return [Multimap] a new instance of Multimap
  #
  # source://multiset//lib/multimap.rb#33
  def initialize; end

  # Returns merged multiset of <code>self</code> and <code>other</code>.
  #
  # <code>self</code>と<code>other</code>の要素を合わせた多重集合を返します。
  #
  # source://multiset//lib/multimap.rb#417
  def +(other); end

  # Returns whether <code>self</code> is equal to <code>other</code>.
  #
  # <code>self</code>が<code>other</code>と等しいかどうかを返します。
  #
  # source://multiset//lib/multimap.rb#85
  def ==(other); end

  # Returns values associated with <code>key</code>, which may exist
  # two or more, by the format of Multiset.
  # If <code>key</code> has not associated with any value,
  # Multimap#fetch returns empty Multiset.
  # Different from Hash#fetch, you cannot specify
  # a value or a process when <code>key</code> has not associated with
  # any value.
  #
  # キー<code>key</code>に対応する値（複数存在しうる）を、
  # Multisetとして返します。
  # キーに対応する値が存在しない場合、空のMultisetが返ります。
  # Hash#fetchの場合と異なり、キーに対応する値が存在しない場合の扱いを
  # 指定することはできません。
  #
  # source://multiset//lib/multimap.rb#57
  def [](key); end

  # Sets values associated with <code>key</code> to <code>value_list</code>.
  # <code>value_list</code> is converted to a Multiset by Multiset.parse .
  #
  # Returns <code>value_list</code>.
  #
  # キー<code>key</code>に対応する値（複数存在しうる）を
  # <code>value_list</code>で置き換えます。この際、
  # <code>value_list</code>はMultiset.parseを用いてMultisetに変換されます。
  #
  # <code>value_list</code>を返します。
  #
  # source://multiset//lib/multimap.rb#72
  def []=(key, value_list); end

  # Removes all elements stored in <code>self</code>.
  # Returns <code>self</code>.
  #
  # <code>self</code>に格納された要素をすべて削除します。
  # <code>self</code>を返します。
  #
  # source://multiset//lib/multimap.rb#104
  def clear; end

  # Deletes all values associated with <code>key</code>, and returns
  # those values as a Multiset.
  #
  # <code>key</code>に割り当てられた全ての値を削除し、その値を
  # Multisetとして返します。
  #
  # source://multiset//lib/multimap.rb#133
  def delete(key); end

  # Gives all pairs of a key and single value in <code>self</code>
  # to given block, and deletes that element if the block returns true.
  # Returns <code>self</code>.
  #
  # ブロックに<code>self</code>のキーと値の組（値は1つ）を順次与え、
  # 結果が真であった組をすべて削除します。
  # <code>self</code>を返します。
  #
  # source://multiset//lib/multimap.rb#159
  def delete_if(&block); end

  # Same as Multimap#delete_if except that arguments given to block is the following three:
  # (key, single value associated with the key, numbers of that value
  # associated with the key).
  #
  # Multimap#delete_ifと同じですが、ブロックへの引数が（キー、キーに割り当てられた値、
  # その値がキーに割り当てられている個数）の3つの組で与えられます。
  #
  # source://multiset//lib/multimap.rb#203
  def delete_with(&block); end

  # Returns duplicated <code>self</code>.
  #
  # <code>self</code>の複製を生成して返します。
  #
  # source://multiset//lib/multimap.rb#111
  def dup; end

  # Iterates for each pair of a key and a value in <code>self</code>.
  # Returns <code>self</code>.
  #
  # <code>self</code>のすべてのキーと値の組について繰り返します。
  # <code>self</code>を返します。
  #
  # source://multiset//lib/multimap.rb#218
  def each; end

  # Iterates for each key in <code>self</code>. Returns <code>self</code>.
  #
  # <code>self</code>のすべてのキーについて繰り返します。
  # <code>self</code>を返します。
  #
  # source://multiset//lib/multimap.rb#272
  def each_key(&block); end

  # Iterates for each pair of a key and a value in <code>self</code>.
  # Returns <code>self</code>.
  #
  # <code>self</code>のすべてのキーと値の組について繰り返します。
  # <code>self</code>を返します。
  #
  # source://multiset//lib/multimap.rb#218
  def each_pair; end

  # Iterates for each pair of a key and all values associated with the key
  # (list of values is given as Multiset) in <code>self</code>.
  # Returns <code>self</code>.
  #
  # <code>self</code>のすべてのキーと、そのキーに割り当てられた
  # すべての値（Multisetで与えられる）の組について繰り返します。
  # <code>self</code>を返します。
  #
  # source://multiset//lib/multimap.rb#262
  def each_pair_list(&block); end

  # Iterates for each pair of a key and a value in <code>self</code>,
  # giving the following three to block:
  # (key, single value associated with the key, numbers of that value
  # associated with the key). Returns <code>self</code>.
  #
  # <code>self</code>のすべてのキーと値の組について、
  # ブロックに（キー、キーに割り当てられた値、その値が割り当てられた数）
  # の組を与えながら繰り返します。<code>self</code>を返します。
  #
  # source://multiset//lib/multimap.rb#241
  def each_pair_with; end

  # Iterates for each value in <code>self</code>. Returns <code>self</code>.
  #
  # <code>self</code>のすべての値について繰り返します。
  # <code>self</code>を返します。
  #
  # source://multiset//lib/multimap.rb#285
  def each_value(&block); end

  # Returns whether <code>self</code> has no element.
  #
  # <code>self</code>に要素がないかどうかを返します。
  #
  # @return [Boolean]
  #
  # source://multiset//lib/multimap.rb#321
  def empty?; end

  # Returns values associated with <code>key</code>, which may exist
  # two or more, by the format of Multiset.
  # If <code>key</code> has not associated with any value,
  # Multimap#fetch returns empty Multiset.
  # Different from Hash#fetch, you cannot specify
  # a value or a process when <code>key</code> has not associated with
  # any value.
  #
  # キー<code>key</code>に対応する値（複数存在しうる）を、
  # Multisetとして返します。
  # キーに対応する値が存在しない場合、空のMultisetが返ります。
  # Hash#fetchの場合と異なり、キーに対応する値が存在しない場合の扱いを
  # 指定することはできません。
  #
  # source://multiset//lib/multimap.rb#57
  def fetch(key); end

  # Returns whether <code>self</code> has a key <code>key</code>.
  #
  # <code>self</code>にキー<code>key</code>かあるかどうかを返します。
  #
  # @return [Boolean]
  #
  # source://multiset//lib/multimap.rb#329
  def has_key?(key); end

  # Returns whether <code>self</code> has a value <code>value</code>.
  #
  # <code>self</code>に値<code>value</code>かあるかどうかを返します。
  #
  # @return [Boolean]
  #
  # source://multiset//lib/multimap.rb#340
  def has_value?(value); end

  # Returns whether <code>self</code> has a key <code>key</code>.
  #
  # <code>self</code>にキー<code>key</code>かあるかどうかを返します。
  #
  # @return [Boolean]
  #
  # source://multiset//lib/multimap.rb#329
  def include?(key); end

  # Search a pair of key and value from <code>self</code> such that
  # the value is equal to the argument <code>value</code>.
  # If two or keys are matched, returns one of them.
  # If no key is matched, returns nil.
  #
  # <code>self</code>から値が<code>value</code>であるような要素を
  # 検索し、それに対応するキーを返します。該当するキーが複数存在する場合、
  # そのうちの1つを返します。該当するキーが存在しなければ
  # <code>nil</code>を返します。
  #
  # source://multiset//lib/multimap.rb#354
  def index(value); end

  # Retrieves values (instances of Multiset) of <code>self</code>
  # associated with <code>key_list</code>, and returns those values
  # as an array. i.e. returns an array whose elements are multisets.
  #
  # <code>self</code>から<code>key_list</code>の各キーに対応する値
  # （Multiset型）を取り出し、それらを配列として返します。
  # すなわち、Multisetを要素とする配列を返します。
  #
  # source://multiset//lib/multimap.rb#369
  def indexes(*key_list); end

  # Retrieves values (instances of Multiset) of <code>self</code>
  # associated with <code>key_list</code>, and returns those values
  # as an array. i.e. returns an array whose elements are multisets.
  #
  # <code>self</code>から<code>key_list</code>の各キーに対応する値
  # （Multiset型）を取り出し、それらを配列として返します。
  # すなわち、Multisetを要素とする配列を返します。
  #
  # source://multiset//lib/multimap.rb#369
  def indices(*key_list); end

  # source://multiset//lib/multimap.rb#450
  def inspect; end

  # Returns a Multimap whose keys are values in <code>self</code>, and
  # values are keys in <code>self</code>. For example,
  # If <code>self</code> has a key :a associated with two :x and one :y,
  # returned multimap has two keys :x and :y, and their values are
  # two :a and one :a respectively.
  #
  # <code>self</code>のキーと値を入れ替えたMultimapを返します。
  # 例えばキー:aに対応する値が2つの:xと1つの:yであれば、変換結果は
  # キー:xに:aが2つ、キー:yに:aが1つ対応するMultimapです。
  #
  # source://multiset//lib/multimap.rb#384
  def invert; end

  # Search a pair of key and value from <code>self</code> such that
  # the value is equal to the argument <code>value</code>.
  # If two or keys are matched, returns one of them.
  # If no key is matched, returns nil.
  #
  # <code>self</code>から値が<code>value</code>であるような要素を
  # 検索し、それに対応するキーを返します。該当するキーが複数存在する場合、
  # そのうちの1つを返します。該当するキーが存在しなければ
  # <code>nil</code>を返します。
  #
  # source://multiset//lib/multimap.rb#354
  def key(value); end

  # Returns whether <code>self</code> has a key <code>key</code>.
  #
  # <code>self</code>にキー<code>key</code>かあるかどうかを返します。
  #
  # @return [Boolean]
  #
  # source://multiset//lib/multimap.rb#329
  def key?(key); end

  # Returns an array in which keys in <code>self</code> are stored.
  #
  # <code>self</code>のすべてのキーを、配列として返します。
  #
  # source://multiset//lib/multimap.rb#300
  def keys; end

  # Returns number of all elements in <code>self</code>.
  #
  # <code>self</code>に含まれている要素数を返します。
  #
  # source://multiset//lib/multimap.rb#395
  def length; end

  # Returns whether <code>self</code> has a key <code>key</code>.
  #
  # <code>self</code>にキー<code>key</code>かあるかどうかを返します。
  #
  # @return [Boolean]
  #
  # source://multiset//lib/multimap.rb#329
  def member?(key); end

  # Returns merged multiset of <code>self</code> and <code>other</code>.
  #
  # <code>self</code>と<code>other</code>の要素を合わせた多重集合を返します。
  #
  # source://multiset//lib/multimap.rb#417
  def merge(other); end

  # Add elements in <code>other</code> to <code>self</code>.
  # Returns <code>self</code>.
  #
  # <code>self</code>に<code>other</code>の要素を追加します。
  # <code>self</code>を返します。
  #
  # source://multiset//lib/multimap.rb#407
  def merge!(other); end

  # Same as Multimap#delete_if except that, rather than deleting key-value pairs in
  # <code>self</code>, this generates a new Multimap with specified
  # key-value pairs are deleted.
  #
  # Multimap#delete_ifと似ますが、<code>self</code>自身からはキーと値の組を
  # 削除せず、要素が削除された結果の多重連想配列を新たに生成して
  # 返します。
  #
  # source://multiset//lib/multimap.rb#146
  def reject(&block); end

  # Same as Multimap#delete_if except that <code>nil</code> is returned
  # if no key-value pair is deleted.
  #
  # Multimap#delete_ifと似ますが、キーと値の組が1つも削除されなければ
  # <code>nil</code>を返します。
  #
  # source://multiset//lib/multimap.rb#174
  def reject!(&block); end

  # Same as Multimap#reject except that arguments given to block is the following three:
  # (key, single value associated with the key, numbers of that value
  # associated with the key).
  #
  # Multimap#rejectと似ますが、ブロックへの引数が（キー、キーに割り当てられた値、
  # その値がキーに割り当てられている個数）の3つの組で与えられます。
  #
  # source://multiset//lib/multimap.rb#191
  def reject_with(&block); end

  # Replaces <code>self</code> by <code>other</code>.
  # Returns <code>self</code>.
  #
  # <code>self</code>の内容を<code>other</code>のものに置き換えます。
  # <code>self</code>を返します。
  #
  # source://multiset//lib/multimap.rb#120
  def replace(other); end

  # Returns number of all elements in <code>self</code>.
  #
  # <code>self</code>に含まれている要素数を返します。
  #
  # source://multiset//lib/multimap.rb#395
  def size; end

  # Sets values associated with <code>key</code> to <code>value_list</code>.
  # <code>value_list</code> is converted to a Multiset by Multiset.parse .
  #
  # Returns <code>value_list</code>.
  #
  # キー<code>key</code>に対応する値（複数存在しうる）を
  # <code>value_list</code>で置き換えます。この際、
  # <code>value_list</code>はMultiset.parseを用いてMultisetに変換されます。
  #
  # <code>value_list</code>を返します。
  #
  # source://multiset//lib/multimap.rb#72
  def store(key, value_list); end

  # Converts <code>self</code> to a <code>Hash</code>
  # whose values in the Hash are all multimaps.
  #
  # <code>self</code>を<code>Hash</code>に変換して返します。
  # 返されるHash中において、値はすべてMultimap型となります。
  #
  # source://multiset//lib/multimap.rb#95
  def to_hash; end

  # source://multiset//lib/multimap.rb#423
  def to_s(delim = T.unsafe(nil)); end

  # Returns whether <code>self</code> has a value <code>value</code>.
  #
  # <code>self</code>に値<code>value</code>かあるかどうかを返します。
  #
  # @return [Boolean]
  #
  # source://multiset//lib/multimap.rb#340
  def value?(value); end

  # Returns a Multiset in which values in <code>self</code> are stored.
  #
  # <code>self</code>のすべての値を、Multisetとして返します。
  #
  # source://multiset//lib/multimap.rb#309
  def values; end

  # Retrieves values (instances of Multiset) of <code>self</code>
  # associated with <code>key_list</code>, and returns those values
  # as an array. i.e. returns an array whose elements are multisets.
  #
  # <code>self</code>から<code>key_list</code>の各キーに対応する値
  # （Multiset型）を取り出し、それらを配列として返します。
  # すなわち、Multisetを要素とする配列を返します。
  #
  # source://multiset//lib/multimap.rb#369
  def values_at(*key_list); end

  private

  # Removes all keys in @assoc if the value associated with key is
  # empty multiset.
  #
  # source://multiset//lib/multimap.rb#39
  def cleanup; end
end

# ==Basic information 概要
#
# A Ruby implementation of multiset.
# Unlike ordinary set (see Ruby documentation for "set" library),
# multiset can contain two or more same items.
#
# Methods' names are basically consistent with those of Set class.
#
# * <code>Set[:a,:b,:c,:b,:b,:c] => #<Set: {:b, :c, :a}></code>
# * <code>Multiset[:a,:b,:c,:b,:b,:c] => #<Multiset:<tt>#</tt>3 :b, <tt>#</tt>2 :c, <tt>#</tt>1 :a></code>
#
# Rubyによる多重集合（マルチセット）の実装です。
# 通常の集合（Rubyでは"set"ライブラリ）と異なり、多重集合は
# 同一の要素を複数格納することができます。
#
# メソッド名は基本的にSetクラスに合わせてあります。
#
# source://multiset//lib/multiset.rb#24
class Multiset
  include ::Enumerable

  # Generates a multiset from items in <code>list</code>.
  # If <code>list</code> is omitted, returns empty multiset.
  #
  # <code>list</code> must be an object including <code>Enumerable</code>.
  # Otherwise, <code>ArgumentError</code> is raised.
  #
  # <code>list</code>に含まれる要素からなる多重集合を生成します。
  # <code>list</code>を省略した場合、空の多重集合を生成します。
  #
  # <code>list</code>には<code>Enumerable</code>であるオブジェクトのみ
  # 指定できます。そうでない場合、例外<code>ArgumentError</code>が
  # 発生します。
  #
  # @return [Multiset] a new instance of Multiset
  #
  # source://multiset//lib/multiset.rb#48
  def initialize(list = T.unsafe(nil)); end

  # Returns the intersection of <code>self</code> and <code>other</code>,
  # that is, for each item both in <code>self</code> and <code>other</code>,
  # the multiset includes it in the smaller number of the two.
  #
  # <code>self</code>と<code>other</code>の積集合からなる多重集合を返します。
  # すなわち、<code>self</code>と<code>other</code>の両方に存在する要素について、
  # 少ないほうの個数を持った多重集合を返します。
  #
  # source://multiset//lib/multiset.rb#573
  def &(other); end

  # Returns a multiset merging <code>self</code> and <code>other</code>.
  #
  # <code>self</code>と<code>other</code>の要素を合わせた多重集合を返します。
  #
  # source://multiset//lib/multiset.rb#513
  def +(other); end

  # Returns a multiset such that items in <code>other</code> are removed from <code>self</code>,
  # where 'removed' means that, for each item in <code>other</code>,
  # the items of the number in <code>other</code> are removed from <code>self</code>.
  #
  # <code>self</code>から<code>other</code>の要素を取り除いた多重集合を返します。
  # ここで「取り除く」ことは、<code>other</code>の各要素について、
  # それを<code>other</code>にある個数分<code>self</code>から取り除くことをいいます。
  #
  # source://multiset//lib/multiset.rb#543
  def -(other); end

  # Adds <code>addcount</code> number of <code>item</code>s to <code>self</code>.
  # Returns <code>self</code> if succeeded, or <code>nil</code> if failed.
  #
  # <code>self</code>に、<code>addcount</code>個の<code>item</code>を追加します。
  # 成功した場合は<code>self</code>を、失敗した場合は<code>nil</code>を返します。
  #
  # source://multiset//lib/multiset.rb#384
  def <<(item, addcount = T.unsafe(nil)); end

  # Returns whether <code>self</code> is equal to <code>other</code>.
  #
  # <code>self</code>が<code>other</code>と等しいかどうかを返します。
  #
  # source://multiset//lib/multiset.rb#498
  def ==(other); end

  # Adds <code>addcount</code> number of <code>item</code>s to <code>self</code>.
  # Returns <code>self</code> if succeeded, or <code>nil</code> if failed.
  #
  # <code>self</code>に、<code>addcount</code>個の<code>item</code>を追加します。
  # 成功した場合は<code>self</code>を、失敗した場合は<code>nil</code>を返します。
  #
  # source://multiset//lib/multiset.rb#384
  def add(item, addcount = T.unsafe(nil)); end

  # Classify items in <code>self</code> by returned value from block.
  # Returns a Multimap whose values are associated with keys, where
  # the keys are the returned value from given block.
  #
  # <code>self</code>の要素を、与えられたブロックからの返り値によって分類します。
  # ブロックからの返り値をキーとして値を対応付けたMultimapを返します。
  #
  # source://multiset//lib/multiset.rb#849
  def classify; end

  # Same as Multiset#group_by except that the pairs of (non-duplicated) items and
  # their counts are given to block.
  #
  # Multiset#group_byと同様ですが、ブロックには要素とその個数の組が与えられます。
  #
  # source://multiset//lib/multiset.rb#862
  def classify_with; end

  # Deletes all items in <code>self</code>.
  # Returns <code>self</code>.
  #
  # <code>self</code>の要素をすべて削除します。
  # <code>self</code>を返します。
  #
  # source://multiset//lib/multiset.rb#252
  def clear; end

  # Gives all items in <code>self</code> (without duplication) to given block,
  # and generates a new multiset whose values are returned value from the block.
  #
  # <code>self</code>の各要素（重複なし）をブロックに与え、返り値を集めたものからなる
  # 多重集合を生成します。
  #
  # source://multiset//lib/multiset.rb#671
  def collect; end

  # Same as Multiset#map, except that <code>self</code> is replaced by the resulted multiset.
  # Returns <code>self</code>.
  #
  # Multiset#mapと同様の処理を行いますが、結果として生成される多重集合で<code>self</code>が
  # 置き換えられます。<code>self</code>を返します。
  #
  # source://multiset//lib/multiset.rb#685
  def collect!(&block); end

  # Gives all pairs of (non-duplicated) items and their numbers in <code>self</code> to
  # given block. The block must return an array of two items.
  # Generates a new multiset whose values and numbers are the first and
  # second item of returned array, respectively.
  #
  # <code>self</code>の要素（重複なし）とその個数の組をブロックに与えます。
  # ブロックから2要素の配列を受け取り、前者を要素、後者をその個数とした
  # 多重集合を生成します。
  #
  # source://multiset//lib/multiset.rb#699
  def collect_with; end

  # Same as Multiset#map_with, except that <code>self</code> by
  # the resulted multiset. Returns <code>self</code>.
  #
  # Multiset#map_withと同様ですが、結果として生成される多重集合で
  # <code>self</code>が置き換えられます。<code>self</code>を返します。
  #
  # source://multiset//lib/multiset.rb#714
  def collect_with!; end

  # Iterates for each item in <code>self</code> and <code>other</code>,
  # without duplication. If the given block returns false, then iteration
  # immediately ends and returns false.
  # Returns true if the given block returns true for all of iteration.
  #
  # This method is defined for methods superset?, subset?, ==.
  #
  # <code>self</code>と<code>other</code>が持つすべての要素（重複なし）について
  # 繰り返し、ブロックの返り値が偽であるものが存在すればその時点でfalseを返します。
  # すべての要素について真であればtrueを返します。
  #
  # このメソッドはsuperset?、subset?、== のために定義されています。
  #
  # source://multiset//lib/multiset.rb#434
  def compare_set_with(other); end

  # Returns number of <code>item</code>s in <code>self</code>.
  # If the <code>item</code> is omitted, the value is same as Multiset#size.
  # If a block is given, each element (without duplication) is given to
  # the block, and returns the number of elements (including duplication)
  # that returns true in the block.
  #
  # <code>self</code>中に含まれる<code>item</code>の個数を返します。
  # 引数を指定しない場合は、Multiset#sizeと同じです。
  # ブロックを指定することもでき、その場合は（重複しない）各要素をブロックに与え、
  # 条件を満たした（結果が真であった）要素がMultiset内にいくつ入っているかを数えます。
  #
  # :call-seq:
  #   count(item)
  #   count{ |item| ... }
  #
  # source://multiset//lib/multiset.rb#338
  def count(*item_list); end

  # Deletes <code>delcount</code> number of <code>item</code>s
  # from <code>self</code>.
  # Returns <code>self</code> if succeeded, <code>nil</code> otherwise.
  #
  # <code>self</code>から、<code>delcount</code>個の<code>item</code>を削除します。
  # 成功した場合は<code>self</code>を、失敗した場合は<code>nil</code>を返します。
  #
  # source://multiset//lib/multiset.rb#398
  def delete(item, delcount = T.unsafe(nil)); end

  # Deletes all <code>item</code>s in <code>self</code>.
  # Returns <code>self</code>.
  #
  # <code>self</code>に含まれる<code>item</code>をすべて削除します。
  # <code>self</code>を返します。
  #
  # source://multiset//lib/multiset.rb#410
  def delete_all(item); end

  # Gives all items in <code>self</code> (without duplication) to given block,
  # and deletes the items such that the block returns true.
  # Returns <code>self</code>.
  #
  # ブロックに<code>self</code>の要素（重複なし）を順次与え、
  # 結果が真であった要素をすべて削除します。
  # <code>self</code>を返します。
  #
  # source://multiset//lib/multiset.rb#822
  def delete_if; end

  # Gives each pair of (non-duplicated) item and its number to given block,
  # and deletes those items such that the block returns true.
  # Returns <code>self</code>.
  #
  # <code>self</code>に含まれるすべての要素（重複なし）とその個数について、
  # その組をブロックに与え、結果が真であった要素をすべて削除します。
  # <code>self</code>を返します。
  #
  # source://multiset//lib/multiset.rb#836
  def delete_with; end

  # Gives all items in <code>self</code> (without duplication) to given block,
  # and returns the first item that makes true the result of the block.
  # If none of the items make it true, ifnone.call is executed if ifnone is specified,
  # otherwise nil is returned.
  # If no block is given, corresponding Enumerator is returned.
  #
  # ブロックに<code>self</code>の要素（重複なし）を順次与え、
  # 最初に結果が真であった要素を返します。
  # 見つからなかった場合は、ifnoneが指定されている場合は ifnone.call し、
  # そうでなければnilを返します。
  # ブロックを与えなかった場合、そのためのEnumeratorを返します。
  #
  # source://multiset//lib/multiset.rb#882
  def detect(ifnone = T.unsafe(nil), &block); end

  # The same as Multiset#find except that the pairs of (non-duplicated) items and
  # their counts are given to the block.
  #
  # Multiset#findと似ますが、ブロックには<code>self</code>の要素とその個数の組が与えられます。
  #
  # source://multiset//lib/multiset.rb#903
  def detect_with(ifnone = T.unsafe(nil), &block); end

  # Returns duplicated <code>self</code>.
  #
  # <code>self</code>の複製を生成して返します。
  #
  # source://multiset//lib/multiset.rb#138
  def dup; end

  # Iterates for each item in <code>self</code>.
  # Returns <code>self</code>.
  # An Enumerator will be returned if no block is given.
  #
  # This method is ineffective since the same element in the Multiset
  # can be given to the block for many times,
  # so that it behaves the same as Enumerable#each.
  # Please consider using Multiset#each_item or Multiset#each_pair: for example,
  # a Multiset with 100 times "a" will call the given block for 100 times for Multiset#each,
  # while only once for Multiset#each_pair.
  #
  # <code>self</code>に含まれるすべての要素について繰り返します。
  # <code>self</code>を返します。
  # ブロックが与えられていない場合、Enumeratorを返します。
  #
  # このメソッドは Enumerable#each の挙動に合わせ、同じ要素を何度もブロックに
  # 渡すため、効率が悪いです。Multiset#each_item, Multiset#each_pairの利用もご検討下さい。
  # 例えば「"a"が100個入ったMultiset」をeachで繰り返すと100回の処理が行われますが、
  # each_pairなら1回で済みます。
  #
  # source://multiset//lib/multiset.rb#622
  def each; end

  # Iterates for each item in <code>self</code>, without duplication.
  # Returns <code>self</code>.
  # An Enumerator will be returned if no block is given.
  #
  # <code>self</code>に含まれるすべての要素について、重複を許さずに繰り返します。
  # <code>self</code>を返します。
  # ブロックが与えられていない場合、Enumeratorを返します。
  #
  # source://multiset//lib/multiset.rb#640
  def each_item(&block); end

  # Iterates for each pair of (non-duplicated) item and its number in <code>self</code>.
  # Returns <code>self</code>.
  # An Enumerator will be returned if no block is given.
  #
  # <code>self</code>に含まれるすべての要素（重複なし）とその個数について繰り返します。
  # <code>self</code>を返します。
  # ブロックが与えられていない場合、Enumeratorを返します。
  #
  # source://multiset//lib/multiset.rb#656
  def each_pair(&block); end

  # Iterates for each pair of (non-duplicated) item and its number in <code>self</code>.
  # Returns <code>self</code>.
  # An Enumerator will be returned if no block is given.
  #
  # <code>self</code>に含まれるすべての要素（重複なし）とその個数について繰り返します。
  # <code>self</code>を返します。
  # ブロックが与えられていない場合、Enumeratorを返します。
  #
  # source://multiset//lib/multiset.rb#656
  def each_with_count(&block); end

  # Returns whether <code>self</code> has no item.
  #
  # <code>self</code>に要素がないかどうかを返します。
  #
  # @return [Boolean]
  #
  # source://multiset//lib/multiset.rb#236
  def empty?; end

  # @return [Boolean]
  #
  # source://multiset//lib/multiset.rb#197
  def eql?(other); end

  # Gives all items in <code>self</code> (without duplication) to given block,
  # and returns the first item that makes true the result of the block.
  # If none of the items make it true, ifnone.call is executed if ifnone is specified,
  # otherwise nil is returned.
  # If no block is given, corresponding Enumerator is returned.
  #
  # ブロックに<code>self</code>の要素（重複なし）を順次与え、
  # 最初に結果が真であった要素を返します。
  # 見つからなかった場合は、ifnoneが指定されている場合は ifnone.call し、
  # そうでなければnilを返します。
  # ブロックを与えなかった場合、そのためのEnumeratorを返します。
  #
  # source://multiset//lib/multiset.rb#882
  def find(ifnone = T.unsafe(nil), &block); end

  # Gives all items in <code>self</code> (without duplication) to given block,
  # and returns the Multiset by items that makes true the result of the block.
  # If no block is given, corresponding Enumerator is returned.
  #
  # ブロックに<code>self</code>の要素（重複なし）を順次与え、
  # 結果が真であった要素を集めた多重集合を返します。
  # ブロックを与えなかった場合、そのためのEnumeratorを返します。
  #
  # source://multiset//lib/multiset.rb#927
  def find_all(&block); end

  # The same as Multiset#find_all except that the pairs of (non-duplicated) items and
  # their counts are given to the block.
  #
  # Multiset#find_allと似ますが、ブロックには<code>self</code>の要素とその個数の組が与えられます。
  #
  # source://multiset//lib/multiset.rb#949
  def find_all_with(&block); end

  # The same as Multiset#find except that the pairs of (non-duplicated) items and
  # their counts are given to the block.
  #
  # Multiset#findと似ますが、ブロックには<code>self</code>の要素とその個数の組が与えられます。
  #
  # source://multiset//lib/multiset.rb#903
  def find_with(ifnone = T.unsafe(nil), &block); end

  # Generates a multiset such that multisets in <code>self</code> are flattened.
  #
  # <code>self</code>中に含まれる多重集合を平滑化したものを返します。
  #
  # source://multiset//lib/multiset.rb#744
  def flatten; end

  # Flattens multisets in <code>self</code>.
  # Returns <code>self</code> if any item is flattened,
  # <code>nil</code> otherwise.
  #
  # <code>self</code>中に含まれる多重集合を平滑化します。
  # 平滑化した多重集合が1つでもあれば<code>self</code>を、
  # そうでなければ<code>nil</code>を返します。
  #
  # source://multiset//lib/multiset.rb#763
  def flatten!; end

  # Collects items in <code>self</code> satisfying <code>pattern</code> (<code>pattern</code> === item).
  # If a block is given, the items are converted by the result of the block.
  #
  # <code>pattern</code>の条件を満たした（<code>pattern</code> === item）要素のみを集めた多重集合を返します。
  # ブロックが与えられている場合は、さらにその結果を適用した結果を返します。
  #
  # source://multiset//lib/multiset.rb#972
  def grep(pattern); end

  # Classify items in <code>self</code> by returned value from block.
  # Returns a Multimap whose values are associated with keys, where
  # the keys are the returned value from given block.
  #
  # <code>self</code>の要素を、与えられたブロックからの返り値によって分類します。
  # ブロックからの返り値をキーとして値を対応付けたMultimapを返します。
  #
  # source://multiset//lib/multiset.rb#849
  def group_by; end

  # Same as Multiset#group_by except that the pairs of (non-duplicated) items and
  # their counts are given to block.
  #
  # Multiset#group_byと同様ですが、ブロックには要素とその個数の組が与えられます。
  #
  # source://multiset//lib/multiset.rb#862
  def group_by_with; end

  # source://multiset//lib/multiset.rb#189
  def hash; end

  # Returns whether <code>self</code> has <code>item</code>.
  #
  # <code>item</code>が<code>self</code>中に含まれているかを返します。
  #
  # @return [Boolean]
  #
  # source://multiset//lib/multiset.rb#260
  def include?(item); end

  # Three elements are given to the block for each (non-duplicated) items in <code>self</code>:
  # the last result of the block, the item, and its number in <code>self</code>.
  # As for the first block call, the first argument is <code>init</code>.
  # The result of the last block call is returned.
  #
  # Different from Enumerable#inject, <code>init</code> cannot be omitted.
  # In addition, Symbol cannot be given instead of a block.
  #
  # ブロックに「1回前のブロック呼び出しの返り値」「<code>self</code>の要素」「その個数」の
  # 3つ組を順次与え、最後にブロックを呼んだ結果を返します。ただし「1回前のブロック呼び出しの返り値」は、
  # 1回目のブロック呼び出しの際については、代わりに<code>init</code>の値が与えられます。
  #
  # Enumerable#injectと異なり、<code>init</code>は省略できません。
  # またブロックの代わりにSymbolを与えることもできません。
  #
  # source://multiset//lib/multiset.rb#996
  def inject_with(init); end

  # source://multiset//lib/multiset.rb#310
  def inspect; end

  # Returns an array with all items in <code>self</code>, without duplication.
  #
  # <code>self</code>に含まれている要素（重複は除く）からなる配列を返します。
  #
  # source://multiset//lib/multiset.rb#243
  def items; end

  # Returns number of all items in <code>self</code>.
  #
  # <code>self</code>に含まれている要素数を返します。
  #
  # source://multiset//lib/multiset.rb#228
  def length; end

  # Lists all items with duplication in <code>self</code>.
  # Items are deliminated with <code>delim</code>, and items are
  # converted to string in the given block.
  # If block is omitted, Object#inspect is used.
  #
  # <code>self</code>の全要素を（重複を許して）並べた文字列を返します。
  # 要素間の区切りは<code>delim</code>の値を用い、
  # 各要素の表示形式は与えられたブロックの返り値（なければObject#inspect）を用います。
  #
  # source://multiset//lib/multiset.rb#273
  def listing(delim = T.unsafe(nil)); end

  # Gives all items in <code>self</code> (without duplication) to given block,
  # and generates a new multiset whose values are returned value from the block.
  #
  # <code>self</code>の各要素（重複なし）をブロックに与え、返り値を集めたものからなる
  # 多重集合を生成します。
  #
  # source://multiset//lib/multiset.rb#671
  def map; end

  # Same as Multiset#map, except that <code>self</code> is replaced by the resulted multiset.
  # Returns <code>self</code>.
  #
  # Multiset#mapと同様の処理を行いますが、結果として生成される多重集合で<code>self</code>が
  # 置き換えられます。<code>self</code>を返します。
  #
  # source://multiset//lib/multiset.rb#685
  def map!(&block); end

  # Gives all pairs of (non-duplicated) items and their numbers in <code>self</code> to
  # given block. The block must return an array of two items.
  # Generates a new multiset whose values and numbers are the first and
  # second item of returned array, respectively.
  #
  # <code>self</code>の要素（重複なし）とその個数の組をブロックに与えます。
  # ブロックから2要素の配列を受け取り、前者を要素、後者をその個数とした
  # 多重集合を生成します。
  #
  # source://multiset//lib/multiset.rb#699
  def map_with; end

  # Same as Multiset#map_with, except that <code>self</code> by
  # the resulted multiset. Returns <code>self</code>.
  #
  # Multiset#map_withと同様ですが、結果として生成される多重集合で
  # <code>self</code>が置き換えられます。<code>self</code>を返します。
  #
  # source://multiset//lib/multiset.rb#714
  def map_with!; end

  # Returns the largest item in <code>self</code>,
  # or <code>nil</code> if no item is stored in <code>self</code>.
  # If a block is given, they are ordered by giving pairs of items to the block.
  #
  # 最大の要素を返します。
  # 要素が存在しない場合はnilを返します。
  # ブロックが与えられた場合は、要素間の大小判定を、ブロックに2つの要素を与えることで行います。
  #
  # source://multiset//lib/multiset.rb#1010
  def max(&block); end

  # Returns the largest item by comparing the items in <code>self</code>
  # by the results of the block.
  # If no item is stored in <code>self</code>, <code>nil</code> is returned.
  #
  # ブロックの値を評価した結果が最大になるような要素を返します。
  # 要素が存在しない場合はnilを返します。
  #
  # source://multiset//lib/multiset.rb#1041
  def max_by(&block); end

  # Same as Multiset#max_by except that pairs of (non-duplicated) items and their counts
  # are given to the block.
  #
  # Multiset#max_by と同様ですが、ブロックには要素（重複なし）とその出現数の組が与えられます。
  #
  # source://multiset//lib/multiset.rb#1099
  def max_by_with(&block); end

  # Same as Multiset#max except that the following four:
  # "item 1", "number of item 1", "item 2" and "number of item 2" are given to the block.
  #
  # Multiset#max と同様ですが、ブロックには「要素1」「要素1の出現数」「要素2」「要素2の出現数」の
  # 4引数が与えられます。
  #
  # source://multiset//lib/multiset.rb#1070
  def max_with; end

  # Returns whether <code>self</code> has <code>item</code>.
  #
  # <code>item</code>が<code>self</code>中に含まれているかを返します。
  #
  # @return [Boolean]
  #
  # source://multiset//lib/multiset.rb#260
  def member?(item); end

  # Returns a multiset merging <code>self</code> and <code>other</code>.
  #
  # <code>self</code>と<code>other</code>の要素を合わせた多重集合を返します。
  #
  # source://multiset//lib/multiset.rb#513
  def merge(other); end

  # Merges <code>other</code> to <code>self</code>.
  # See also Multiset#merge .
  # Returns <code>self</code>.
  #
  # <code>self</code>に<code>other</code>の要素を追加します。
  # Multiset#merge も参照してください。
  # <code>self</code>を返します。
  #
  # source://multiset//lib/multiset.rb#529
  def merge!(other); end

  # Returns the smallest item in <code>self</code>,
  # or <code>nil</code> if no item is stored in <code>self</code>.
  # If a block is given, they are ordered by giving pairs of items to the block.
  #
  # 最小の要素を返します。
  # 要素が存在しない場合はnilを返します。
  # ブロックが与えられた場合は、要素間の大小判定を、ブロックに2つの要素を与えることで行います。
  #
  # source://multiset//lib/multiset.rb#1021
  def min(&block); end

  # Returns the largest item by comparing the items in <code>self</code>
  # by the results of the block.
  # If no item is stored in <code>self</code>, <code>nil</code> is returned.
  #
  # ブロックの値を評価した結果が最小になるような要素を返します。
  # 要素が存在しない場合はnilを返します。
  #
  # source://multiset//lib/multiset.rb#1051
  def min_by(&block); end

  # Same as Multiset#min_by except that pairs of (non-duplicated) items and their counts
  # are given to the block.
  #
  # Multiset#max_by と同様ですが、ブロックには要素（重複なし）とその出現数の組が与えられます。
  #
  # source://multiset//lib/multiset.rb#1108
  def min_by_with(&block); end

  # Same as Multiset#min except that the following four:
  # "item 1", "number of item 1", "item 2" and "number of item 2" are given to the block.
  #
  # Multiset#min と同様ですが、ブロックには「要素1」「要素1の出現数」「要素2」「要素2の出現数」の
  # 4引数が与えられます。
  #
  # source://multiset//lib/multiset.rb#1080
  def min_with; end

  # Returns the pair consisting of the smallest and the largest item in <code>self</code>,
  # or <code>nil</code> if no item is stored in <code>self</code>.
  # If a block is given, they are ordered by giving pairs of items to the block.
  #
  # 最小の要素と最大の要素の組を返します。
  # ブロックが与えられた場合は、要素間の大小判定を、ブロックに2つの要素を与えることで行います。
  #
  # source://multiset//lib/multiset.rb#1031
  def minmax(&block); end

  # Returns the pair consisting of the smallest and the largest items  in <code>self</code>
  # by comparing the items by the results of the block.
  # If no item is stored in <code>self</code>, <code>nil</code> is returned.
  #
  # ブロックの値を評価した結果が最小になる要素と最大になる要素の組を返します。
  # 要素が存在しない場合はnilを返します。
  #
  # source://multiset//lib/multiset.rb#1061
  def minmax_by(&block); end

  # Same as Multiset#minmax_by except that pairs of (non-duplicated) items and their counts
  # are given to the block.
  #
  # Multiset#minmax_by と同様ですが、ブロックには要素（重複なし）とその出現数の組が与えられます。
  #
  # source://multiset//lib/multiset.rb#1117
  def minmax_by_with(&block); end

  # Same as Multiset#minmax except that the following four:
  # "item 1", "number of item 1", "item 2" and "number of item 2" are given to the block.
  #
  # Multiset#minmax と同様ですが、ブロックには「要素1」「要素1の出現数」「要素2」「要素2の出現数」の
  # 4引数が与えられます。
  #
  # source://multiset//lib/multiset.rb#1090
  def minmax_with; end

  # Returns whether <code>self</code> is a proper subset of <code>other</code>,
  # that is, it returns true if subset? is satisfied and
  # <code>self</code> is not equal to <code>other</code>.
  #
  # <code>self</code>が<code>other</code>に真に含まれているかどうかを返します。
  # すなわち、 subset? の条件に加えて両者が一致しなければ真となります。
  #
  # @return [Boolean]
  #
  # source://multiset//lib/multiset.rb#488
  def proper_subset?(other); end

  # Returns whether <code>self</code> is a proper superset of <code>other</code>,
  # that is, it returns true if superset? is satisfied and
  # <code>self</code> is not equal to <code>other</code>.
  #
  # <code>self</code>が<code>other</code>を真に含んでいるかどうかを返します。
  # すなわち、 superset? の条件に加えて両者が一致しなければ真となります。
  #
  # @return [Boolean]
  #
  # source://multiset//lib/multiset.rb#461
  def proper_superset?(other); end

  # Returns one item in <code>self</code> at random
  # in the same probability.
  # Returns <code>nil</code> in case the multiset is empty.
  #
  # <code>self</code>の要素を無作為に1つ選んで返します。
  # すべての要素は等確率で選ばれます。
  # 空のMultisetに対して呼び出した場合は<code>nil</code>を返します。
  #
  # source://multiset//lib/multiset.rb#731
  def rand; end

  # Gives all items in <code>self</code> (without duplication) to given block,
  # and returns a multiset collecting the items such that the block returns false.
  #
  # ブロックに<code>self</code>の要素（重複なし）を順次与え、
  # 結果が偽であった要素のみを集めたMultisetを返します。
  #
  # source://multiset//lib/multiset.rb#780
  def reject; end

  # Same as Multiset#delete_if except that this returns <code>nil</code> if no item is deleted.
  #
  # Multiset#delete_ifと似ますが、要素が1つも削除されなければ<code>nil</code>を返します。
  #
  # source://multiset//lib/multiset.rb#804
  def reject!; end

  # Gives all pairs of (non-duplicated) items and counts in <code>self</code> to given block,
  # and returns a multiset collecting the items such that the block returns false.
  #
  # ブロックに<code>self</code>の要素（重複なし）と個数の組を順次与え、
  # 結果が偽であった要素のみを集めたMultisetを返します。
  #
  # source://multiset//lib/multiset.rb#793
  def reject_with; end

  # Sets the number of <code>item</code> in <code>self</code> as <code>number</code>.
  # If <code>number</code> is negative, it is considered as <code>number = 0</code>.
  # Returns <code>self</code> if succeeded, <code>nil</code> otherwise.
  #
  # <code>self</code>に含まれる<code>item</code>の個数を<code>number</code>個にします。
  # <code>number</code>が負の数であった場合は、<code>number = 0</code>とみなします。
  # 成功した場合は<code>self</code>を、失敗した場合は<code>nil</code>を返します。
  #
  # source://multiset//lib/multiset.rb#368
  def renew_count(item, number); end

  # Replaces <code>self</code> by <code>other</code>.
  # Returns <code>self</code>.
  #
  # <code>self</code>の内容を<code>other</code>のものに置き換えます。
  # <code>self</code>を返します。
  #
  # source://multiset//lib/multiset.rb#217
  def replace(other); end

  # Returns one item in <code>self</code> at random
  # in the same probability.
  # Returns <code>nil</code> in case the multiset is empty.
  #
  # <code>self</code>の要素を無作為に1つ選んで返します。
  # すべての要素は等確率で選ばれます。
  # 空のMultisetに対して呼び出した場合は<code>nil</code>を返します。
  #
  # source://multiset//lib/multiset.rb#731
  def sample; end

  # Gives all items in <code>self</code> (without duplication) to given block,
  # and returns the Multiset by items that makes true the result of the block.
  # If no block is given, corresponding Enumerator is returned.
  #
  # ブロックに<code>self</code>の要素（重複なし）を順次与え、
  # 結果が真であった要素を集めた多重集合を返します。
  # ブロックを与えなかった場合、そのためのEnumeratorを返します。
  #
  # source://multiset//lib/multiset.rb#927
  def select(&block); end

  # The same as Multiset#find_all except that the pairs of (non-duplicated) items and
  # their counts are given to the block.
  #
  # Multiset#find_allと似ますが、ブロックには<code>self</code>の要素とその個数の組が与えられます。
  #
  # source://multiset//lib/multiset.rb#949
  def select_with(&block); end

  # Returns number of all items in <code>self</code>.
  #
  # <code>self</code>に含まれている要素数を返します。
  #
  # source://multiset//lib/multiset.rb#228
  def size; end

  # Generates an array by sorting the items in <code>self</code>.
  #
  # <code>self</code>の要素を並び替えた配列を生成します。
  #
  # source://multiset//lib/multiset.rb#1125
  def sort(&block); end

  # The same as Multiset#sort except that, after giving the items to the block,
  # the items are sorted by the values from the block.
  #
  # Multiset#sortと同様ですが、ブロックには1つの要素が与えられ、その値が小さいものから順に並びます。
  #
  # source://multiset//lib/multiset.rb#1137
  def sort_by(&block); end

  # Same as Multiset#sort_by except that the pairs of (non-duplicated) items
  # and their counts are given to the block.
  #
  # Multiset#sort_by と同様ですが、ブロックには要素（重複なし）とその出現数の組が与えられます。
  #
  # source://multiset//lib/multiset.rb#1162
  def sort_by_with; end

  # Same as Multiset#sort except that the following four:
  # "item 1", "number of item 1", "item 2" and "number of item 2" are given to the block.
  #
  # Multiset#sort と同様ですが、ブロックには「要素1」「要素1の出現数」「要素2」「要素2の出現数」の
  # 4引数が与えられます。
  #
  # source://multiset//lib/multiset.rb#1150
  def sort_with; end

  # Returns whether <code>self</code> is a subset of <code>other</code>,
  # that is, for any item, the number of it in <code>self</code> is
  # equal to or smaller than that in <code>other</code>.
  #
  # <code>self</code>が<code>other</code>を含んでいるかどうかを返します。
  # すなわち、いかなる要素についても、それが<code>self</code>に含まれている
  # 個数が<code>other</code>に含まれている数以下であるかを返します。
  #
  # @return [Boolean]
  #
  # source://multiset//lib/multiset.rb#475
  def subset?(other); end

  # Returns a multiset such that items in <code>other</code> are removed from <code>self</code>,
  # where 'removed' means that, for each item in <code>other</code>,
  # the items of the number in <code>other</code> are removed from <code>self</code>.
  #
  # <code>self</code>から<code>other</code>の要素を取り除いた多重集合を返します。
  # ここで「取り除く」ことは、<code>other</code>の各要素について、
  # それを<code>other</code>にある個数分<code>self</code>から取り除くことをいいます。
  #
  # source://multiset//lib/multiset.rb#543
  def subtract(other); end

  # Removes items in <code>other</code> from <code>self</code>.
  # See also Multiset#subtract .
  # Returns <code>self</code>.
  #
  # <code>self</code>から<code>other</code>の要素を削除します。
  # Multiset#subtract も参照してください。
  # <code>self</code>を返します。
  #
  # source://multiset//lib/multiset.rb#559
  def subtract!(other); end

  # Returns whether <code>self</code> is a superset of <code>other</code>,
  # that is, for any item, the number of it in <code>self</code> is
  # equal to or larger than that in <code>other</code>.
  #
  # <code>self</code>が<code>other</code>を含んでいるかどうかを返します。
  # すなわち、いかなる要素についても、それが<code>self</code>に含まれている
  # 個数が<code>other</code>に含まれている数以上であるかを返します。
  #
  # @return [Boolean]
  #
  # source://multiset//lib/multiset.rb#448
  def superset?(other); end

  # Converts <code>self</code> to an array.
  #
  # <code>self</code>を配列に変換して返します。
  #
  # source://multiset//lib/multiset.rb#181
  def to_a; end

  # Converts <code>self</code> to a <code>Hash</code>.
  # See Hash#to_multiset about format of generated hash.
  #
  # <code>self</code>を<code>Hash</code>に変換して返します。
  # 生成されるハッシュの構造については、Hash#to_multisetをご覧下さい。
  #
  # source://multiset//lib/multiset.rb#147
  def to_hash; end

  # Lists all items without duplication and its number in <code>self</code>.
  # Items are deliminated with <code>delim</code>, and items are
  # converted to string in the given block.
  # If block is omitted, Object#inspect is used.
  #
  # <code>self</code>の要素と要素数の組を並べた文字列を返します。
  # 要素間の区切りは<code>delim</code>の値を用い、
  # 各要素の表示形式は与えられたブロックの返り値（なければObject#inspect）を用います。
  #
  # source://multiset//lib/multiset.rb#295
  def to_s(delim = T.unsafe(nil)); end

  # Converts <code>self</code> to ordinary set
  # (The <code>Set</code> class attached to Ruby by default).
  #
  # <code>require "set"</code> is performed when this method is called.
  #
  # Note: To convert an instance of Set to Multiset, use
  # <code>Multiset.new(instance_of_set)</code>.
  #
  # <code>self</code>を通常の集合（Ruby標準添付の<code>Set</code>）に
  # 変換したものを返します。
  #
  # このメソッドを呼び出すと、<code>require "set"</code>が行われます。
  #
  # 注：逆に、SetのインスタンスをMultisetに変換するには、
  # <code>Multiset.new(instance_of_set)</code>で可能です。
  #
  # source://multiset//lib/multiset.rb#173
  def to_set; end

  # Returns the union of <code>self</code> and <code>other</code>,
  # that is, for each item either or both in <code>self</code> and <code>other</code>,
  # the multiset includes it in the larger number of the two.
  #
  # <code>self</code>と<code>other</code>の和集合からなる多重集合を返します。
  # すなわち、<code>self</code>と<code>other</code>の少なくとも一方に存在する要素について、
  # 多いほうの個数を持った多重集合を返します。
  #
  # source://multiset//lib/multiset.rb#588
  def |(other); end

  private

  # source://multiset//lib/multiset.rb#891
  def find_(ifnone, &block); end

  # source://multiset//lib/multiset.rb#936
  def find_all_(&block); end

  # source://multiset//lib/multiset.rb#958
  def find_all_with_(&block); end

  # source://multiset//lib/multiset.rb#912
  def find_with_(ifnone, &block); end

  class << self
    # Generates a multiset from items in <code>list</code>.
    # Unlike using <code>Multiset.new</code>, each argument is one item in generated multiset.
    #
    # This method is mainly used when you generate a multiset from literals.
    #
    # <code>list</code>に含まれる要素からなる多重集合を生成します。
    # <code>Multiset.new</code>を用いる場合と異なり、引数の1つ1つが多重集合の要素になります。
    #
    # 主に、リテラルから多重集合を生成するのに用います。
    #
    # source://multiset//lib/multiset.rb#66
    def [](*list); end

    # Generates a Multiset from string, separated by lines.
    #
    # 文字列を行単位で区切ってMultisetにします。
    #
    # source://multiset//lib/multiset.rb#118
    def from_lines(str); end

    # Generates a multiset by converting <code>object</code>.
    # * If <code>object</code> is an instance of Multiset, returns
    #   duplicated <code>object</code>.
    # * If <code>object</code> is not an instance of Multiset and has
    #   the method <code>each_pair</code>,
    #   for each pair of two arguments from <code>each_pair</code>,
    #   the first argument becomes the item in multiset and
    #   the second argument becomes its number in the multiset.
    #   See also Hash#to_multiset .
    # * If <code>object</code> does not have the method <code>each_pair</code>
    #   and <code>object</code> includes <code>Enumerable</code>, this method
    #   works the same as Multiset#new .
    # * Otherwise, <code>ArgumentError</code> is raised.
    #
    # <code>object</code>を多重集合に変換し生成します。
    # * <code>object</code>がMultisetのインスタンスである場合、
    #   その複製を返します。
    # * <code>object</code>がMultisetのインスタンスでなく、
    #   かつ<code>each_pair</code>メソッドを持っている場合、
    #   <code>each_pair</code>から渡される2つの引数について、前者を要素、
    #   後者をその個数とした多重集合を生成します。Hash#to_multisetも
    #   ご覧下さい。
    # * <code>object</code>が<code>each_pair</code>メソッドを持っておらず、
    #   かつ<code>Enumerable</code>である場合は、Multiset#newと同じ結果です。
    # * それ以外の場合は、例外<code>ArgumentError</code>が発生します。
    #
    # source://multiset//lib/multiset.rb#95
    def parse(object); end

    # If a string is given, it works as Multiset.from_lines,
    # otherwise as Multiset.parse.
    #
    # 文字列が渡された場合は、Multiset.from_linesと同じ挙動。
    # それ以外の場合は、Multiset.parseと同じ挙動。
    #
    # source://multiset//lib/multiset.rb#127
    def parse_force(object); end
  end
end

# source://multiset//lib/multiset.rb#25
Multiset::VERSION = T.let(T.unsafe(nil), String)
