# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `stringex` gem.
# Please instead update this file by running `bin/tapioca gem stringex`.


class ActiveRecord::Base
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Access
  include ::ActiveModel::Serialization
  include ::Stringex::ActsAsUrl::ActsAsUrlInstanceMethods
  extend ::Stringex::ActsAsUrl::ActsAsUrlClassMethods
end

class String
  include ::Comparable
  include ::Stringex::StringExtensions::PublicInstanceMethods
  extend ::Stringex::StringExtensions::PublicClassMethods
end

# source://stringex//lib/stringex/configuration/base.rb#1
module Stringex; end

# source://stringex//lib/stringex/acts_as_url/adapter/base.rb#2
module Stringex::ActsAsUrl
  class << self
    # source://stringex//lib/stringex/acts_as_url.rb#6
    def configure(&block); end

    # source://stringex//lib/stringex/acts_as_url.rb#10
    def unconfigure!; end
  end
end

# source://stringex//lib/stringex/acts_as_url.rb#14
module Stringex::ActsAsUrl::ActsAsUrlClassMethods
  # Creates a callback to automatically create an url-friendly representation
  # of the <tt>attribute</tt> argument. Example:
  #
  #   acts_as_url :title
  #
  # will use the string contents of the <tt>title</tt> attribute
  # to create the permalink. <strong>Note:</strong> you can also use a non-database-backed
  # method to supply the string contents for the permalink. Just use that method's name
  # as the argument as you would an attribute.
  #
  # The default attribute <tt>acts_as_url</tt> uses to save the permalink is <tt>url</tt>
  # but this can be changed in the options hash. Available options are:
  #
  # <tt>:adapter</tt>:: If specified, will indicate what ORM adapter to use. Default functionality
  #                     is to use the first available adapter. This should work for most cases
  #                     unless you are using multiple ORMs in a single project.
  # <tt>:allow_slash</tt>:: If true, allows the generated url to contain slashes. Default is false[y].
  # <tt>:allow_duplicates</tt>:: If true, allows duplicate urls instead of appending numbers to
  #                              differentiate between urls. Default is false[y]. See note on <tt>:scope</tt>.
  # <tt>:duplicate_count_separator</tt>:: String to use when forcing unique urls from non-unique strings.
  #                                       Default is "-".
  # <tt>:duplicate_sequence</tt>:: Supply an enumerator to generate the values used to generate
  #                                unique urls (when <tt>:allow_duplicates</tt> is false).
  #                                By default, generates positive integers in sequence from 1.
  #                                <strong>Note:</strong> The sequence is restarted for each record
  #                                (by calling <tt>#rewind</tt>).
  # <tt>:force_downcase</tt>:: If false, allows generated url to contain uppercased letters. Default is false.
  # <tt>:exclude_list</tt>:: List of complete strings that should not be transformed by <tt>acts_as_url</tt>.
  #                          Default is empty.
  # <tt>:only_when_blank</tt>:: If true, the url generation will only happen when <tt>:url_attribute</tt> is
  #                             blank. Default is false[y] (meaning url generation will happen always).
  # <tt>:scope</tt>:: The name of model attribute to scope unique urls to. There is no default here.
  #                   <strong>Note:</strong> this will automatically act as if <tt>:allow_duplicates</tt>
  #                   is set to true.
  # <tt>:sync_url</tt>:: If set to true, the url field will be updated when changes are made to the
  #                      attribute it is based on. Default is false.
  # <tt>:url_attribute</tt>:: The name of the attribute to use for storing the generated url string.
  #                           Default is <tt>:url</tt>.
  # <tt>:limit</tt>:: The maximum size a generated url should be. <strong>Note:</strong> this does not
  #                   include the characters needed to enforce uniqueness on duplicate urls.
  #                   Default is nil.
  #
  # source://stringex//lib/stringex/acts_as_url.rb#56
  def acts_as_url(attribute, options = T.unsafe(nil)); end

  # Some ORMs function as mixins not base classes and need to have a hook to reinclude
  # and re-extend ActsAsUrl methods
  #
  # source://stringex//lib/stringex/acts_as_url.rb#80
  def included(base = T.unsafe(nil), &block); end

  # Initialize the url fields for the records that need it. Designed for people who add
  # <tt>acts_as_url</tt> support once there's already development/production data they'd
  # like to keep around.
  #
  # Note: This method can get very expensive, very fast. If you're planning on using this
  # on a large selection, you will get much better results writing your own version with
  # using pagination.
  #
  # source://stringex//lib/stringex/acts_as_url.rb#96
  def initialize_urls; end
end

# source://stringex//lib/stringex/acts_as_url.rb#101
module Stringex::ActsAsUrl::ActsAsUrlInstanceMethods
  # source://stringex//lib/stringex/acts_as_url.rb#102
  def ensure_unique_url; end
end

# source://stringex//lib/stringex/acts_as_url/adapter/base.rb#3
module Stringex::ActsAsUrl::Adapter
  class << self
    # source://stringex//lib/stringex/acts_as_url/adapter.rb#9
    def add_loaded_adapter(adapter); end

    # source://stringex//lib/stringex/acts_as_url/adapter.rb#21
    def first_available; end

    # source://stringex//lib/stringex/acts_as_url/adapter.rb#13
    def load_available; end
  end
end

# source://stringex//lib/stringex/acts_as_url/adapter/active_record.rb#4
class Stringex::ActsAsUrl::Adapter::ActiveRecord < ::Stringex::ActsAsUrl::Adapter::Base
  private

  # source://stringex//lib/stringex/acts_as_url/adapter/active_record.rb#13
  def klass_previous_instances(&block); end

  class << self
    # source://stringex//lib/stringex/acts_as_url/adapter/active_record.rb#5
    def load; end

    # source://stringex//lib/stringex/acts_as_url/adapter/active_record.rb#17
    def orm_class; end
  end
end

# source://stringex//lib/stringex/acts_as_url/adapter/base.rb#4
class Stringex::ActsAsUrl::Adapter::Base
  # @return [Base] a new instance of Base
  #
  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#7
  def initialize(configuration); end

  # Returns the value of attribute base_url.
  #
  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#5
  def base_url; end

  # Sets the attribute base_url
  #
  # @param value the value to set the attribute base_url to.
  #
  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#5
  def base_url=(_arg0); end

  # Returns the value of attribute callback_options.
  #
  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#5
  def callback_options; end

  # Sets the attribute callback_options
  #
  # @param value the value to set the attribute callback_options to.
  #
  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#5
  def callback_options=(_arg0); end

  # Returns the value of attribute configuration.
  #
  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#5
  def configuration; end

  # Sets the attribute configuration
  #
  # @param value the value to set the attribute configuration to.
  #
  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#5
  def configuration=(_arg0); end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#13
  def create_callbacks!(klass); end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#20
  def ensure_unique_url!(instance); end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#29
  def initialize_urls!(klass); end

  # Returns the value of attribute instance.
  #
  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#5
  def instance; end

  # Sets the attribute instance
  #
  # @param value the value to set the attribute instance to.
  #
  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#5
  def instance=(_arg0); end

  # Returns the value of attribute klass.
  #
  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#5
  def klass; end

  # Sets the attribute klass
  #
  # @param value the value to set the attribute klass to.
  #
  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#5
  def klass=(_arg0); end

  # Returns the value of attribute settings.
  #
  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#5
  def settings; end

  # Sets the attribute settings
  #
  # @param value the value to set the attribute settings to.
  #
  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#5
  def settings=(_arg0); end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#36
  def url_attribute(instance); end

  private

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#59
  def add_new_record_url_owner_conditions; end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#65
  def add_scoped_url_owner_conditions; end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#72
  def create_callback; end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#94
  def create_method_to_callback; end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#102
  def duplicate_for_base_url(n); end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#132
  def duplicate_url_sequence; end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#106
  def ensure_loadable; end

  # NOTE: The <tt>instance</tt> here is not the cached instance but a block variable
  # passed from <tt>klass_previous_instances</tt>, just to be clear
  #
  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#112
  def ensure_unique_url_for!(instance); end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#117
  def get_base_url_owner_conditions; end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#157
  def handle_blacklisted_url!; end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#121
  def handle_duplicate_url!; end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#151
  def handle_url!; end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#163
  def instance_from_db; end

  # @return [Boolean]
  #
  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#167
  def is_blank?(object); end

  # @return [Boolean]
  #
  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#171
  def is_new?(object); end

  # @return [Boolean]
  #
  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#175
  def is_present?(object); end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#76
  def klass_callback_method; end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#84
  def klass_non_sync_url_callback_method; end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#80
  def klass_sync_url_callback_method; end

  # @return [Boolean]
  #
  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#179
  def loadable?; end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#183
  def modify_base_url; end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#188
  def orm_class; end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#192
  def primary_key; end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#196
  def read_attribute(instance, attribute); end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#200
  def url_attribute_for(object); end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#204
  def url_owner_conditions; end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#212
  def url_owners; end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#216
  def url_owners_class; end

  # @return [Boolean]
  #
  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#143
  def url_taken?(url); end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#226
  def write_attribute(instance, attribute, value); end

  # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#230
  def write_url_attribute(value); end

  class << self
    # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#46
    def ensure_loadable; end

    # @return [Boolean]
    #
    # source://stringex//lib/stringex/acts_as_url/adapter/base.rb#51
    def loadable?; end
  end
end

# source://stringex//lib/stringex/acts_as_url/adapter/data_mapper.rb#4
class Stringex::ActsAsUrl::Adapter::DataMapper < ::Stringex::ActsAsUrl::Adapter::Base
  private

  # source://stringex//lib/stringex/acts_as_url/adapter/data_mapper.rb#13
  def create_callback; end

  # source://stringex//lib/stringex/acts_as_url/adapter/data_mapper.rb#19
  def instance_from_db; end

  # @return [Boolean]
  #
  # source://stringex//lib/stringex/acts_as_url/adapter/data_mapper.rb#23
  def is_blank?(object); end

  # @return [Boolean]
  #
  # source://stringex//lib/stringex/acts_as_url/adapter/data_mapper.rb#27
  def is_new?(object); end

  # @return [Boolean]
  #
  # source://stringex//lib/stringex/acts_as_url/adapter/data_mapper.rb#31
  def is_present?(object); end

  # source://stringex//lib/stringex/acts_as_url/adapter/data_mapper.rb#35
  def klass_previous_instances(&block); end

  # source://stringex//lib/stringex/acts_as_url/adapter/data_mapper.rb#39
  def primary_key; end

  # source://stringex//lib/stringex/acts_as_url/adapter/data_mapper.rb#47
  def read_attribute(instance, name); end

  # source://stringex//lib/stringex/acts_as_url/adapter/data_mapper.rb#43
  def url_owners; end

  # source://stringex//lib/stringex/acts_as_url/adapter/data_mapper.rb#51
  def write_attribute(instance, name, value); end

  class << self
    # source://stringex//lib/stringex/acts_as_url/adapter/data_mapper.rb#5
    def load; end

    # source://stringex//lib/stringex/acts_as_url/adapter/data_mapper.rb#55
    def orm_class; end
  end
end

# source://stringex//lib/stringex/acts_as_url/adapter/mongoid.rb#4
class Stringex::ActsAsUrl::Adapter::Mongoid < ::Stringex::ActsAsUrl::Adapter::Base
  private

  # source://stringex//lib/stringex/acts_as_url/adapter/mongoid.rb#12
  def add_new_record_url_owner_conditions; end

  # source://stringex//lib/stringex/acts_as_url/adapter/mongoid.rb#17
  def add_scoped_url_owner_conditions; end

  # source://stringex//lib/stringex/acts_as_url/adapter/mongoid.rb#23
  def get_base_url_owner_conditions; end

  # source://stringex//lib/stringex/acts_as_url/adapter/mongoid.rb#27
  def klass_previous_instances(&block); end

  class << self
    # source://stringex//lib/stringex/acts_as_url/adapter/mongoid.rb#5
    def load; end

    # source://stringex//lib/stringex/acts_as_url/adapter/mongoid.rb#31
    def orm_class; end
  end
end

# source://stringex//lib/stringex/configuration/base.rb#2
module Stringex::Configuration; end

# source://stringex//lib/stringex/configuration/acts_as_url.rb#3
class Stringex::Configuration::ActsAsUrl < ::Stringex::Configuration::Base
  # @return [ActsAsUrl] a new instance of ActsAsUrl
  #
  # source://stringex//lib/stringex/configuration/acts_as_url.rb#4
  def initialize(options = T.unsafe(nil)); end

  # source://stringex//lib/stringex/configuration/acts_as_url.rb#11
  def string_extensions_settings; end

  private

  # source://stringex//lib/stringex/configuration/acts_as_url.rb#28
  def default_settings; end

  class << self
    # source://stringex//lib/stringex/configuration/acts_as_url.rb#32
    def default_settings; end

    # source://stringex//lib/stringex/configuration/acts_as_url.rb#22
    def settings; end
  end
end

# source://stringex//lib/stringex/configuration/base.rb#3
class Stringex::Configuration::Base
  # @return [Base] a new instance of Base
  #
  # source://stringex//lib/stringex/configuration/base.rb#6
  def initialize(local_options = T.unsafe(nil)); end

  # NOTE: This does not cache itself so that instance and class can be cached on the adapter
  # without worrying about thread safety or race conditions
  #
  # source://stringex//lib/stringex/configuration/base.rb#15
  def adapter; end

  # Returns the value of attribute settings.
  #
  # source://stringex//lib/stringex/configuration/base.rb#4
  def settings; end

  # Sets the attribute settings
  #
  # @param value the value to set the attribute settings to.
  #
  # source://stringex//lib/stringex/configuration/base.rb#4
  def settings=(_arg0); end

  private

  # @raise [ArgumentError]
  #
  # source://stringex//lib/stringex/configuration/base.rb#44
  def default_settings; end

  # source://stringex//lib/stringex/configuration/base.rb#48
  def system_wide_customizations; end

  class << self
    # @yield [configurator]
    #
    # source://stringex//lib/stringex/configuration/base.rb#29
    def configure(&block); end

    # source://stringex//lib/stringex/configuration/base.rb#34
    def system_wide_customizations; end

    # source://stringex//lib/stringex/configuration/base.rb#38
    def unconfigure!; end

    # source://stringex//lib/stringex/configuration/base.rb#52
    def valid_configuration_details; end
  end
end

# source://stringex//lib/stringex/configuration/configurator.rb#3
class Stringex::Configuration::Configurator
  # @return [Configurator] a new instance of Configurator
  #
  # source://stringex//lib/stringex/configuration/configurator.rb#6
  def initialize(klass); end

  # source://stringex//lib/stringex/configuration/configurator.rb#14
  def define_instance_method_for_configuration_wrapper(name); end

  # Returns the value of attribute klass.
  #
  # source://stringex//lib/stringex/configuration/configurator.rb#4
  def klass; end

  # Sets the attribute klass
  #
  # @param value the value to set the attribute klass to.
  #
  # source://stringex//lib/stringex/configuration/configurator.rb#4
  def klass=(_arg0); end
end

# source://stringex//lib/stringex/configuration/string_extensions.rb#3
class Stringex::Configuration::StringExtensions < ::Stringex::Configuration::Base
  # source://stringex//lib/stringex/configuration/string_extensions.rb#4
  def default_settings; end

  class << self
    # source://stringex//lib/stringex/configuration/string_extensions.rb#8
    def default_settings; end
  end
end

# source://stringex//lib/stringex/localization/conversion_expressions.rb#4
module Stringex::Localization
  include ::Stringex::Localization::DefaultConversions

  class << self
    # source://stringex//lib/stringex/localization.rb#14
    def backend; end

    # source://stringex//lib/stringex/localization.rb#18
    def backend=(sym_or_class); end

    # source://stringex//lib/stringex/localization.rb#84
    def convert(string, options = T.unsafe(nil), &block); end

    # source://stringex//lib/stringex/localization.rb#62
    def default_locale; end

    # source://stringex//lib/stringex/localization.rb#66
    def default_locale=(new_locale); end

    # source://stringex//lib/stringex/localization.rb#54
    def locale; end

    # source://stringex//lib/stringex/localization.rb#58
    def locale=(new_locale); end

    # source://stringex//lib/stringex/localization.rb#79
    def reset!; end

    # source://stringex//lib/stringex/localization.rb#34
    def store_translations(locale, scope, data); end

    # source://stringex//lib/stringex/localization.rb#38
    def translate(scope, key, options = T.unsafe(nil)); end

    # source://stringex//lib/stringex/localization.rb#75
    def with_default_locale(&block); end

    # source://stringex//lib/stringex/localization.rb#70
    def with_locale(new_locale, &block); end

    private

    # source://stringex//lib/stringex/localization.rb#97
    def default_conversion(scope, key); end

    # @raise [Backend::I18nNotDefined]
    #
    # source://stringex//lib/stringex/localization.rb#106
    def ensure_i18n!; end

    # @return [Boolean]
    #
    # source://stringex//lib/stringex/localization.rb#102
    def i18n_present?; end

    # source://stringex//lib/stringex/localization.rb#93
    def initial_translation(scope, key, locale); end
  end
end

# source://stringex//lib/stringex/localization/backend/base.rb#3
module Stringex::Localization::Backend; end

# source://stringex//lib/stringex/localization/backend/base.rb#4
class Stringex::Localization::Backend::Base
  class << self
    # source://stringex//lib/stringex/localization/backend/base.rb#6
    def reset!; end
  end
end

# source://stringex//lib/stringex/localization/backend/i18n.rb#4
class Stringex::Localization::Backend::I18n < ::Stringex::Localization::Backend::Base
  class << self
    # source://stringex//lib/stringex/localization/backend/i18n.rb#22
    def default_locale; end

    # source://stringex//lib/stringex/localization/backend/i18n.rb#26
    def default_locale=(new_locale); end

    # source://stringex//lib/stringex/localization/backend/i18n.rb#64
    def ensure_locales_enforced_or_not; end

    # source://stringex//lib/stringex/localization/backend/i18n.rb#55
    def i18n_translations_for(locale); end

    # source://stringex//lib/stringex/localization/backend/i18n.rb#44
    def initial_translation(scope, key, locale); end

    # source://stringex//lib/stringex/localization/backend/i18n.rb#48
    def load_translations(locale = T.unsafe(nil)); end

    # source://stringex//lib/stringex/localization/backend/i18n.rb#14
    def locale; end

    # source://stringex//lib/stringex/localization/backend/i18n.rb#18
    def locale=(new_locale); end

    # source://stringex//lib/stringex/localization/backend/i18n.rb#8
    def reset!; end

    # source://stringex//lib/stringex/localization/backend/i18n.rb#60
    def reset_translations_cache; end

    # source://stringex//lib/stringex/localization/backend/i18n.rb#34
    def store_translations(locale, scope, data); end

    # source://stringex//lib/stringex/localization/backend/i18n.rb#39
    def translations; end

    # source://stringex//lib/stringex/localization/backend/i18n.rb#30
    def with_locale(new_locale, &block); end
  end
end

# source://stringex//lib/stringex/localization/backend/i18n.rb#5
Stringex::Localization::Backend::I18n::LOAD_PATH_BASE = T.let(T.unsafe(nil), String)

# source://stringex//lib/stringex/localization/backend/i18n.rb#79
class Stringex::Localization::Backend::I18nMissingTranslate < ::RuntimeError
  # @return [I18nMissingTranslate] a new instance of I18nMissingTranslate
  #
  # source://stringex//lib/stringex/localization/backend/i18n.rb#80
  def initialize; end
end

# source://stringex//lib/stringex/localization/backend/i18n.rb#73
class Stringex::Localization::Backend::I18nNotDefined < ::RuntimeError
  # @return [I18nNotDefined] a new instance of I18nNotDefined
  #
  # source://stringex//lib/stringex/localization/backend/i18n.rb#74
  def initialize; end
end

# source://stringex//lib/stringex/localization/backend/internal.rb#4
class Stringex::Localization::Backend::Internal < ::Stringex::Localization::Backend::Base
  class << self
    # source://stringex//lib/stringex/localization/backend/internal.rb#16
    def default_locale; end

    # source://stringex//lib/stringex/localization/backend/internal.rb#20
    def default_locale=(new_locale); end

    # source://stringex//lib/stringex/localization/backend/internal.rb#40
    def initial_translation(scope, key, locale); end

    # source://stringex//lib/stringex/localization/backend/internal.rb#8
    def locale; end

    # source://stringex//lib/stringex/localization/backend/internal.rb#12
    def locale=(new_locale); end

    # source://stringex//lib/stringex/localization/backend/internal.rb#36
    def store_translations(locale, scope, data); end

    # source://stringex//lib/stringex/localization/backend/internal.rb#31
    def translations; end

    # source://stringex//lib/stringex/localization/backend/internal.rb#24
    def with_locale(new_locale, &block); end
  end
end

# source://stringex//lib/stringex/localization/backend/internal.rb#5
Stringex::Localization::Backend::Internal::DEFAULT_LOCALE = T.let(T.unsafe(nil), Symbol)

# source://stringex//lib/stringex/localization/conversion_expressions.rb#5
module Stringex::Localization::ConversionExpressions
  class << self
    # source://stringex//lib/stringex/localization/conversion_expressions.rb#147
    def abbreviation; end

    # source://stringex//lib/stringex/localization/conversion_expressions.rb#147
    def accented_html_entity; end

    # source://stringex//lib/stringex/localization/conversion_expressions.rb#147
    def apostrophe; end

    # source://stringex//lib/stringex/localization/conversion_expressions.rb#147
    def characters; end

    # source://stringex//lib/stringex/localization/conversion_expressions.rb#147
    def cleanup_characters; end

    # source://stringex//lib/stringex/localization/conversion_expressions.rb#147
    def cleanup_html_entities; end

    # source://stringex//lib/stringex/localization/conversion_expressions.rb#147
    def currencies; end

    # source://stringex//lib/stringex/localization/conversion_expressions.rb#147
    def currencies_complex; end

    # source://stringex//lib/stringex/localization/conversion_expressions.rb#147
    def currencies_simple; end

    # source://stringex//lib/stringex/localization/conversion_expressions.rb#147
    def html_entities; end

    # source://stringex//lib/stringex/localization/conversion_expressions.rb#147
    def html_tag; end

    # source://stringex//lib/stringex/localization/conversion_expressions.rb#147
    def smart_punctuation; end

    # source://stringex//lib/stringex/localization/conversion_expressions.rb#147
    def unreadable_control_characters; end

    # source://stringex//lib/stringex/localization/conversion_expressions.rb#147
    def vulgar_fractions; end

    # source://stringex//lib/stringex/localization/conversion_expressions.rb#147
    def whitespace; end
  end
end

# source://stringex//lib/stringex/localization/conversion_expressions.rb#6
Stringex::Localization::ConversionExpressions::ABBREVIATION = T.let(T.unsafe(nil), Regexp)

# source://stringex//lib/stringex/localization/conversion_expressions.rb#8
Stringex::Localization::ConversionExpressions::ACCENTED_HTML_ENTITY = T.let(T.unsafe(nil), Regexp)

# source://stringex//lib/stringex/localization/conversion_expressions.rb#10
Stringex::Localization::ConversionExpressions::APOSTROPHE = T.let(T.unsafe(nil), Regexp)

# source://stringex//lib/stringex/localization/conversion_expressions.rb#12
Stringex::Localization::ConversionExpressions::CHARACTERS = T.let(T.unsafe(nil), Hash)

# Things that just get converted to spaces
#
# source://stringex//lib/stringex/localization/conversion_expressions.rb#28
Stringex::Localization::ConversionExpressions::CLEANUP_CHARACTERS = T.let(T.unsafe(nil), Regexp)

# source://stringex//lib/stringex/localization/conversion_expressions.rb#29
Stringex::Localization::ConversionExpressions::CLEANUP_HTML_ENTITIES = T.let(T.unsafe(nil), Regexp)

# source://stringex//lib/stringex/localization/conversion_expressions.rb#60
Stringex::Localization::ConversionExpressions::CURRENCIES = T.let(T.unsafe(nil), Hash)

# source://stringex//lib/stringex/localization/conversion_expressions.rb#51
Stringex::Localization::ConversionExpressions::CURRENCIES_COMPLEX = T.let(T.unsafe(nil), Hash)

# source://stringex//lib/stringex/localization/conversion_expressions.rb#46
Stringex::Localization::ConversionExpressions::CURRENCIES_SIMPLE = T.let(T.unsafe(nil), Hash)

# source://stringex//lib/stringex/localization/conversion_expressions.rb#45
Stringex::Localization::ConversionExpressions::CURRENCIES_SUPPORTED = T.let(T.unsafe(nil), Regexp)

# source://stringex//lib/stringex/localization/conversion_expressions.rb#39
Stringex::Localization::ConversionExpressions::CURRENCIES_SUPPORTED_COMPLEX = T.let(T.unsafe(nil), Hash)

# source://stringex//lib/stringex/localization/conversion_expressions.rb#31
Stringex::Localization::ConversionExpressions::CURRENCIES_SUPPORTED_SIMPLE = T.let(T.unsafe(nil), Hash)

# source://stringex//lib/stringex/localization/conversion_expressions.rb#62
Stringex::Localization::ConversionExpressions::HTML_ENTITIES = T.let(T.unsafe(nil), Hash)

# source://stringex//lib/stringex/localization/conversion_expressions.rb#93
Stringex::Localization::ConversionExpressions::HTML_TAG = T.let(T.unsafe(nil), Regexp)

# source://stringex//lib/stringex/localization/conversion_expressions.rb#100
Stringex::Localization::ConversionExpressions::SMART_PUNCTUATION = T.let(T.unsafe(nil), Hash)

# source://stringex//lib/stringex/localization/conversion_expressions.rb#106
Stringex::Localization::ConversionExpressions::UNREADABLE_CONTROL_CHARACTERS = T.let(T.unsafe(nil), Regexp)

# Ordered by denominator then numerator of the value
#
# source://stringex//lib/stringex/localization/conversion_expressions.rb#109
Stringex::Localization::ConversionExpressions::VULGAR_FRACTIONS = T.let(T.unsafe(nil), Hash)

# source://stringex//lib/stringex/localization/conversion_expressions.rb#127
Stringex::Localization::ConversionExpressions::WHITESPACE = T.let(T.unsafe(nil), Regexp)

# source://stringex//lib/stringex/localization/converter.rb#7
class Stringex::Localization::Converter
  include ::Stringex::Localization::ConversionExpressions

  # @return [Converter] a new instance of Converter
  #
  # source://stringex//lib/stringex/localization/converter.rb#12
  def initialize(string, options = T.unsafe(nil)); end

  # source://stringex//lib/stringex/localization/converter.rb#21
  def cleanup_accented_html_entities!; end

  # source://stringex//lib/stringex/localization/converter.rb#25
  def cleanup_characters!; end

  # source://stringex//lib/stringex/localization/converter.rb#29
  def cleanup_html_entities!; end

  # source://stringex//lib/stringex/localization/converter.rb#33
  def cleanup_smart_punctuation!; end

  # Returns the value of attribute ending_whitespace.
  #
  # source://stringex//lib/stringex/localization/converter.rb#10
  def ending_whitespace; end

  # source://stringex//lib/stringex/localization/converter.rb#39
  def normalize_currency!; end

  # Returns the value of attribute options.
  #
  # source://stringex//lib/stringex/localization/converter.rb#10
  def options; end

  # source://stringex//lib/stringex/localization/converter.rb#43
  def smart_strip!; end

  # Returns the value of attribute starting_whitespace.
  #
  # source://stringex//lib/stringex/localization/converter.rb#10
  def starting_whitespace; end

  # Returns the value of attribute string.
  #
  # source://stringex//lib/stringex/localization/converter.rb#10
  def string; end

  # source://stringex//lib/stringex/localization/converter.rb#48
  def strip!; end

  # source://stringex//lib/stringex/localization/converter.rb#52
  def strip_html_tags!; end

  # source://stringex//lib/stringex/localization/converter.rb#56
  def translate!(*conversions); end

  protected

  # source://stringex//lib/stringex/localization/converter.rb#68
  def abbreviations; end

  # source://stringex//lib/stringex/localization/converter.rb#74
  def apostrophes; end

  # source://stringex//lib/stringex/localization/converter.rb#78
  def characters; end

  # source://stringex//lib/stringex/localization/converter.rb#87
  def currencies; end

  # source://stringex//lib/stringex/localization/converter.rb#97
  def ellipses; end

  # source://stringex//lib/stringex/localization/converter.rb#101
  def html_entities; end

  # source://stringex//lib/stringex/localization/converter.rb#64
  def unreadable_control_characters; end

  # source://stringex//lib/stringex/localization/converter.rb#108
  def vulgar_fractions; end

  private

  # source://stringex//lib/stringex/localization/converter.rb#116
  def expressions; end

  # @return [Boolean]
  #
  # source://stringex//lib/stringex/localization/converter.rb#120
  def has_currencies?; end

  # source://stringex//lib/stringex/localization/converter.rb#124
  def translate(key, scope = T.unsafe(nil)); end
end

# source://stringex//lib/stringex/localization/default_conversions.rb#5
module Stringex::Localization::DefaultConversions
  class << self
    # source://stringex//lib/stringex/localization/default_conversions.rb#82
    def characters; end

    # source://stringex//lib/stringex/localization/default_conversions.rb#82
    def currencies; end

    # source://stringex//lib/stringex/localization/default_conversions.rb#82
    def html_entities; end

    # source://stringex//lib/stringex/localization/default_conversions.rb#82
    def transliterations; end

    # source://stringex//lib/stringex/localization/default_conversions.rb#82
    def vulgar_fractions; end
  end
end

# source://stringex//lib/stringex/localization/default_conversions.rb#6
Stringex::Localization::DefaultConversions::CHARACTERS = T.let(T.unsafe(nil), Hash)

# source://stringex//lib/stringex/localization/default_conversions.rb#33
Stringex::Localization::DefaultConversions::CURRENCIES = T.let(T.unsafe(nil), Hash)

# source://stringex//lib/stringex/localization/default_conversions.rb#28
Stringex::Localization::DefaultConversions::CURRENCIES_COMPLEX = T.let(T.unsafe(nil), Hash)

# source://stringex//lib/stringex/localization/default_conversions.rb#21
Stringex::Localization::DefaultConversions::CURRENCIES_SIMPLE = T.let(T.unsafe(nil), Hash)

# source://stringex//lib/stringex/localization/default_conversions.rb#35
Stringex::Localization::DefaultConversions::HTML_ENTITIES = T.let(T.unsafe(nil), Hash)

# source://stringex//lib/stringex/localization/default_conversions.rb#59
Stringex::Localization::DefaultConversions::TRANSLITERATIONS = T.let(T.unsafe(nil), Hash)

# Ordered by denominator then numerator of the value
#
# source://stringex//lib/stringex/localization/default_conversions.rb#62
Stringex::Localization::DefaultConversions::VULGAR_FRACTIONS = T.let(T.unsafe(nil), Hash)

# source://stringex//lib/stringex/rails/railtie.rb#2
class Stringex::Railtie < ::Rails::Railtie; end

# source://stringex//lib/stringex/string_extensions.rb#4
module Stringex::StringExtensions
  class << self
    # source://stringex//lib/stringex/string_extensions.rb#5
    def configure(&block); end

    # source://stringex//lib/stringex/string_extensions.rb#9
    def unconfigure!; end
  end
end

# These methods are extended onto the String class itself.
#
# source://stringex//lib/stringex/string_extensions.rb#215
module Stringex::StringExtensions::PublicClassMethods
  # Returns string of random characters with a length matching the specified limit. Excludes 0
  # to avoid confusion between 0 and O.
  #
  # source://stringex//lib/stringex/string_extensions.rb#218
  def random(limit); end
end

# These methods are all included into the String class.
#
# source://stringex//lib/stringex/string_extensions.rb#14
module Stringex::StringExtensions::PublicInstanceMethods
  # Removes specified character from the beginning and/or end of the string and then performs
  # <tt>String#squeeze(character)</tt>, condensing runs of the character within the string.
  #
  # Note: This method has been superceded by ActiveSupport's squish method.
  #
  # source://stringex//lib/stringex/string_extensions.rb#19
  def collapse(character = T.unsafe(nil)); end

  # Converts HTML entities into the respective non-accented letters. Examples:
  #
  #   "&aacute;".convert_accented_entities # => "a"
  #   "&ccedil;".convert_accented_entities # => "c"
  #   "&egrave;".convert_accented_entities # => "e"
  #   "&icirc;".convert_accented_entities # => "i"
  #   "&oslash;".convert_accented_entities # => "o"
  #   "&uuml;".convert_accented_entities # => "u"
  #
  # Note: This does not do any conversion of Unicode/ASCII accented-characters. For that
  # functionality please use <tt>to_ascii</tt>.
  #
  # source://stringex//lib/stringex/string_extensions.rb#34
  def convert_accented_html_entities; end

  # Converts various common plaintext characters to a more URI-friendly representation.
  # Examples:
  #
  #   "foo & bar".convert_misc_characters # => "foo and bar"
  #   "Chanel #9".convert_misc_characters # => "Chanel number nine"
  #   "user@host".convert_misc_characters # => "user at host"
  #   "google.com".convert_misc_characters # => "google dot com"
  #   "$10".convert_misc_characters # => "10 dollars"
  #   "*69".convert_misc_characters # => "star 69"
  #   "100%".convert_misc_characters # => "100 percent"
  #   "windows/mac/linux".convert_misc_characters # => "windows slash mac slash linux"
  #
  # It allows localization of conversions so you can use it to convert characters into your own language.
  # Example:
  #
  #   I18n.backend.store_translations :de, { stringex: { characters: { and: "und" } } }
  #   I18n.locale = :de
  #   "ich & dich".convert_misc_characters # => "ich und dich"
  #
  # Note: Because this method will convert any & symbols to the string "and",
  # you should run any methods which convert HTML entities (convert_accented_html_entities and convert_miscellaneous_html_entities)
  # before running this method.
  #
  # source://stringex//lib/stringex/string_extensions.rb#62
  def convert_miscellaneous_characters(options = T.unsafe(nil)); end

  # Converts HTML entities (taken from common Textile/RedCloth formattings) into plain text formats.
  #
  # Note: This isn't an attempt at complete conversion of HTML entities, just those most likely
  # to be generated by Textile.
  #
  # source://stringex//lib/stringex/string_extensions.rb#74
  def convert_miscellaneous_html_entities; end

  # Converts MS Word 'smart punctuation' to ASCII
  #
  # source://stringex//lib/stringex/string_extensions.rb#83
  def convert_smart_punctuation; end

  # source://stringex//lib/stringex/string_extensions.rb#96
  def convert_unreadable_control_characters; end

  # Converts vulgar fractions from supported HTML entities and Unicode to plain text formats.
  #
  # source://stringex//lib/stringex/string_extensions.rb#90
  def convert_vulgar_fractions; end

  # Returns the string limited in size to the value of limit.
  #
  # source://stringex//lib/stringex/string_extensions.rb#103
  def limit(limit = T.unsafe(nil), truncate_words = T.unsafe(nil), whitespace_replacement_token = T.unsafe(nil)); end

  # Performs multiple text manipulations. Essentially a shortcut for typing them all. View source
  # below to see which methods are run.
  #
  # source://stringex//lib/stringex/string_extensions.rb#130
  def remove_formatting(options = T.unsafe(nil)); end

  # Replace runs of whitespace in string. Defaults to a single space but any replacement
  # string may be specified as an argument. Examples:
  #
  #   "Foo       bar".replace_whitespace # => "Foo bar"
  #   "Foo       bar".replace_whitespace("-") # => "Foo-bar"
  #
  # source://stringex//lib/stringex/string_extensions.rb#150
  def replace_whitespace(replacement = T.unsafe(nil)); end

  # Removes HTML tags from text.
  # NOTE: This code is simplified from Tobias Luettke's regular expression in Typo[http://typosphere.org].
  #
  # source://stringex//lib/stringex/string_extensions.rb#156
  def strip_html_tags(leave_whitespace = T.unsafe(nil)); end

  # Returns string with its UTF-8 characters transliterated to ASCII ones. Example:
  #
  #   "⠋⠗⠁⠝⠉⠑".to_ascii #=> "france"
  #
  # source://stringex//lib/stringex/unidecoder.rb#77
  def to_ascii; end

  # Returns the string converted (via Textile/RedCloth) to HTML format
  # or self [with a friendly warning] if Redcloth is not available.
  #
  # Using <tt>:lite</tt> argument will cause RedCloth to not wrap the HTML in a container
  # P element, which is useful behavior for generating header element text, etc.
  # This is roughly equivalent to ActionView's <tt>textilize_without_paragraph</tt>
  # except that it makes RedCloth do all the work instead of just gsubbing the return
  # from RedCloth.
  #
  # source://stringex//lib/stringex/string_extensions.rb#171
  def to_html(lite_mode = T.unsafe(nil)); end

  # Create a URI-friendly representation of the string. This is used internally by
  # acts_as_url[link:classes/Stringex/ActsAsUrl/ClassMethods.html#M000012]
  # but can be called manually in order to generate an URI-friendly version of any string.
  #
  # source://stringex//lib/stringex/string_extensions.rb#191
  def to_url(options = T.unsafe(nil)); end

  # source://stringex//lib/stringex/string_extensions.rb#111
  def whole_word_limit(limit, whitespace_replacement_token = T.unsafe(nil)); end

  private

  # source://stringex//lib/stringex/string_extensions.rb#205
  def stringex_convert(options = T.unsafe(nil), &block); end

  # source://stringex//lib/stringex/string_extensions.rb#209
  def stringex_default_options; end
end

# source://stringex//lib/stringex/unidecoder.rb#7
module Stringex::Unidecoder
  class << self
    # Returns string with its UTF-8 characters transliterated to ASCII ones
    #
    # You're probably better off just using the added String#to_ascii
    #
    # source://stringex//lib/stringex/unidecoder.rb#17
    def decode(string); end

    # Returns character for the given Unicode codepoint
    #
    # source://stringex//lib/stringex/unidecoder.rb#22
    def encode(codepoint); end

    # Returns Unicode codepoint for the given character
    #
    # source://stringex//lib/stringex/unidecoder.rb#27
    def get_codepoint(character); end

    # Returns string indicating which file (and line) contains the
    # transliteration value for the character
    #
    # source://stringex//lib/stringex/unidecoder.rb#33
    def in_yaml_file(character); end

    private

    # Returns the Unicode codepoint grouping for the given character
    #
    # source://stringex//lib/stringex/unidecoder.rb#59
    def code_group(unpacked_character); end

    # source://stringex//lib/stringex/unidecoder.rb#40
    def decoded(character); end

    # source://stringex//lib/stringex/unidecoder.rb#48
    def from_yaml(character); end

    # Returns the index of the given character in the YAML file for its codepoint group
    #
    # source://stringex//lib/stringex/unidecoder.rb#64
    def grouped_point(unpacked_character); end

    # source://stringex//lib/stringex/unidecoder.rb#44
    def localized(character); end
  end
end

# Contains Unicode codepoints, loading as needed from YAML files
#
# source://stringex//lib/stringex/unidecoder.rb#9
Stringex::Unidecoder::CODEPOINTS = T.let(T.unsafe(nil), Hash)

# source://stringex//lib/stringex/version.rb#2
module Stringex::Version; end

# source://stringex//lib/stringex/version.rb#3
Stringex::Version::MAJOR = T.let(T.unsafe(nil), Integer)

# source://stringex//lib/stringex/version.rb#4
Stringex::Version::MINOR = T.let(T.unsafe(nil), Integer)

# source://stringex//lib/stringex/version.rb#5
Stringex::Version::PATCH = T.let(T.unsafe(nil), Integer)

# source://stringex//lib/stringex/version.rb#6
Stringex::Version::STRING = T.let(T.unsafe(nil), String)
