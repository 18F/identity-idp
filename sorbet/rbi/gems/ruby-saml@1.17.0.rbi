# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ruby-saml` gem.
# Please instead update this file by running `bin/tapioca gem ruby-saml`.


# Only supports SAML 2.0
#
# source://ruby-saml//lib/onelogin/ruby-saml/logging.rb#4
module OneLogin; end

# source://ruby-saml//lib/onelogin/ruby-saml/logging.rb#5
module OneLogin::RubySaml
  include ::REXML
end

# SAML2 AttributeService. Auxiliary class to build the AttributeService of the SP Metadata
#
# source://ruby-saml//lib/onelogin/ruby-saml/attribute_service.rb#6
class OneLogin::RubySaml::AttributeService
  # Initializes the AttributeService, set the index value as 1 and an empty array as attributes
  #
  # @return [AttributeService] a new instance of AttributeService
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/attribute_service.rb#13
  def initialize; end

  # Add an AttributeService
  #
  # @param options [Hash] AttributeService option values
  #   add_attribute(
  #   :name => "Name",
  #   :name_format => "Name Format",
  #   :index => 1,
  #   :friendly_name => "Friendly Name",
  #   :attribute_value => "Attribute Value"
  #   )
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/attribute_service.rb#52
  def add_attribute(options = T.unsafe(nil)); end

  # Returns the value of attribute attributes.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/attribute_service.rb#7
  def attributes; end

  # source://ruby-saml//lib/onelogin/ruby-saml/attribute_service.rb#18
  def configure(&block); end

  # @return [Boolean] True if the AttributeService object has been initialized and set with the required values
  #   (has attributes and a name)
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/attribute_service.rb#24
  def configured?; end

  # Returns the value of attribute index.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/attribute_service.rb#9
  def index; end

  # Returns the value of attribute name.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/attribute_service.rb#8
  def name; end

  # Set an index to the service
  #
  # @param index [Integer] An index
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/attribute_service.rb#38
  def service_index(index); end

  # Set a name to the service
  #
  # @param name [String] The service name
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/attribute_service.rb#31
  def service_name(name); end
end

# SAML2 Attributes. Parse the Attributes from the AttributeStatement of the SAML Response.
#
# source://ruby-saml//lib/onelogin/ruby-saml/attributes.rb#6
class OneLogin::RubySaml::Attributes
  include ::Enumerable

  # @param attrs [Hash] The +attrs+ must be a Hash with attribute names as keys and **arrays** as values:
  #   Attributes.new({
  #   'name' => ['value1', 'value2'],
  #   'mail' => ['value1'],
  #   })
  # @return [Attributes] a new instance of Attributes
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/attributes.rb#35
  def initialize(attrs = T.unsafe(nil)); end

  # Make comparable to another Attributes collection based on attributes
  #
  # @param other [Attributes] An Attributes object to compare with
  # @return [Boolean] True if are contains the same attributes and values
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/attributes.rb#108
  def ==(other); end

  # Retrieve attribute value(s)
  #
  # @param name [String] The attribute name
  # @return [String|Array] Depending on the single value compatibility status this returns:
  #   - First value if single_value_compatibility = true
  #   response.attributes['mail']  # => 'user@example.com'
  #   - All values if single_value_compatibility = false
  #   response.attributes['mail']  # => ['user@example.com','user@example.net']
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/attributes.rb#78
  def [](name); end

  # @param name [String] The attribute name
  # @param values [Array] The values
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/attributes.rb#91
  def []=(name, values); end

  # @param name [String] The attribute name
  # @param values [Array] The values
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/attributes.rb#99
  def add(name, values = T.unsafe(nil)); end

  # @return [Hash] Return all attributes as a hash
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/attributes.rb#84
  def all; end

  # Returns the value of attribute attributes.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/attributes.rb#9
  def attributes; end

  # Iterate over all attributes
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/attributes.rb#42
  def each; end

  # Fetch attribute value using name or regex
  #
  # @param name [String|Regexp] The attribute name
  # @return [String|Array] Depending on the single value compatibility status this returns:
  #   - First value if single_value_compatibility = true
  #   response.attributes['mail']  # => 'user@example.com'
  #   - All values if single_value_compatibility = false
  #   response.attributes['mail']  # => ['user@example.com','user@example.net']
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/attributes.rb#124
  def fetch(name); end

  # Test attribute presence by name
  #
  # @param name [String] The attribute name to be checked
  # @return [Boolean]
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/attributes.rb#50
  def include?(name); end

  # Return all values for an attribute
  #
  # @param name [String] The attribute name
  # @return [Array] Values of the attribute
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/attributes.rb#66
  def multi(name); end

  # @param name [String] The attribute name
  # @param values [Array] The values
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/attributes.rb#91
  def set(name, values); end

  # Return first value for an attribute
  #
  # @param name [String] The attribute name
  # @return [String] The value (First occurrence)
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/attributes.rb#58
  def single(name); end

  protected

  # stringifies all names so both 'email' and :email return the same result
  #
  # @param name [String] The attribute name
  # @return [String] stringified name
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/attributes.rb#145
  def canonize_name(name); end

  class << self
    # @return [Boolean] Get current status of backwards compatibility mode.
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/attributes.rb#18
    def single_value_compatibility; end

    # Sets the backwards compatibility mode on/off.
    #
    # @param value [Boolean]
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/attributes.rb#25
    def single_value_compatibility=(value); end
  end
end

# SAML2 Authentication. AuthNRequest (SSO SP initiated, Builder)
#
# source://ruby-saml//lib/onelogin/ruby-saml/authrequest.rb#15
class OneLogin::RubySaml::Authrequest < ::OneLogin::RubySaml::SamlMessage
  # Initializes the AuthNRequest. An Authrequest Object that is an extension of the SamlMessage class.
  # Asigns an ID, a random uuid.
  #
  # @return [Authrequest] a new instance of Authrequest
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/authrequest.rb#23
  def initialize; end

  # Creates the AuthNRequest string.
  #
  # @param settings [OneLogin::RubySaml::Settings|nil] Toolkit settings
  # @param params [Hash] Some extra parameters to be added in the GET for example the RelayState
  # @return [String] AuthNRequest string that includes the SAMLRequest
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/authrequest.rb#36
  def create(settings, params = T.unsafe(nil)); end

  # Creates the SAMLRequest String.
  #
  # @param settings [OneLogin::RubySaml::Settings|nil] Toolkit settings
  # @return [String] The SAMLRequest String.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/authrequest.rb#101
  def create_authentication_xml_doc(settings); end

  # Creates the Get parameters for the request.
  #
  # @param settings [OneLogin::RubySaml::Settings|nil] Toolkit settings
  # @param params [Hash] Some extra parameters to be added in the GET for example the RelayState
  # @return [Hash] Parameters
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/authrequest.rb#53
  def create_params(settings, params = T.unsafe(nil)); end

  # source://ruby-saml//lib/onelogin/ruby-saml/authrequest.rb#106
  def create_xml_document(settings); end

  # source://ruby-saml//lib/onelogin/ruby-saml/authrequest.rb#27
  def request_id; end

  # source://ruby-saml//lib/onelogin/ruby-saml/authrequest.rb#182
  def sign_document(document, settings); end

  # AuthNRequest ID
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/authrequest.rb#18
  def uuid; end

  # AuthNRequest ID
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/authrequest.rb#18
  def uuid=(_arg0); end
end

# source://ruby-saml//lib/onelogin/ruby-saml/error_handling.rb#5
module OneLogin::RubySaml::ErrorHandling
  # Append the cause to the errors array, and based on the value of soft, return false or raise
  # an exception. soft_override is provided as a means of overriding the object's notion of
  # soft for just this invocation.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/error_handling.rb#11
  def append_error(error_msg, soft_override = T.unsafe(nil)); end

  # Returns the value of attribute errors.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/error_handling.rb#6
  def errors; end

  # Sets the attribute errors
  #
  # @param value the value to set the attribute errors to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/error_handling.rb#6
  def errors=(_arg0); end

  # Reset the errors array
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/error_handling.rb#22
  def reset_errors!; end
end

# source://ruby-saml//lib/onelogin/ruby-saml/http_error.rb#3
class OneLogin::RubySaml::HttpError < ::StandardError; end

# Auxiliary class to retrieve and parse the Identity Provider Metadata
#
# This class does not validate in any way the URL that is introduced,
# make sure to validate it properly before use it in a parse_remote method.
# Read the `Security warning` section of the README.md file to get more info
#
# source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#18
class OneLogin::RubySaml::IdpMetadataParser
  include ::OneLogin::RubySaml::IdpMetadataParser::SamlMetadata::Vocabulary

  # Returns the value of attribute document.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#37
  def document; end

  # Retrieve the remote IdP metadata from the URL or a cached copy.
  #
  # @param url [String] Url where the XML of the Identity Provider Metadata is published.
  # @param validate_cert [Boolean] If true and the URL is HTTPs, the cert of the domain is checked.
  # @raise [HttpError] Failure to fetch remote IdP metadata
  # @return [REXML::document] Parsed XML IdP metadata
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#194
  def get_idp_metadata(url, validate_cert); end

  # Returns the value of attribute options.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#39
  def options; end

  # Parse the Identity Provider metadata and update the settings with the IdP values
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param idp_metadata [String]
  # @param options [Hash] :settings to provide the OneLogin::RubySaml::Settings object or an hash for Settings overrides
  # @return [OneLogin::RubySaml::Settings]
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#121
  def parse(idp_metadata, options = T.unsafe(nil)); end

  # Parse the Identity Provider metadata and update the settings with the
  # IdP values
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param url [String] Url where the XML of the Identity Provider Metadata is published.
  # @param validate_cert [Boolean] If true and the URL is HTTPs, the cert of the domain is checked.
  # @param options [Hash] options used for parsing the metadata and the returned Settings instance
  # @raise [HttpError] Failure to fetch remote IdP metadata
  # @return [OneLogin::RubySaml::Settings]
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#67
  def parse_remote(url, validate_cert = T.unsafe(nil), options = T.unsafe(nil)); end

  # Parse all Identity Provider metadata and return the results as Array
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @param url [String] Url where the XML of the Identity Provider Metadata is published.
  # @param validate_cert [Boolean] If true and the URL is HTTPs, the cert of the domain is checked.
  # @param options [Hash] options used for parsing the metadata
  # @raise [HttpError] Failure to fetch remote IdP metadata
  # @return [Array<Hash>]
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#104
  def parse_remote_to_array(url, validate_cert = T.unsafe(nil), options = T.unsafe(nil)); end

  # Parse the Identity Provider metadata and return the results as Hash
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @param url [String] Url where the XML of the Identity Provider Metadata is published.
  # @param validate_cert [Boolean] If true and the URL is HTTPs, the cert of the domain is checked.
  # @param options [Hash] options used for parsing the metadata
  # @raise [HttpError] Failure to fetch remote IdP metadata
  # @return [Hash]
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#86
  def parse_remote_to_hash(url, validate_cert = T.unsafe(nil), options = T.unsafe(nil)); end

  # Parse all Identity Provider metadata and return the results as Array
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @param idp_metadata [String]
  # @param options [Hash] options used for parsing the metadata and the returned Settings instance
  # @return [Array<Hash>]
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#173
  def parse_to_array(idp_metadata, options = T.unsafe(nil)); end

  # Parse the Identity Provider metadata and return the results as Hash
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @param idp_metadata [String]
  # @param options [Hash] options used for parsing the metadata and the returned Settings instance
  # @return [Hash]
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#158
  def parse_to_hash(idp_metadata, options = T.unsafe(nil)); end

  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#177
  def parse_to_idp_metadata_array(idp_metadata, options = T.unsafe(nil)); end

  # Returns the value of attribute response.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#38
  def response; end

  private

  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#464
  def merge_parsed_metadata_into(settings, parsed_metadata); end

  class << self
    # fetch IdP descriptors from a metadata document
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#42
    def get_idps(metadata_document, only_entity_id = T.unsafe(nil)); end
  end
end

# source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#223
class OneLogin::RubySaml::IdpMetadataParser::IdpMetadata
  # @return [IdpMetadata] a new instance of IdpMetadata
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#226
  def initialize(idpsso_descriptor, entity_id); end

  # @return [Array] the names of all SAML attributes if any exist
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#399
  def attribute_names; end

  # @return [String|nil] 'cacheDuration' attribute of metadata
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#262
  def cache_duration; end

  # @return [String|nil] Unformatted Certificate if exists
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#350
  def certificates; end

  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#433
  def certificates_has_one(key); end

  # Returns the value of attribute entity_id.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#224
  def entity_id; end

  # @return [String|nil] the fingerpint of the X509Certificate if it exists
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#386
  def fingerprint(certificate, fingerprint_algorithm = T.unsafe(nil)); end

  # @param name_id_priority [String|Array<String>] The prioritized list of NameIDFormat values to select. Will select first value if nil.
  # @return [String|nil] IdP NameIDFormat value if exists
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#270
  def idp_name_id_format(name_id_priority = T.unsafe(nil)); end

  # Returns the value of attribute idpsso_descriptor.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#224
  def idpsso_descriptor; end

  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#408
  def merge_certificates_into(parsed_metadata); end

  # @param binding_priority [String|Array<String>] The prioritized list of Binding values to select. Will select first value if nil.
  # @return [String|nil] SingleLogoutService response url if exists
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#336
  def single_logout_response_service_url(binding_priority = T.unsafe(nil)); end

  # @param binding_priority [String|Array<String>] The prioritized list of Binding values to select. Will select first value if nil.
  # @return [String|nil] SingleLogoutService binding if exists
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#294
  def single_logout_service_binding(binding_priority = T.unsafe(nil)); end

  # @param binding_priority [String|Array<String>] The prioritized list of Binding values to select. Will select first value if nil.
  # @return [String|nil] SingleLogoutService endpoint if exists
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#321
  def single_logout_service_url(binding_priority = T.unsafe(nil)); end

  # @param binding_priority [String|Array<String>] The prioritized list of Binding values to select. Will select first value if nil.
  # @return [String|nil] SingleSignOnService binding if exists
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#282
  def single_signon_service_binding(binding_priority = T.unsafe(nil)); end

  # @param binding_priority [String|Array<String>] The prioritized list of Binding values to select. Will select first value if nil.
  # @return [String|nil] SingleSignOnService endpoint if exists
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#306
  def single_signon_service_url(binding_priority = T.unsafe(nil)); end

  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#231
  def to_hash(options = T.unsafe(nil)); end

  # @return [String|nil] 'validUntil' attribute of metadata
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#255
  def valid_until; end

  private

  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#439
  def first_ranked_text(nodes, priority = T.unsafe(nil)); end

  # source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#451
  def first_ranked_value(nodes, priority = T.unsafe(nil)); end
end

# source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#20
module OneLogin::RubySaml::IdpMetadataParser::SamlMetadata; end

# source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#28
OneLogin::RubySaml::IdpMetadataParser::SamlMetadata::NAMESPACE = T.let(T.unsafe(nil), Hash)

# source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#21
module OneLogin::RubySaml::IdpMetadataParser::SamlMetadata::Vocabulary; end

# source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#23
OneLogin::RubySaml::IdpMetadataParser::SamlMetadata::Vocabulary::DSIG = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#22
OneLogin::RubySaml::IdpMetadataParser::SamlMetadata::Vocabulary::METADATA = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#24
OneLogin::RubySaml::IdpMetadataParser::SamlMetadata::Vocabulary::NAME_FORMAT = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/onelogin/ruby-saml/idp_metadata_parser.rb#25
OneLogin::RubySaml::IdpMetadataParser::SamlMetadata::Vocabulary::SAML_ASSERTION = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/onelogin/ruby-saml/logging.rb#6
class OneLogin::RubySaml::Logging
  class << self
    # source://ruby-saml//lib/onelogin/ruby-saml/logging.rb#20
    def debug(message); end

    # source://ruby-saml//lib/onelogin/ruby-saml/logging.rb#26
    def info(message); end

    # source://ruby-saml//lib/onelogin/ruby-saml/logging.rb#9
    def logger; end

    # source://ruby-saml//lib/onelogin/ruby-saml/logging.rb#16
    def logger=(logger); end
  end
end

# source://ruby-saml//lib/onelogin/ruby-saml/logging.rb#7
OneLogin::RubySaml::Logging::DEFAULT_LOGGER = T.let(T.unsafe(nil), Logger)

# SAML2 Logout Request (SLO SP initiated, Builder)
#
# source://ruby-saml//lib/onelogin/ruby-saml/logoutrequest.rb#12
class OneLogin::RubySaml::Logoutrequest < ::OneLogin::RubySaml::SamlMessage
  # Initializes the Logout Request. A Logoutrequest Object that is an extension of the SamlMessage class.
  # Asigns an ID, a random uuid.
  #
  # @return [Logoutrequest] a new instance of Logoutrequest
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutrequest.rb#20
  def initialize; end

  # Creates the Logout Request string.
  #
  # @param settings [OneLogin::RubySaml::Settings|nil] Toolkit settings
  # @param params [Hash] Some extra parameters to be added in the GET for example the RelayState
  # @return [String] Logout Request string that includes the SAMLRequest
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutrequest.rb#33
  def create(settings, params = T.unsafe(nil)); end

  # Creates the SAMLRequest String.
  #
  # @param settings [OneLogin::RubySaml::Settings|nil] Toolkit settings
  # @return [String] The SAMLRequest String.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutrequest.rb#98
  def create_logout_request_xml_doc(settings); end

  # Creates the Get parameters for the logout request.
  #
  # @param settings [OneLogin::RubySaml::Settings|nil] Toolkit settings
  # @param params [Hash] Some extra parameters to be added in the GET for example the RelayState
  # @return [Hash] Parameters
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutrequest.rb#50
  def create_params(settings, params = T.unsafe(nil)); end

  # source://ruby-saml//lib/onelogin/ruby-saml/logoutrequest.rb#103
  def create_xml_document(settings); end

  # source://ruby-saml//lib/onelogin/ruby-saml/logoutrequest.rb#24
  def request_id; end

  # source://ruby-saml//lib/onelogin/ruby-saml/logoutrequest.rb#140
  def sign_document(document, settings); end

  # Logout Request ID
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutrequest.rb#15
  def uuid; end

  # Logout Request ID
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutrequest.rb#15
  def uuid=(_arg0); end
end

# SAML2 Logout Response (SLO IdP initiated, Parser)
#
# source://ruby-saml//lib/onelogin/ruby-saml/logoutresponse.rb#12
class OneLogin::RubySaml::Logoutresponse < ::OneLogin::RubySaml::SamlMessage
  include ::OneLogin::RubySaml::ErrorHandling

  # Constructs the Logout Response. A Logout Response Object that is an extension of the SamlMessage class.
  #
  # @param response [String] A UUEncoded logout response from the IdP.
  # @param settings [OneLogin::RubySaml::Settings|nil] Toolkit settings
  # @param options [Hash] Extra parameters.
  #   :matches_request_id It will validate that the logout response matches the ID of the request.
  #   :get_params GET Parameters, including the SAMLResponse
  #   :relax_signature_validation to accept signatures if no idp certificate registered on settings
  # @raise [ArgumentError] if response is nil
  # @return [Logoutresponse] a new instance of Logoutresponse
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutresponse.rb#34
  def initialize(response, settings = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns the value of attribute document.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutresponse.rb#18
  def document; end

  # @return [String|nil] Gets the InResponseTo attribute from the Logout Response if exists.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutresponse.rb#64
  def in_response_to; end

  # @return [String] Gets the Issuer from the Logout Response.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutresponse.rb#77
  def issuer; end

  # Returns the value of attribute options.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutresponse.rb#20
  def options; end

  # Returns the value of attribute response.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutresponse.rb#19
  def response; end

  # source://ruby-saml//lib/onelogin/ruby-saml/logoutresponse.rb#50
  def response_id; end

  # OneLogin::RubySaml::Settings Toolkit settings
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutresponse.rb#16
  def settings; end

  # OneLogin::RubySaml::Settings Toolkit settings
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutresponse.rb#16
  def settings=(_arg0); end

  # Returns the value of attribute soft.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutresponse.rb#22
  def soft; end

  # Sets the attribute soft
  #
  # @param value the value to set the attribute soft to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutresponse.rb#22
  def soft=(_arg0); end

  # @return [String] Gets the StatusCode from a Logout Response.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutresponse.rb#90
  def status_code; end

  # source://ruby-saml//lib/onelogin/ruby-saml/logoutresponse.rb#97
  def status_message; end

  # Checks if the Status has the "Success" code
  #
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if the StatusCode is Sucess
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutresponse.rb#58
  def success?; end

  # Aux function to validate the Logout Response
  #
  # @param collect_errors [Boolean] Stop validation when first error appears or keep validating. (if soft=true)
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] TRUE if the SAML Response is valid
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutresponse.rb#113
  def validate(collect_errors = T.unsafe(nil)); end

  private

  # Validates if a provided :matches_request_id matchs the inResponseTo value.
  #
  # @param soft [String|nil] request_id The ID of the Logout Request sent by this SP to the IdP (if was sent any)
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if there is no request_id or it match, otherwise False if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutresponse.rb#184
  def valid_in_response_to?; end

  # Validates the Issuer of the Logout Response
  #
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if the Issuer matchs the IdP entityId, otherwise False if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutresponse.rb#197
  def valid_issuer?; end

  # Validates that the Logout Response provided in the initialization is not empty,
  # also check that the setting and the IdP cert were also provided
  #
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if the required info is found, otherwise False if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutresponse.rb#165
  def valid_state?; end

  # Validates the Signature if it exists and the GET parameters are provided
  #
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if not contains a Signature or if the Signature is valid, otherwise False if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutresponse.rb#210
  def validate_signature; end

  # Validates the Logout Response against the specified schema.
  #
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if the XML is valid, otherwise False if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutresponse.rb#152
  def validate_structure; end

  # Validates the Status of the Logout Response
  # If fails, the error is added to the errors array, including the StatusCode returned and the Status Message.
  #
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if the Logout Response contains a Success code, otherwise False if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/logoutresponse.rb#140
  def validate_success_status; end
end

# SAML2 Metadata. XML Metadata Builder
#
# source://ruby-saml//lib/onelogin/ruby-saml/metadata.rb#12
class OneLogin::RubySaml::Metadata
  # Return SP metadata based on the settings.
  #
  # @param settings [OneLogin::RubySaml::Settings|nil] Toolkit settings
  # @param pretty_print [Boolean] Pretty print or not the response
  #   (No pretty print if you gonna validate the signature)
  # @param valid_until [DateTime] Metadata's valid time
  # @param cache_duration [Integer] Duration of the cache in seconds
  # @return [String] XML Metadata of the Service Provider
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/metadata.rb#22
  def generate(settings, pretty_print = T.unsafe(nil), valid_until = T.unsafe(nil), cache_duration = T.unsafe(nil)); end

  protected

  # can be overridden in subclass
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/metadata.rb#134
  def add_extras(root, _settings); end

  # source://ruby-saml//lib/onelogin/ruby-saml/metadata.rb#40
  def add_root_element(meta_doc, settings, valid_until, cache_duration); end

  # Add KeyDescriptor elements for SP certificates.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/metadata.rb#66
  def add_sp_certificates(sp_sso, settings); end

  # source://ruby-saml//lib/onelogin/ruby-saml/metadata.rb#78
  def add_sp_service_elements(sp_sso, settings); end

  # source://ruby-saml//lib/onelogin/ruby-saml/metadata.rb#57
  def add_sp_sso_element(root, settings); end

  # source://ruby-saml//lib/onelogin/ruby-saml/metadata.rb#36
  def add_xml_declaration(meta_doc); end

  # source://ruby-saml//lib/onelogin/ruby-saml/metadata.rb#138
  def embed_signature(meta_doc, settings); end

  # source://ruby-saml//lib/onelogin/ruby-saml/metadata.rb#147
  def output_xml(meta_doc, pretty_print); end

  private

  # source://ruby-saml//lib/onelogin/ruby-saml/metadata.rb#162
  def add_sp_cert_element(sp_sso, cert, use); end
end

# SAML2 Authentication Response. SAML Response
#
# source://ruby-saml//lib/onelogin/ruby-saml/response.rb#13
class OneLogin::RubySaml::Response < ::OneLogin::RubySaml::SamlMessage
  include ::OneLogin::RubySaml::ErrorHandling

  # Constructs the SAML Response. A Response Object that is an extension of the SamlMessage class.
  #
  # @param response [String] A UUEncoded SAML response from the IdP.
  # @param options [Hash] :settings to provide the OneLogin::RubySaml::Settings object
  #   Or some options for the response validation process like skip the conditions validation
  #   with the :skip_conditions, or allow a clock_drift when checking dates with :allowed_clock_drift
  #   or :matches_request_id that will validate that the response matches the ID of the request,
  #   or skip the subject confirmation validation with the :skip_subject_confirmation option
  #   or skip the recipient validation of the subject confirmation element with :skip_recipient_check option
  #   or skip the audience validation with :skip_audience option
  # @raise [ArgumentError]
  # @return [Response] a new instance of Response
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#52
  def initialize(response, options = T.unsafe(nil)); end

  # returns the allowed clock drift on timing validation
  #
  # @return [Float]
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#341
  def allowed_clock_drift; end

  # Checks if the SAML Response contains or not an EncryptedAssertion element
  #
  # @return [Boolean] True if the SAML Response contains an EncryptedAssertion element
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#348
  def assertion_encrypted?; end

  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#360
  def assertion_id; end

  # Gets the Attributes from the AttributeStatement element.
  #
  # All attributes can be iterated over +attributes.each+ or returned as array by +attributes.all+
  # For backwards compatibility ruby-saml returns by default only the first value for a given attribute with
  #    attributes['name']
  # To get all of the attributes, use:
  #    attributes.multi('name')
  # Or turn off the compatibility:
  #    OneLogin::RubySaml::Attributes.single_value_compatibility = false
  # Now this will return an array:
  #    attributes['name']
  #
  # @raise [ValidationError] if there are 2+ Attribute with the same Name
  # @return [Attributes] OneLogin::RubySaml::Attributes enumerable collection.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#147
  def attributes; end

  # @return [Array] The Audience elements from the Contitions of the SAML Response.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#332
  def audiences; end

  # Gets the Condition Element of the SAML Response if exists.
  # (returns the first node that matches the supplied xpath)
  #
  # @return [REXML::Element] Conditions Element if exists
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#258
  def conditions; end

  # Returns the value of attribute decrypted_document.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#27
  def decrypted_document; end

  # @return [String|nil] Destination attribute from the SAML Response.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#319
  def destination; end

  # Returns the value of attribute document.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#26
  def document; end

  # @return [String|nil] The InResponseTo attribute from the SAML Response.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#306
  def in_response_to; end

  # Validates the SAML Response with the default values (soft = true)
  #
  # @param collect_errors [Boolean] Stop validation when first error appears or keep validating. (if soft=true)
  # @return [Boolean] TRUE if the SAML Response is valid
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#78
  def is_valid?(collect_errors = T.unsafe(nil)); end

  # Gets the Issuers (from Response and Assertion).
  # (returns the first node that matches the supplied xpath from the Response and from the Assertion)
  #
  # @return [Array] Array with the Issuers (REXML::Element)
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#280
  def issuers; end

  # @return [String] the NameID provided by the SAML response from the IdP.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#84
  def name_id; end

  # @return [String] the NameID Format provided by the SAML response from the IdP.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#92
  def name_id_format; end

  # @return [String] the NameID NameQualifier provided by the SAML response from the IdP.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#112
  def name_id_namequalifier; end

  # @return [String] the NameID SPNameQualifier provided by the SAML response from the IdP.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#103
  def name_id_spnamequalifier; end

  # @return [String] the NameID provided by the SAML response from the IdP.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#84
  def nameid; end

  # @return [String] the NameID Format provided by the SAML response from the IdP.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#92
  def nameid_format; end

  # Gets the NotBefore Condition Element value.
  #
  # @return [Time] The NotBefore value in Time format
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#265
  def not_before; end

  # Gets the NotOnOrAfter Condition Element value.
  #
  # @return [Time] The NotOnOrAfter value in Time format
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#272
  def not_on_or_after; end

  # Returns the value of attribute options.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#29
  def options; end

  # Returns the value of attribute response.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#28
  def response; end

  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#356
  def response_id; end

  # Gets the SessionNotOnOrAfter from the AuthnStatement.
  # Could be used to set the local session expiration (expire at latest)
  #
  # @return [String] The SessionNotOnOrAfter value
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#194
  def session_expires_at; end

  # Gets the SessionIndex from the AuthnStatement.
  # Could be used to be stored in the local session in order
  # to be used in a future Logout Request that the SP could
  # send to the IdP, to set what specific session must be deleted
  #
  # @return [String] SessionIndex Value
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#125
  def sessionindex; end

  # OneLogin::RubySaml::Settings Toolkit settings
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#24
  def settings; end

  # OneLogin::RubySaml::Settings Toolkit settings
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#24
  def settings=(_arg0); end

  # Returns the value of attribute soft.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#31
  def soft; end

  # Sets the attribute soft
  #
  # @param value the value to set the attribute soft to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#31
  def soft=(_arg0); end

  # @return [String] StatusCode value from a SAML Response.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#210
  def status_code; end

  # @return [String] the StatusMessage value from a SAML Response.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#241
  def status_message; end

  # Checks if the Status has the "Success" code
  #
  # @return [Boolean] True if the StatusCode is Sucess
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#204
  def success?; end

  private

  # Decrypts an EncryptedAssertion element
  #
  # @param encrypted_assertion_node [REXML::Element] The EncryptedAssertion element
  # @return [REXML::Document] The decrypted EncryptedAssertion element
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#1010
  def decrypt_assertion(encrypted_assertion_node); end

  # Obtains a SAML Response with the EncryptedAssertion element decrypted
  #
  # @param document_copy [XMLSecurity::SignedDocument] A copy of the original SAML Response with the encrypted assertion
  # @return [XMLSecurity::SignedDocument] The SAML Response with the assertion decrypted
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#990
  def decrypt_assertion_from_document(document_copy); end

  # Decrypts an EncryptedAttribute element
  #
  # @param encrypted_attribute_node [REXML::Element] The EncryptedAttribute element
  # @return [REXML::Document] The decrypted EncryptedAttribute element
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#1026
  def decrypt_attribute(encrypted_attribute_node); end

  # Decrypt an element
  #
  # @param encrypt_node [REXML::Element] The encrypted element
  # @param regexp [Regexp] The regular expression to extract the decrypted data
  # @return [REXML::Document] The decrypted element
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#1035
  def decrypt_element(encrypt_node, regexp); end

  # Decrypts an EncryptedID element
  #
  # @param encrypted_id_node [REXML::Element] The EncryptedID element
  # @return [REXML::Document] The decrypted EncrypedtID element
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#1018
  def decrypt_nameid(encrypted_id_node); end

  # Generates the decrypted_document
  #
  # @return [XMLSecurity::SignedDocument] The SAML Response with the assertion decrypted
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#971
  def generate_decrypted_document; end

  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#913
  def name_id_node; end

  # Parse the attribute of a given node in Time format
  #
  # @param node [REXML:Element] The node
  # @param attribute [String] The attribute name
  # @return [Time|nil] The parsed value
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#1064
  def parse_time(node, attribute); end

  # Validates the SAML Response (calls several validation methods)
  #
  # @param collect_errors [Boolean] Stop validation when first error appears or keep validating. (if soft=true)
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if the SAML Response is valid, otherwise False if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#374
  def validate(collect_errors = T.unsafe(nil)); end

  # Validates the Audience, (If the Audience match the Service Provider EntityID)
  # If the response was initialized with the :skip_audience option, this validation is skipped,
  # If fails, the error is added to the errors array
  #
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if there is an Audience Element that match the Service Provider EntityID, otherwise False if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#614
  def validate_audience; end

  # Validates the Conditions. (If the response was initialized with the :skip_conditions option, this validation is skipped,
  # If the response was initialized with the :allowed_clock_drift option, the timing validations are relaxed by the allowed_clock_drift value)
  #
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if satisfies the conditions, otherwise False if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#694
  def validate_conditions; end

  # Validates the Destination, (If the SAML Response is received where expected).
  # If the response was initialized with the :skip_destination option, this validation is skipped,
  # If fails, the error is added to the errors array
  #
  # @return [Boolean] True if there is a Destination element that matches the Consumer Service URL, otherwise False
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#637
  def validate_destination; end

  # Validates that the SAML Response contains an ID
  # If fails, the error is added to the errors array.
  #
  # @return [Boolean] True if the SAML Response contains an ID, otherwise returns False
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#459
  def validate_id; end

  # Validates if the provided request_id match the inResponseTo value.
  # If fails, the error is added to the errors array
  #
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if there is no request_id or it match, otherwise False if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#599
  def validate_in_response_to; end

  # Validates the Issuer (Of the SAML Response and the SAML Assertion)
  #
  # @param soft [Boolean] soft Enable or Disable the soft mode (In order to raise exceptions when the response is invalid or not)
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if the Issuer matchs the IdP entityId, otherwise False if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#718
  def validate_issuer; end

  # Validates the NameID element
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#803
  def validate_name_id; end

  # Validates that there are not duplicated attributes
  # If fails, the error is added to the errors array
  #
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if there are no duplicated attribute elements, otherwise False if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#519
  def validate_no_duplicated_attributes; end

  # Validates that the SAML Response only contains a single Assertion (encrypted or not).
  # If fails, the error is added to the errors array.
  #
  # @return [Boolean] True if the SAML Response contains one unique Assertion, otherwise False
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#483
  def validate_num_assertion; end

  # Checks that the samlp:Response/saml:Assertion/saml:AuthnStatement element exists and is unique.
  # If fails, the error is added to the errors array
  #
  # @return [Boolean] True if there is a authnstatement element and is unique
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#677
  def validate_one_authnstatement; end

  # Checks that the samlp:Response/saml:Assertion/saml:Conditions element exists and is unique.
  # (If the response was initialized with the :skip_conditions option, this validation is skipped)
  # If fails, the error is added to the errors array
  #
  # @return [Boolean] True if there is a conditions element and is unique
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#661
  def validate_one_conditions; end

  # Validates that the SAML Response provided in the initialization is not empty,
  # also check that the setting and the IdP cert were also provided
  #
  # @return [Boolean] True if the required info is found, false otherwise
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#443
  def validate_response_state; end

  # Validates that the Session haven't expired (If the response was initialized with the :allowed_clock_drift option,
  # this time validation is relaxed by the allowed_clock_drift value)
  # If fails, the error is added to the errors array
  #
  # @param soft [Boolean] soft Enable or Disable the soft mode (In order to raise exceptions when the response is invalid or not)
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if the SessionNotOnOrAfter of the AuthnStatement is valid, otherwise (when expired) False if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#744
  def validate_session_expiration; end

  # Validates the Signature
  #
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if not contains a Signature or if the Signature is valid, otherwise False if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#827
  def validate_signature; end

  # Validates the Signed elements
  # If fails, the error is added to the errors array
  #
  # @return [Boolean] True if there is 1 or 2 Elements signed in the SAML Response
  #   an are a Response or an Assertion Element, otherwise False if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#536
  def validate_signed_elements; end

  # Validates the SAML Response against the specified schema.
  #
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if the XML is valid, otherwise False if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#424
  def validate_structure; end

  # Validates if exists valid SubjectConfirmation (If the response was initialized with the :allowed_clock_drift option,
  # timimg validation are relaxed by the allowed_clock_drift value. If the response was initialized with the
  # :skip_subject_confirmation option, this validation is skipped)
  # There is also an optional Recipient check
  # If fails, the error is added to the errors array
  #
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if exists a valid SubjectConfirmation, otherwise False if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#764
  def validate_subject_confirmation; end

  # Validates the Status of the SAML Response
  #
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if the SAML Response contains a Success code, otherwise False if soft == false
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#412
  def validate_success_status; end

  # Validates the SAML version (2.0)
  # If fails, the error is added to the errors array.
  #
  # @return [Boolean] True if the SAML Response is 2.0, otherwise returns False
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#471
  def validate_version; end

  # Extracts the first appearance that matchs the subelt (pattern)
  # Search on any Assertion that is signed, or has a Response parent signed
  #
  # @param subelt [String] The XPath pattern
  # @return [REXML::Element | nil] If any matches, return the Element
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#930
  def xpath_first_from_signed_assertion(subelt = T.unsafe(nil)); end

  # Extracts all the appearances that matchs the subelt (pattern)
  # Search on any Assertion that is signed, or has a Response parent signed
  #
  # @param subelt [String] The XPath pattern
  # @return [Array of REXML::Element] Return all matches
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/response.rb#952
  def xpath_from_signed_assertion(subelt = T.unsafe(nil)); end
end

# source://ruby-saml//lib/onelogin/ruby-saml/response.rb#16
OneLogin::RubySaml::Response::ASSERTION = T.let(T.unsafe(nil), String)

# Response available options
# This is not a whitelist to allow people extending OneLogin::RubySaml:Response
# and pass custom options
#
# source://ruby-saml//lib/onelogin/ruby-saml/response.rb#36
OneLogin::RubySaml::Response::AVAILABLE_OPTIONS = T.let(T.unsafe(nil), Array)

# source://ruby-saml//lib/onelogin/ruby-saml/response.rb#18
OneLogin::RubySaml::Response::DSIG = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/onelogin/ruby-saml/response.rb#17
OneLogin::RubySaml::Response::PROTOCOL = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/onelogin/ruby-saml/response.rb#19
OneLogin::RubySaml::Response::XENC = T.let(T.unsafe(nil), String)

# SAML2 Message
#
# source://ruby-saml//lib/onelogin/ruby-saml/saml_message.rb#15
class OneLogin::RubySaml::SamlMessage
  include ::REXML

  # @return [String|nil] Gets the ID attribute from the SAML Message if exists.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/saml_message.rb#49
  def id(document); end

  # Validates the SAML Message against the specified schema.
  #
  # @param document [REXML::Document] The message that will be validated
  # @param soft [Boolean] soft Enable or Disable the soft mode (In order to raise exceptions when the message is invalid or not)
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if the XML is valid, otherwise False, if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/saml_message.rb#66
  def valid_saml?(document, soft = T.unsafe(nil)); end

  # @return [String|nil] Gets the Version attribute from the SAML Message if exists.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/saml_message.rb#36
  def version(document); end

  private

  # Check if a string is base64 encoded
  #
  # @param string [String] string to check the encoding of
  # @return [true, false] whether or not the string is base64 encoded
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/saml_message.rb#139
  def base64_encoded?(string); end

  # Base 64 decode method
  #
  # @param string [String] The string message
  # @return [String] The decoded string
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/saml_message.rb#119
  def decode(string); end

  # Base64 decode and try also to inflate a SAML Message
  #
  # @param saml [String] The deflated and encoded SAML Message
  # @return [String] The plain SAML Message
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/saml_message.rb#88
  def decode_raw_saml(saml, settings = T.unsafe(nil)); end

  # Deflate method
  #
  # @param inflated [String] The string
  # @return [String] The deflated string
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/saml_message.rb#155
  def deflate(inflated); end

  # Base 64 encode method
  #
  # @param string [String] The string
  # @return [String] The encoded string
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/saml_message.rb#127
  def encode(string); end

  # Deflate, base64 encode and url-encode a SAML Message (To be used in the HTTP-redirect binding)
  #
  # @param saml [String] The plain SAML Message
  # @param settings [OneLogin::RubySaml::Settings|nil] Toolkit settings
  # @return [String] The deflated and encoded SAML Message (encoded if the compression is requested)
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/saml_message.rb#109
  def encode_raw_saml(saml, settings); end

  # Inflate method
  #
  # @param deflated [String] The string
  # @return [String] The inflated string
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/saml_message.rb#147
  def inflate(deflated); end

  class << self
    # @return [Nokogiri::XML::Schema] Gets the schema object of the SAML 2.0 Protocol schema
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/saml_message.rb#26
    def schema; end
  end
end

# source://ruby-saml//lib/onelogin/ruby-saml/saml_message.rb#18
OneLogin::RubySaml::SamlMessage::ASSERTION = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/onelogin/ruby-saml/saml_message.rb#21
OneLogin::RubySaml::SamlMessage::BASE64_FORMAT = T.let(T.unsafe(nil), Regexp)

# source://ruby-saml//lib/onelogin/ruby-saml/saml_message.rb#19
OneLogin::RubySaml::SamlMessage::PROTOCOL = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/onelogin/ruby-saml/setting_error.rb#3
class OneLogin::RubySaml::SettingError < ::StandardError; end

# SAML2 Toolkit Settings
#
# source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#12
class OneLogin::RubySaml::Settings
  # @return [Settings] a new instance of Settings
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#13
  def initialize(overrides = T.unsafe(nil), keep_security_attributes = T.unsafe(nil)); end

  # Returns the value of attribute assertion_consumer_logout_service_binding.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#75
  def assertion_consumer_logout_service_binding; end

  # (Currently we only support "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect")
  #
  # @deprecated Setter for legacy Single Logout Service Binding parameter.
  # @param value [String, Symbol]
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#164
  def assertion_consumer_logout_service_binding=(value); end

  # Returns the value of attribute assertion_consumer_logout_service_url.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#74
  def assertion_consumer_logout_service_url; end

  # Sets the attribute assertion_consumer_logout_service_url
  #
  # @param value the value to set the attribute assertion_consumer_logout_service_url to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#74
  def assertion_consumer_logout_service_url=(_arg0); end

  # Returns the value of attribute assertion_consumer_service_binding.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#47
  def assertion_consumer_service_binding; end

  # Setter for SP Assertion Consumer Service Binding
  #
  # @param value [String, Symbol] .
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#134
  def assertion_consumer_service_binding=(value); end

  # Returns the value of attribute assertion_consumer_service_url.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#46
  def assertion_consumer_service_url; end

  # Sets the attribute assertion_consumer_service_url
  #
  # @param value the value to set the attribute assertion_consumer_service_url to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#46
  def assertion_consumer_service_url=(_arg0); end

  # Returns the value of attribute attribute_consuming_service.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#68
  def attribute_consuming_service; end

  # Returns the value of attribute attributes_index.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#60
  def attributes_index; end

  # Sets the attribute attributes_index
  #
  # @param value the value to set the attribute attributes_index to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#60
  def attributes_index=(_arg0); end

  # Returns the value of attribute authn_context.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#65
  def authn_context; end

  # Sets the attribute authn_context
  #
  # @param value the value to set the attribute authn_context to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#65
  def authn_context=(_arg0); end

  # Returns the value of attribute authn_context_comparison.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#66
  def authn_context_comparison; end

  # Sets the attribute authn_context_comparison
  #
  # @param value the value to set the attribute authn_context_comparison to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#66
  def authn_context_comparison=(_arg0); end

  # Returns the value of attribute authn_context_decl_ref.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#67
  def authn_context_decl_ref; end

  # Sets the attribute authn_context_decl_ref
  #
  # @param value the value to set the attribute authn_context_decl_ref to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#67
  def authn_context_decl_ref=(_arg0); end

  # Returns the value of attribute certificate.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#62
  def certificate; end

  # Sets the attribute certificate
  #
  # @param value the value to set the attribute certificate to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#62
  def certificate=(_arg0); end

  # Deprecated
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#73
  def certificate_new; end

  # Deprecated
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#73
  def certificate_new=(_arg0); end

  # Returns the value of attribute compress_request.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#54
  def compress_request; end

  # Sets the attribute compress_request
  #
  # @param value the value to set the attribute compress_request to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#54
  def compress_request=(_arg0); end

  # Returns the value of attribute compress_response.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#55
  def compress_response; end

  # Sets the attribute compress_response
  #
  # @param value the value to set the attribute compress_response to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#55
  def compress_response=(_arg0); end

  # Returns the value of attribute double_quote_xml_attribute_values.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#56
  def double_quote_xml_attribute_values; end

  # Sets the attribute double_quote_xml_attribute_values
  #
  # @param value the value to set the attribute double_quote_xml_attribute_values to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#56
  def double_quote_xml_attribute_values=(_arg0); end

  # Returns the value of attribute force_authn.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#61
  def force_authn; end

  # Sets the attribute force_authn
  #
  # @param value the value to set the attribute force_authn to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#61
  def force_authn=(_arg0); end

  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#270
  def get_binding(value); end

  # Calculates the fingerprint of the IdP x509 certificate.
  #
  # @return [String] The fingerprint
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#171
  def get_fingerprint; end

  # @return [OpenSSL::X509::Certificate|nil] Build the IdP certificate from the settings (previously format it)
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#183
  def get_idp_cert; end

  # @raise [ArgumentError]
  # @return [Hash with 2 arrays of OpenSSL::X509::Certificate] Build multiple IdP certificates from the settings.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#189
  def get_idp_cert_multi; end

  # @deprecated Use get_sp_signing_pair or get_sp_certs instead.
  # @return [OpenSSL::X509::Certificate] The SP signing certificate.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#236
  def get_sp_cert; end

  # @deprecated Use get_sp_certs instead
  # @return [OpenSSL::X509::Certificate|nil] Build the New SP certificate from the settings.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#261
  def get_sp_cert_new; end

  # @return [Hash<Symbol, Array<Array<OpenSSL::X509::Certificate, OpenSSL::PKey::RSA>>>] Build the SP certificates and private keys from the settings. If
  #   check_sp_cert_expiration is true, only returns certificates and private keys
  #   that are not expired.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#212
  def get_sp_certs; end

  # @return [Array<OpenSSL::PKey::RSA>] The SP decryption keys.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#251
  def get_sp_decryption_keys; end

  # @deprecated Use get_sp_signing_key or get_sp_certs instead.
  # @return [OpenSSL::PKey::RSA] The SP signing key.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#242
  def get_sp_key; end

  # @return [OpenSSL::PKey::RSA] The SP signing key.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#242
  def get_sp_signing_key; end

  # @return [Array<OpenSSL::X509::Certificate, OpenSSL::PKey::RSA>] The SP signing certificate and private key.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#230
  def get_sp_signing_pair; end

  # Returns the value of attribute idp_attribute_names.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#41
  def idp_attribute_names; end

  # Sets the attribute idp_attribute_names
  #
  # @param value the value to set the attribute idp_attribute_names to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#41
  def idp_attribute_names=(_arg0); end

  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#266
  def idp_binding_from_embed_sign; end

  # Returns the value of attribute idp_cert.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#37
  def idp_cert; end

  # Sets the attribute idp_cert
  #
  # @param value the value to set the attribute idp_cert to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#37
  def idp_cert=(_arg0); end

  # Returns the value of attribute idp_cert_fingerprint.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#38
  def idp_cert_fingerprint; end

  # Sets the attribute idp_cert_fingerprint
  #
  # @param value the value to set the attribute idp_cert_fingerprint to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#38
  def idp_cert_fingerprint=(_arg0); end

  # Returns the value of attribute idp_cert_fingerprint_algorithm.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#39
  def idp_cert_fingerprint_algorithm; end

  # Sets the attribute idp_cert_fingerprint_algorithm
  #
  # @param value the value to set the attribute idp_cert_fingerprint_algorithm to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#39
  def idp_cert_fingerprint_algorithm=(_arg0); end

  # Returns the value of attribute idp_cert_multi.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#40
  def idp_cert_multi; end

  # Sets the attribute idp_cert_multi
  #
  # @param value the value to set the attribute idp_cert_multi to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#40
  def idp_cert_multi=(_arg0); end

  # IdP Data
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#33
  def idp_entity_id; end

  # IdP Data
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#33
  def idp_entity_id=(_arg0); end

  # Returns the value of attribute idp_name_qualifier.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#42
  def idp_name_qualifier; end

  # Sets the attribute idp_name_qualifier
  #
  # @param value the value to set the attribute idp_name_qualifier to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#42
  def idp_name_qualifier=(_arg0); end

  # Returns the value of attribute idp_slo_response_service_url.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#36
  def idp_slo_response_service_url; end

  # Sets the attribute idp_slo_response_service_url
  #
  # @param value the value to set the attribute idp_slo_response_service_url to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#36
  def idp_slo_response_service_url=(_arg0); end

  # @return [String] IdP Single Logout Service Binding
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#107
  def idp_slo_service_binding; end

  # Setter for IdP Single Logout Service Binding
  #
  # @param value [String, Symbol] .
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#114
  def idp_slo_service_binding=(value); end

  # @return [String] IdP Single Logout Service URL
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#88
  def idp_slo_service_url; end

  # Sets the attribute idp_slo_service_url
  #
  # @param value the value to set the attribute idp_slo_service_url to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#35
  def idp_slo_service_url=(_arg0); end

  # Returns the value of attribute idp_slo_target_url.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#78
  def idp_slo_target_url; end

  # Sets the attribute idp_slo_target_url
  #
  # @param value the value to set the attribute idp_slo_target_url to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#78
  def idp_slo_target_url=(_arg0); end

  # @return [String] IdP Single Sign On Service Binding
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#94
  def idp_sso_service_binding; end

  # Setter for IdP Single Sign On Service Binding
  #
  # @param value [String, Symbol] .
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#101
  def idp_sso_service_binding=(value); end

  # @return [String] IdP Single Sign On Service URL
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#82
  def idp_sso_service_url; end

  # Sets the attribute idp_sso_service_url
  #
  # @param value the value to set the attribute idp_sso_service_url to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#34
  def idp_sso_service_url=(_arg0); end

  # Returns the value of attribute idp_sso_target_url.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#77
  def idp_sso_target_url; end

  # Sets the attribute idp_sso_target_url
  #
  # @param value the value to set the attribute idp_sso_target_url to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#77
  def idp_sso_target_url=(_arg0); end

  # Returns the value of attribute issuer.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#76
  def issuer; end

  # Sets the attribute issuer
  #
  # @param value the value to set the attribute issuer to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#76
  def issuer=(_arg0); end

  # Returns the value of attribute message_max_bytesize.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#57
  def message_max_bytesize; end

  # Sets the attribute message_max_bytesize
  #
  # @param value the value to set the attribute message_max_bytesize to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#57
  def message_max_bytesize=(_arg0); end

  # Returns the value of attribute name_identifier_format.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#50
  def name_identifier_format; end

  # Sets the attribute name_identifier_format
  #
  # @param value the value to set the attribute name_identifier_format to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#50
  def name_identifier_format=(_arg0); end

  # Returns the value of attribute name_identifier_value.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#51
  def name_identifier_value; end

  # Sets the attribute name_identifier_value
  #
  # @param value the value to set the attribute name_identifier_value to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#51
  def name_identifier_value=(_arg0); end

  # Returns the value of attribute name_identifier_value_requested.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#52
  def name_identifier_value_requested; end

  # Sets the attribute name_identifier_value_requested
  #
  # @param value the value to set the attribute name_identifier_value_requested to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#52
  def name_identifier_value_requested=(_arg0); end

  # Returns the value of attribute passive.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#58
  def passive; end

  # Sets the attribute passive
  #
  # @param value the value to set the attribute passive to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#58
  def passive=(_arg0); end

  # Returns the value of attribute private_key.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#63
  def private_key; end

  # Sets the attribute private_key
  #
  # @param value the value to set the attribute private_key to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#63
  def private_key=(_arg0); end

  # Returns the value of attribute protocol_binding.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#59
  def protocol_binding; end

  # Setter for SP Protocol Binding
  #
  # @param value [String, Symbol] .
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#127
  def protocol_binding=(value); end

  # Work-flow
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#70
  def security; end

  # Work-flow
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#70
  def security=(_arg0); end

  # Returns the value of attribute sessionindex.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#53
  def sessionindex; end

  # Sets the attribute sessionindex
  #
  # @param value the value to set the attribute sessionindex to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#53
  def sessionindex=(_arg0); end

  # @return [String] Single Logout Service Binding.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#146
  def single_logout_service_binding; end

  # Setter for Single Logout Service Binding.
  #
  # (Currently we only support "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect")
  #
  # @param value [String, Symbol]
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#155
  def single_logout_service_binding=(value); end

  # @return [String] Single Logout Service URL.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#140
  def single_logout_service_url; end

  # Sets the attribute single_logout_service_url
  #
  # @param value the value to set the attribute single_logout_service_url to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#48
  def single_logout_service_url=(_arg0); end

  # Returns the value of attribute soft.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#71
  def soft; end

  # Sets the attribute soft
  #
  # @param value the value to set the attribute soft to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#71
  def soft=(_arg0); end

  # Returns the value of attribute sp_cert_multi.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#64
  def sp_cert_multi; end

  # Sets the attribute sp_cert_multi
  #
  # @param value the value to set the attribute sp_cert_multi to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#64
  def sp_cert_multi=(_arg0); end

  # @return [String] SP Entity ID
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#120
  def sp_entity_id; end

  # SP Data
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#45
  def sp_entity_id=(_arg0); end

  # Returns the value of attribute sp_name_qualifier.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#49
  def sp_name_qualifier; end

  # Sets the attribute sp_name_qualifier
  #
  # @param value the value to set the attribute sp_name_qualifier to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#49
  def sp_name_qualifier=(_arg0); end

  # Returns the value of attribute valid_until.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#43
  def valid_until; end

  # Sets the attribute valid_until
  #
  # @param value the value to set the attribute valid_until to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#43
  def valid_until=(_arg0); end

  private

  # @return [Hash<Symbol, Array<Array<OpenSSL::X509::Certificate, OpenSSL::PKey::RSA>>>] Build the SP certificates and private keys from the settings. Returns all
  #   certificates and private keys, even if they are expired.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#308
  def get_all_sp_certs; end

  # Get certs from get_sp_cert_multi parameter.
  #
  # @raise [ArgumentError]
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#347
  def get_sp_certs_multi; end

  # Get certs from certificate, certificate_new, and private_key parameters.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#325
  def get_sp_certs_single; end

  # Validate certificate, certificate_new, private_key, and sp_cert_multi params.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#314
  def validate_sp_certs_params!; end
end

# source://ruby-saml//lib/onelogin/ruby-saml/settings.rb#276
OneLogin::RubySaml::Settings::DEFAULTS = T.let(T.unsafe(nil), Hash)

# SAML2 Logout Request (SLO IdP initiated, Parser)
#
# source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#13
class OneLogin::RubySaml::SloLogoutrequest < ::OneLogin::RubySaml::SamlMessage
  include ::OneLogin::RubySaml::ErrorHandling

  # Constructs the Logout Request. A Logout Request Object that is an extension of the SamlMessage class.
  #
  # @param request [String] A UUEncoded Logout Request from the IdP.
  # @param options [Hash] :settings to provide the OneLogin::RubySaml::Settings object
  #   Or :allowed_clock_drift for the logout request validation process to allow a clock drift when checking dates with
  #   Or :relax_signature_validation to accept signatures if no idp certificate registered on settings
  # @raise [ArgumentError] If Request is nil
  # @return [SloLogoutrequest] a new instance of SloLogoutrequest
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#33
  def initialize(request, options = T.unsafe(nil)); end

  # Decrypts an EncryptedID element
  #
  # @param encrypted_id_node [REXML::Element] The EncryptedID element
  # @return [REXML::Document] The decrypted EncrypedtID element
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#97
  def decrypt_nameid(encrypted_id_node); end

  # Returns the value of attribute document.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#19
  def document; end

  # @return [String|nil] Gets the ID attribute from the Logout Request. if exists.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#118
  def id; end

  # Validates the Logout Request with the default values (soft = true)
  #
  # @param collect_errors [Boolean] Stop validation when first error appears or keep validating.
  # @return [Boolean] TRUE if the Logout Request is valid
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#58
  def is_valid?(collect_errors = T.unsafe(nil)); end

  # @return [String] Gets the Issuer from the Logout Request.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#124
  def issuer; end

  # @return [String] Gets the NameID of the Logout Request.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#64
  def name_id; end

  # @return [String] Gets the NameID Format of the Logout Request.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#72
  def name_id_format; end

  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#81
  def name_id_node; end

  # @return [String] Gets the NameID of the Logout Request.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#64
  def nameid; end

  # @return [String] Gets the NameID Format of the Logout Request.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#72
  def nameid_format; end

  # @return [Time|nil] Gets the NotOnOrAfter Attribute value if exists.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#137
  def not_on_or_after; end

  # Returns the value of attribute options.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#21
  def options; end

  # Returns the value of attribute request.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#20
  def request; end

  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#50
  def request_id; end

  # @return [Array] Gets the SessionIndex if exists (Supported multiple values). Empty Array if none found
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#152
  def session_indexes; end

  # OneLogin::RubySaml::Settings Toolkit settings
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#17
  def settings; end

  # OneLogin::RubySaml::Settings Toolkit settings
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#17
  def settings=(_arg0); end

  # Returns the value of attribute soft.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#23
  def soft; end

  # Sets the attribute soft
  #
  # @param value the value to set the attribute soft to.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#23
  def soft=(_arg0); end

  private

  # returns the allowed clock drift on timing validation
  #
  # @return [Float]
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#166
  def allowed_clock_drift; end

  # Hard aux function to validate the Logout Request
  #
  # @param collect_errors [Boolean] Stop validation when first error appears or keep validating. (if soft=true)
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] TRUE if the Logout Request is valid
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#175
  def validate(collect_errors = T.unsafe(nil)); end

  # Validates that the Logout Request contains an ID
  # If fails, the error is added to the errors array.
  #
  # @return [Boolean] True if the Logout Request contains an ID, otherwise returns False
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#200
  def validate_id; end

  # Validates the Issuer of the Logout Request
  # If fails, the error is added to the errors array
  #
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if the Issuer matchs the IdP entityId, otherwise False if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#263
  def validate_issuer; end

  # Validates the time. (If the logout request was initialized with the :allowed_clock_drift
  # option, the timing validations are relaxed by the allowed_clock_drift value)
  # If fails, the error is added to the errors array
  #
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if satisfies the conditions, otherwise False if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#226
  def validate_not_on_or_after; end

  # Validates that the Logout Request provided in the initialization is not empty,
  #
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if the required info is found, otherwise False if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#252
  def validate_request_state; end

  # Validates the Signature if exists and GET parameters are provided
  #
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if not contains a Signature or if the Signature is valid, otherwise False if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#277
  def validate_signature; end

  # Validates the Logout Request against the specified schema.
  #
  # @raise [ValidationError] if soft == false and validation fails
  # @return [Boolean] True if the XML is valid, otherwise False if soft=True
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#240
  def validate_structure; end

  # Validates the SAML version (2.0)
  # If fails, the error is added to the errors array.
  #
  # @return [Boolean] True if the Logout Request is 2.0, otherwise returns False
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutrequest.rb#212
  def validate_version; end
end

# SAML2 Logout Response (SLO SP initiated, Parser)
#
# source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutresponse.rb#13
class OneLogin::RubySaml::SloLogoutresponse < ::OneLogin::RubySaml::SamlMessage
  # Initializes the Logout Response. A SloLogoutresponse Object that is an extension of the SamlMessage class.
  # Asigns an ID, a random uuid.
  #
  # @return [SloLogoutresponse] a new instance of SloLogoutresponse
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutresponse.rb#21
  def initialize; end

  # Creates the Logout Response string.
  #
  # @param settings [OneLogin::RubySaml::Settings|nil] Toolkit settings
  # @param request_id [String] The ID of the LogoutRequest sent by this SP to the IdP. That ID will be placed as the InResponseTo in the logout response
  # @param logout_message [String] The Message to be placed as StatusMessage in the logout response
  # @param params [Hash] Some extra parameters to be added in the GET for example the RelayState
  # @param logout_status_code [String] The StatusCode to be placed as StatusMessage in the logout response
  # @return [String] Logout Request string that includes the SAMLRequest
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutresponse.rb#37
  def create(settings, request_id = T.unsafe(nil), logout_message = T.unsafe(nil), params = T.unsafe(nil), logout_status_code = T.unsafe(nil)); end

  # Creates the SAMLResponse String.
  #
  # @param settings [OneLogin::RubySaml::Settings|nil] Toolkit settings
  # @param request_id [String] The ID of the LogoutRequest sent by this SP to the IdP. That ID will be placed as the InResponseTo in the logout response
  # @param logout_message [String] The Message to be placed as StatusMessage in the logout response
  # @param logout_status_code [String] The StatusCode to be placed as StatusMessage in the logout response
  # @return [String] The SAMLResponse String.
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutresponse.rb#110
  def create_logout_response_xml_doc(settings, request_id = T.unsafe(nil), logout_message = T.unsafe(nil), logout_status_code = T.unsafe(nil)); end

  # Creates the Get parameters for the logout response.
  #
  # @param settings [OneLogin::RubySaml::Settings|nil] Toolkit settings
  # @param request_id [String] The ID of the LogoutRequest sent by this SP to the IdP. That ID will be placed as the InResponseTo in the logout response
  # @param logout_message [String] The Message to be placed as StatusMessage in the logout response
  # @param params [Hash] Some extra parameters to be added in the GET for example the RelayState
  # @param logout_status_code [String] The StatusCode to be placed as StatusMessage in the logout response
  # @return [Hash] Parameters
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutresponse.rb#59
  def create_params(settings, request_id = T.unsafe(nil), logout_message = T.unsafe(nil), params = T.unsafe(nil), logout_status_code = T.unsafe(nil)); end

  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutresponse.rb#115
  def create_xml_document(settings, request_id = T.unsafe(nil), logout_message = T.unsafe(nil), status_code = T.unsafe(nil)); end

  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutresponse.rb#25
  def response_id; end

  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutresponse.rb#152
  def sign_document(document, settings); end

  # Logout Response ID
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutresponse.rb#16
  def uuid; end

  # Logout Response ID
  #
  # source://ruby-saml//lib/onelogin/ruby-saml/slo_logoutresponse.rb#16
  def uuid=(_arg0); end
end

# SAML2 Auxiliary class
#
# source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#13
class OneLogin::RubySaml::Utils
  class << self
    # Given a certificate string, return an OpenSSL::X509::Certificate object.
    #
    # @param cert [String] The original certificate
    # @return [OpenSSL::X509::Certificate] The certificate object
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#150
    def build_cert_object(cert); end

    # Given a private key string, return an OpenSSL::PKey::RSA object.
    #
    # @param cert [String] The original private key
    # @return [OpenSSL::PKey::RSA] The private key object
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#161
    def build_private_key_object(private_key); end

    # Build the Query String signature that will be used in the HTTP-Redirect binding
    # to generate the Signature
    #
    # @option params
    # @option params
    # @option params
    # @option params
    # @param params [Hash] Parameters to build the Query String
    # @return [String] The Query String
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#176
    def build_query(params); end

    # Reconstruct a canonical query string from raw URI-encoded parts, to be used in verifying a signature
    #
    # @option params
    # @option params
    # @option params
    # @option params
    # @param params [Hash] Parameters to build the Query String
    # @return [String] The Query String
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#193
    def build_query_from_raw_parts(params); end

    # Obtains the decrypted string from an Encrypted node element in XML
    #
    # @param encrypted_node [REXML::Element] The Encrypted element
    # @param private_key [OpenSSL::PKey::RSA] The Service provider private key
    # @return [String] The decrypted data
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#299
    def decrypt_data(encrypted_node, private_key); end

    # Obtains the decrypted string from an Encrypted node element in XML,
    # given multiple private keys to try.
    #
    # @param encrypted_node [REXML::Element] The Encrypted element
    # @param private_keys [Array<OpenSSL::PKey::RSA>] The Service provider private key
    # @raise [ArgumentError]
    # @return [String] The decrypted data
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#280
    def decrypt_multi(encrypted_node, private_keys); end

    # Given a REXML::Element instance, return the concatenation of all child text nodes. Assumes
    # that there all children other than text nodes can be ignored (e.g. comments). If nil is
    # passed, nil will be returned.
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#440
    def element_text(element); end

    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#228
    def escape_request_param(param, lowercase_url_encoding); end

    # Return a properly formatted x509 certificate
    #
    # @param cert [String] The original certificate
    # @return [String] The formatted certificate
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#99
    def format_cert(cert); end

    # Return a properly formatted private key
    #
    # @param key [String] The original private key
    # @return [String] The formatted private key
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#129
    def format_private_key(key); end

    # Checks if the x509 cert provided has both started and has not expired.
    #
    # @param cert [OpenSSL::X509::Certificate|String] The x509 certificate.
    # @return [true|false] Whether the certificate is currently active.
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#51
    def is_cert_active(cert); end

    # Checks if the x509 cert provided is expired.
    #
    # @param cert [OpenSSL::X509::Certificate|String] The x509 certificate.
    # @return [true|false] Whether the certificate is expired.
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#41
    def is_cert_expired(cert); end

    # If Rails' URI.parse can't match to valid URL, default back to the original matching service.
    #
    # @return [Boolean]
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#433
    def original_uri_match?(destination_url, settings_url); end

    # Interprets a ISO8601 duration value relative to a given timestamp.
    #
    # @param duration [String] The duration, as a string.
    # @param timestamp [Integer] The unix timestamp we should apply the
    #   duration to. Optional, default to the
    #   current time.
    # @return [Integer] The new timestamp, after the duration is applied.
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#66
    def parse_duration(duration, timestamp = T.unsafe(nil)); end

    # Prepare raw GET parameters (build them from normal parameters
    # if not provided).
    #
    # @param rawparams [Hash] Raw GET Parameters
    # @param params [Hash] GET Parameters
    # @param lowercase_url_encoding [bool] Lowercase URL Encoding  (For ADFS urlencode compatiblity)
    # @return [Hash] New raw parameters
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#209
    def prepare_raw_get_params(rawparams, params, lowercase_url_encoding = T.unsafe(nil)); end

    # Obtains the deciphered text
    #
    # @param cipher_text [String] The ciphered text
    # @param symmetric_key [String] The symmetric key used to encrypt the text
    # @param algorithm [String] The encrypted algorithm
    # @return [String] The deciphered text
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#364
    def retrieve_plaintext(cipher_text, symmetric_key, algorithm); end

    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#351
    def retrieve_symetric_key_reference(encrypt_data); end

    # Obtains the symmetric key from the EncryptedData element
    #
    # @param encrypt_data [REXML::Element] The EncryptedData element
    # @param private_key [OpenSSL::PKey::RSA] The Service provider private key
    # @return [String] The symmetric key
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#325
    def retrieve_symmetric_key(encrypt_data, private_key); end

    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#402
    def set_prefix(value); end

    # Build the status error message
    #
    # @param status_code [String] StatusCode value
    # @param status_message [Strig] StatusMessage value
    # @return [String] The status error message
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#254
    def status_error_msg(error_msg, raw_status_code = T.unsafe(nil), status_message = T.unsafe(nil)); end

    # Given two strings, attempt to match them as URIs using Rails' parse method.  If they can be parsed,
    # then the fully-qualified domain name and the host should performa a case-insensitive match, per the
    # RFC for URIs.  If Rails can not parse the string in to URL pieces, return a boolean match of the
    # two strings.  This maintains the previous functionality.
    #
    # @return [Boolean]
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#415
    def uri_match?(destination_url, settings_url); end

    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#406
    def uuid; end

    # Validate the Signature parameter sent on the HTTP-Redirect binding
    #
    # @option params
    # @option params
    # @option params
    # @option params
    # @param params [Hash] Parameters to be used in the validation process
    # @return [Boolean] True if the Signature is valid, False otherwise
    #
    # source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#244
    def verify_signature(params); end
  end
end

# source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#16
OneLogin::RubySaml::Utils::BINDINGS = T.let(T.unsafe(nil), Hash)

# source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#18
OneLogin::RubySaml::Utils::DSIG = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#20
OneLogin::RubySaml::Utils::DURATION_FORMAT = T.let(T.unsafe(nil), Regexp)

# source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#35
OneLogin::RubySaml::Utils::UUID_PREFIX = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/onelogin/ruby-saml/utils.rb#19
OneLogin::RubySaml::Utils::XENC = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/onelogin/ruby-saml/version.rb#3
OneLogin::RubySaml::VERSION = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/onelogin/ruby-saml/validation_error.rb#3
class OneLogin::RubySaml::ValidationError < ::StandardError; end

# source://ruby-saml//lib/xml_security.rb#35
module XMLSecurity; end

# source://ruby-saml//lib/xml_security.rb#37
class XMLSecurity::BaseDocument < ::REXML::Document
  # source://ruby-saml//lib/xml_security.rb#63
  def algorithm(element); end

  # source://ruby-saml//lib/xml_security.rb#45
  def canon_algorithm(element); end
end

# source://ruby-saml//lib/xml_security.rb#40
XMLSecurity::BaseDocument::C14N = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/xml_security.rb#41
XMLSecurity::BaseDocument::DSIG = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/xml_security.rb#42
XMLSecurity::BaseDocument::NOKOGIRI_OPTIONS = T.let(T.unsafe(nil), Integer)

# source://ruby-saml//lib/xml_security.rb#82
class XMLSecurity::Document < ::XMLSecurity::BaseDocument
  # </Signature>
  #
  # source://ruby-saml//lib/xml_security.rb#117
  def sign_document(private_key, certificate, signature_method = T.unsafe(nil), digest_method = T.unsafe(nil)); end

  # source://ruby-saml//lib/xml_security.rb#96
  def uuid; end

  # Sets the attribute uuid
  #
  # @param value the value to set the attribute uuid to.
  #
  # source://ruby-saml//lib/xml_security.rb#94
  def uuid=(_arg0); end

  protected

  # source://ruby-saml//lib/xml_security.rb#178
  def compute_digest(document, digest_algorithm); end

  # source://ruby-saml//lib/xml_security.rb#174
  def compute_signature(private_key, signature_algorithm, document); end
end

# source://ruby-saml//lib/xml_security.rb#91
XMLSecurity::Document::ENVELOPED_SIG = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/xml_security.rb#92
XMLSecurity::Document::INC_PREFIX_LIST = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/xml_security.rb#83
XMLSecurity::Document::RSA_SHA1 = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/xml_security.rb#84
XMLSecurity::Document::RSA_SHA256 = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/xml_security.rb#85
XMLSecurity::Document::RSA_SHA384 = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/xml_security.rb#86
XMLSecurity::Document::RSA_SHA512 = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/xml_security.rb#87
XMLSecurity::Document::SHA1 = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/xml_security.rb#88
XMLSecurity::Document::SHA256 = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/xml_security.rb#89
XMLSecurity::Document::SHA384 = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/xml_security.rb#90
XMLSecurity::Document::SHA512 = T.let(T.unsafe(nil), String)

# source://ruby-saml//lib/xml_security.rb#185
class XMLSecurity::SignedDocument < ::XMLSecurity::BaseDocument
  include ::OneLogin::RubySaml::ErrorHandling

  # @return [SignedDocument] a new instance of SignedDocument
  #
  # source://ruby-saml//lib/xml_security.rb#190
  def initialize(response, errors = T.unsafe(nil)); end

  # source://ruby-saml//lib/xml_security.rb#195
  def signed_element_id; end

  # Sets the attribute signed_element_id
  #
  # @param value the value to set the attribute signed_element_id to.
  #
  # source://ruby-saml//lib/xml_security.rb#188
  def signed_element_id=(_arg0); end

  # source://ruby-saml//lib/xml_security.rb#199
  def validate_document(idp_cert_fingerprint, soft = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://ruby-saml//lib/xml_security.rb#241
  def validate_document_with_cert(idp_cert, soft = T.unsafe(nil)); end

  # source://ruby-saml//lib/xml_security.rb#268
  def validate_signature(base64_cert, soft = T.unsafe(nil)); end

  private

  # @return [Boolean]
  #
  # source://ruby-saml//lib/xml_security.rb#402
  def digests_match?(hash, digest_value); end

  # source://ruby-saml//lib/xml_security.rb#419
  def extract_inclusive_namespaces; end

  # source://ruby-saml//lib/xml_security.rb#406
  def extract_signed_element_id; end

  # source://ruby-saml//lib/xml_security.rb#375
  def process_transforms(ref, canon_algorithm); end
end
