#!/usr/bin/env ruby
# frozen_string_literal: true
Dir.chdir(__dir__) { require 'bundler/setup' }

require 'active_support'
require 'active_support/core_ext/integer/time'
require 'active_support/core_ext/object/blank'
require 'active_support/time'
require 'aws-sdk-cloudwatchlogs'
require 'concurrent-ruby'

$LOAD_PATH.unshift(File.expand_path(File.join(__dir__, '../lib')))
require 'reporting/cloudwatch_client'
require 'reporting/cloudwatch_query_quoting'


class SummarizeUserEvents
  attr_reader :uuid, :from_date, :to_date
  
  def initialize(argv:, stdin:, stdout:)
    # argv[0] == uuid
    # argv[1] == From date
    # argv[2] == to date

    @uuid = argv[0]
    @from_date = argv[1].present? ? Time.strptime(argv[1], '%m/%d/%Y') : 1.week.ago
    @to_date = argv[2].present? ? Time.strptime(argv[2], '%m/%d/%Y') : DateTime.now 
  end

  def run
    find_cloudwatch_events do |cloudwatch_event|
      pp cloudwatch_event
    end
  end


  def query
    format(<<~QUERY)
      fields
          name
        , properties.event_properties.success as success
        , @message
        , @timestamp
      | filter properties.user_id = '#{uuid}'
      | sort @timestamp asc
    QUERY
  end


  def cloudwatch_client
    @cloudwatch_client ||= Reporting::CloudwatchClient.new(
      num_threads: 5,
      ensure_complete_logs: true,
      log_group_name: 'prod_/srv/idp/shared/log/events.log',
    )
  end

  def find_cloudwatch_events(&block)
    if $stdin.tty?
      cloudwatch_source(&block)
    else
      warn "Reading Cloudwatch events as newline-delimited JSON (ndjson) from stdin"
      stdin_source(&block)
    end
  end

  def stdin_source(&block)
    $stdin.each_line do |line|
      next if line.blank?
      event = JSON.parse(line)
      block.call(event)
    end
  end

  def cloudwatch_source(&block)
    cloudwatch_client.fetch(
      query: query,
      from: from_date,
      to: to_date,
      &block
    )    
  end  
end


if $PROGRAM_NAME == __FILE__
  SummarizeUserEvents.new(argv: ARGV, stdin: STDIN, stdout: STDOUT).run
end