# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `simple_form` gem.
# Please instead update this file by running `bin/tapioca gem simple_form`.


# source://simple_form//lib/simple_form/action_view_extensions/builder.rb#34
module ActionView::Helpers
  include ::ActionView::Helpers::SanitizeHelper
  include ::DOTIW::Methods
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::FormTagHelper
  include ::ActionView::Helpers::FormHelper
  include ::ActionView::Helpers::TranslationHelper

  mixes_in_class_methods ::ActionView::Helpers::UrlHelper::ClassMethods
  mixes_in_class_methods ::ActionView::Helpers::SanitizeHelper::ClassMethods

  class << self
    # source://actionview/7.2.1.1/lib/action_view/helpers.rb#35
    def eager_load!; end
  end
end

# source://simple_form//lib/simple_form/action_view_extensions/builder.rb#35
class ActionView::Helpers::FormBuilder
  include ::SimpleForm::ActionViewExtensions::Builder

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1717
  def initialize(object_name, object, template, options); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2649
  def button(value = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2474
  def check_box(method, options = T.unsafe(nil), checked_value = T.unsafe(nil), unchecked_value = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_options_helper.rb#908
  def collection_check_boxes(method, collection, value_method, text_method, options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_options_helper.rb#920
  def collection_radio_buttons(method, collection, value_method, text_method, options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_options_helper.rb#860
  def collection_select(method, collection, value_method, text_method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2042
  def color_field(method, options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2070
  def date_field(method, options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/date_helper.rb#1237
  def date_select(method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2084
  def datetime_field(method, options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2091
  def datetime_local_field(method, options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/date_helper.rb#1261
  def datetime_select(method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2119
  def email_field(method, options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2670
  def emitted_hidden_id?; end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1682
  def field_helpers; end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1682
  def field_helpers=(_arg0); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1682
  def field_helpers?; end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1774
  def field_id(method, *suffixes, namespace: T.unsafe(nil), index: T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1794
  def field_name(method, *methods, multiple: T.unsafe(nil), index: T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2328
  def fields(scope = T.unsafe(nil), model: T.unsafe(nil), **options, &block); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2290
  def fields_for(record_name, record_object = T.unsafe(nil), fields_options = T.unsafe(nil), &block); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2557
  def file_field(method, options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_options_helper.rb#872
  def grouped_collection_select(method, collection, group_method, group_label_method, option_key_method, option_value_method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2518
  def hidden_field(method, options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1754
  def id; end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1694
  def index; end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2405
  def label(method, text = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2098
  def month_field(method, options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1694
  def multipart; end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1697
  def multipart=(multipart); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1694
  def multipart?; end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2126
  def number_field(method, options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1692
  def object; end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1692
  def object=(_arg0); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1692
  def object_name; end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1692
  def object_name=(_arg0); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1692
  def options; end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1692
  def options=(_arg0); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2028
  def password_field(method, options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2063
  def phone_field(method, options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2496
  def radio_button(method, tag_value, options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2133
  def range_field(method, options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2049
  def search_field(method, options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_options_helper.rb#848
  def select(method, choices = T.unsafe(nil), options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2589
  def submit(value = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2056
  def telephone_field(method, options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2035
  def text_area(method, options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2021
  def text_field(method, options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2077
  def time_field(method, options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/date_helper.rb#1249
  def time_select(method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_options_helper.rb#884
  def time_zone_select(method, priority_zones = T.unsafe(nil), options = T.unsafe(nil), html_options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1713
  def to_model; end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1709
  def to_partial_path; end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2112
  def url_field(method, options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2105
  def week_field(method, options = T.unsafe(nil)); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_options_helper.rb#896
  def weekday_select(method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

  private

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2755
  def convert_to_legacy_options(options); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2737
  def fields_for_nested_model(name, object, fields_options, block); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2708
  def fields_for_with_nested_attributes(association_name, association, options, block); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2704
  def nested_attributes_association?(association_name); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2750
  def nested_child_index(name); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2675
  def objectify_options(options); end

  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2681
  def submit_default_value; end

  class << self
    # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1705
    def _to_partial_path; end

    # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1682
    def field_helpers; end

    # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1682
    def field_helpers=(value); end

    # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#1682
    def field_helpers?; end
  end
end

module ERB::Escape
  private

  def html_escape(_arg0); end

  class << self
    def html_escape(_arg0); end
  end
end

# source://simple_form//lib/simple_form/action_view_extensions/form_helper.rb#2
module SimpleForm
  extend ::ActiveSupport::Autoload

  # source://simple_form//lib/simple_form.rb#202
  def boolean_label_class; end

  # source://simple_form//lib/simple_form.rb#202
  def boolean_label_class=(val); end

  # source://simple_form//lib/simple_form.rb#113
  def boolean_style; end

  # source://simple_form//lib/simple_form.rb#113
  def boolean_style=(val); end

  # source://simple_form//lib/simple_form.rb#135
  def browser_validations; end

  # source://simple_form//lib/simple_form.rb#135
  def browser_validations=(val); end

  # source://simple_form//lib/simple_form.rb#182
  def button_class; end

  # source://simple_form//lib/simple_form.rb#182
  def button_class=(val); end

  # source://simple_form//lib/simple_form.rb#178
  def cache_discovery; end

  # source://simple_form//lib/simple_form.rb#178
  def cache_discovery=(val); end

  # source://simple_form//lib/simple_form.rb#77
  def collection_label_methods; end

  # source://simple_form//lib/simple_form.rb#77
  def collection_label_methods=(val); end

  # source://simple_form//lib/simple_form.rb#81
  def collection_value_methods; end

  # source://simple_form//lib/simple_form.rb#81
  def collection_value_methods=(val); end

  # source://simple_form//lib/simple_form.rb#89
  def collection_wrapper_class; end

  # source://simple_form//lib/simple_form.rb#89
  def collection_wrapper_class=(val); end

  # source://simple_form//lib/simple_form.rb#85
  def collection_wrapper_tag; end

  # source://simple_form//lib/simple_form.rb#85
  def collection_wrapper_tag=(val); end

  # source://simple_form//lib/simple_form.rb#165
  def country_priority; end

  # source://simple_form//lib/simple_form.rb#165
  def country_priority=(val); end

  # source://simple_form//lib/simple_form.rb#157
  def custom_inputs_namespaces; end

  # source://simple_form//lib/simple_form.rb#157
  def custom_inputs_namespaces=(val); end

  # source://simple_form//lib/simple_form.rb#123
  def default_form_class; end

  # source://simple_form//lib/simple_form.rb#123
  def default_form_class=(val); end

  # WRAPPER CONFIGURATION
  # The default wrapper to be used by the FormBuilder.
  #
  # source://simple_form//lib/simple_form.rb#207
  def default_wrapper; end

  # source://simple_form//lib/simple_form.rb#207
  def default_wrapper=(val); end

  # source://simple_form//lib/simple_form.rb#65
  def error_method; end

  # source://simple_form//lib/simple_form.rb#65
  def error_method=(val); end

  # source://simple_form//lib/simple_form.rb#73
  def error_notification_class; end

  # source://simple_form//lib/simple_form.rb#73
  def error_notification_class=(val); end

  # source://simple_form//lib/simple_form.rb#69
  def error_notification_tag; end

  # source://simple_form//lib/simple_form.rb#69
  def error_notification_tag=(val); end

  # source://simple_form//lib/simple_form.rb#188
  def field_error_proc; end

  # source://simple_form//lib/simple_form.rb#188
  def field_error_proc=(val); end

  # source://simple_form//lib/simple_form.rb#118
  def form_class; end

  # source://simple_form//lib/simple_form.rb#127
  def generate_additional_classes_for; end

  # source://simple_form//lib/simple_form.rb#127
  def generate_additional_classes_for=(val); end

  # source://simple_form//lib/simple_form.rb#211
  def i18n_scope; end

  # source://simple_form//lib/simple_form.rb#211
  def i18n_scope=(val); end

  # source://simple_form//lib/simple_form.rb#198
  def include_default_input_wrapper_class; end

  # source://simple_form//lib/simple_form.rb#198
  def include_default_input_wrapper_class=(val); end

  # source://simple_form//lib/simple_form.rb#194
  def input_class; end

  # source://simple_form//lib/simple_form.rb#194
  def input_class=(val); end

  # source://simple_form//lib/simple_form.rb#214
  def input_field_error_class; end

  # source://simple_form//lib/simple_form.rb#214
  def input_field_error_class=(val); end

  # source://simple_form//lib/simple_form.rb#217
  def input_field_valid_class; end

  # source://simple_form//lib/simple_form.rb#217
  def input_field_valid_class=(val); end

  # source://simple_form//lib/simple_form.rb#141
  def input_mappings; end

  # source://simple_form//lib/simple_form.rb#141
  def input_mappings=(val); end

  # source://simple_form//lib/simple_form.rb#174
  def inputs_discovery; end

  # source://simple_form//lib/simple_form.rb#174
  def inputs_discovery=(val); end

  # source://simple_form//lib/simple_form.rb#99
  def item_wrapper_class; end

  # source://simple_form//lib/simple_form.rb#99
  def item_wrapper_class=(val); end

  # source://simple_form//lib/simple_form.rb#95
  def item_wrapper_tag; end

  # source://simple_form//lib/simple_form.rb#95
  def item_wrapper_tag=(val); end

  # source://simple_form//lib/simple_form.rb#107
  def label_class; end

  # source://simple_form//lib/simple_form.rb#107
  def label_class=(val); end

  # source://simple_form//lib/simple_form.rb#103
  def label_text; end

  # source://simple_form//lib/simple_form.rb#103
  def label_text=(val); end

  # source://simple_form//lib/simple_form.rb#131
  def required_by_default; end

  # source://simple_form//lib/simple_form.rb#131
  def required_by_default=(val); end

  # source://simple_form//lib/simple_form.rb#161
  def time_zone_priority; end

  # source://simple_form//lib/simple_form.rb#161
  def time_zone_priority=(val); end

  # source://simple_form//lib/simple_form.rb#170
  def translate_labels; end

  # source://simple_form//lib/simple_form.rb#170
  def translate_labels=(val); end

  # source://simple_form//lib/simple_form.rb#149
  def wrapper_mappings; end

  # source://simple_form//lib/simple_form.rb#149
  def wrapper_mappings=(val); end

  class << self
    # source://simple_form//lib/simple_form.rb#264
    def additional_classes_for(component); end

    # source://simple_form//lib/simple_form.rb#202
    def boolean_label_class; end

    # source://simple_form//lib/simple_form.rb#202
    def boolean_label_class=(val); end

    # source://simple_form//lib/simple_form.rb#113
    def boolean_style; end

    # source://simple_form//lib/simple_form.rb#113
    def boolean_style=(val); end

    # source://simple_form//lib/simple_form.rb#135
    def browser_validations; end

    # source://simple_form//lib/simple_form.rb#135
    def browser_validations=(val); end

    # Builds a new wrapper using SimpleForm::Wrappers::Builder.
    #
    # @yield [builder]
    #
    # source://simple_form//lib/simple_form.rb#242
    def build(options = T.unsafe(nil)); end

    # source://simple_form//lib/simple_form.rb#182
    def button_class; end

    # source://simple_form//lib/simple_form.rb#182
    def button_class=(val); end

    # source://simple_form//lib/simple_form.rb#178
    def cache_discovery; end

    # source://simple_form//lib/simple_form.rb#178
    def cache_discovery=(val); end

    # source://simple_form//lib/simple_form.rb#77
    def collection_label_methods; end

    # source://simple_form//lib/simple_form.rb#77
    def collection_label_methods=(val); end

    # source://simple_form//lib/simple_form.rb#81
    def collection_value_methods; end

    # source://simple_form//lib/simple_form.rb#81
    def collection_value_methods=(val); end

    # source://simple_form//lib/simple_form.rb#89
    def collection_wrapper_class; end

    # source://simple_form//lib/simple_form.rb#89
    def collection_wrapper_class=(val); end

    # source://simple_form//lib/simple_form.rb#85
    def collection_wrapper_tag; end

    # source://simple_form//lib/simple_form.rb#85
    def collection_wrapper_tag=(val); end

    # @return [Boolean]
    #
    # source://simple_form//lib/simple_form.rb#54
    def configured?; end

    # source://simple_form//lib/simple_form.rb#165
    def country_priority; end

    # source://simple_form//lib/simple_form.rb#165
    def country_priority=(val); end

    # source://simple_form//lib/simple_form.rb#157
    def custom_inputs_namespaces; end

    # source://simple_form//lib/simple_form.rb#157
    def custom_inputs_namespaces=(val); end

    # source://simple_form//lib/simple_form.rb#123
    def default_form_class; end

    # source://simple_form//lib/simple_form.rb#123
    def default_form_class=(val); end

    # SETUP
    #
    # source://simple_form//lib/simple_form.rb#270
    def default_input_size=(*_arg0); end

    # source://simple_form//lib/simple_form.rb#207
    def default_wrapper; end

    # source://simple_form//lib/simple_form.rb#207
    def default_wrapper=(val); end

    # source://simple_form//lib/simple_form.rb#58
    def deprecator; end

    # source://simple_form//lib/simple_form.rb#23
    def eager_load!; end

    # source://simple_form//lib/simple_form.rb#65
    def error_method; end

    # source://simple_form//lib/simple_form.rb#65
    def error_method=(val); end

    # source://simple_form//lib/simple_form.rb#73
    def error_notification_class; end

    # source://simple_form//lib/simple_form.rb#73
    def error_notification_class=(val); end

    # source://simple_form//lib/simple_form.rb#69
    def error_notification_tag; end

    # source://simple_form//lib/simple_form.rb#69
    def error_notification_tag=(val); end

    # source://simple_form//lib/simple_form.rb#188
    def field_error_proc; end

    # source://simple_form//lib/simple_form.rb#188
    def field_error_proc=(val); end

    # source://simple_form//lib/simple_form.rb#284
    def file_methods; end

    # source://simple_form//lib/simple_form.rb#279
    def file_methods=(file_methods); end

    # source://simple_form//lib/simple_form.rb#118
    def form_class; end

    # source://simple_form//lib/simple_form.rb#274
    def form_class=(value); end

    # source://simple_form//lib/simple_form.rb#127
    def generate_additional_classes_for; end

    # source://simple_form//lib/simple_form.rb#127
    def generate_additional_classes_for=(val); end

    # source://simple_form//lib/simple_form.rb#211
    def i18n_scope; end

    # source://simple_form//lib/simple_form.rb#211
    def i18n_scope=(val); end

    # Includes a component to be used by Simple Form. Methods defined in a
    # component will be exposed to be used in the wrapper as Simple::Components
    #
    # Examples
    #
    #    # The application needs to tell where the components will be.
    #    Dir[Rails.root.join('lib/components/**/*.rb')].each { |f| require f }
    #
    #    # Create a custom component in the path specified above.
    #    # lib/components/input_group_component.rb
    #    module InputGroupComponent
    #      def prepend
    #        ...
    #      end
    #
    #      def append
    #        ...
    #      end
    #    end
    #
    #    SimpleForm.setup do |config|
    #      # Create a wrapper using the custom component.
    #      config.wrappers :input_group, tag: :div, error_class: :error do |b|
    #        b.use :label
    #        b.optional :prepend
    #        b.use :input
    #        b.use :append
    #      end
    #    end
    #
    #    # Using the custom component in the form.
    #    <%= simple_form_for @blog, wrapper: input_group do |f| %>
    #      <%= f.input :title, prepend: true %>
    #    <% end %>
    #
    # source://simple_form//lib/simple_form.rb#331
    def include_component(component); end

    # source://simple_form//lib/simple_form.rb#198
    def include_default_input_wrapper_class; end

    # source://simple_form//lib/simple_form.rb#198
    def include_default_input_wrapper_class=(val); end

    # source://simple_form//lib/simple_form.rb#194
    def input_class; end

    # source://simple_form//lib/simple_form.rb#194
    def input_class=(val); end

    # source://simple_form//lib/simple_form.rb#214
    def input_field_error_class; end

    # source://simple_form//lib/simple_form.rb#214
    def input_field_error_class=(val); end

    # source://simple_form//lib/simple_form.rb#217
    def input_field_valid_class; end

    # source://simple_form//lib/simple_form.rb#217
    def input_field_valid_class=(val); end

    # source://simple_form//lib/simple_form.rb#141
    def input_mappings; end

    # source://simple_form//lib/simple_form.rb#141
    def input_mappings=(val); end

    # source://simple_form//lib/simple_form.rb#174
    def inputs_discovery; end

    # source://simple_form//lib/simple_form.rb#174
    def inputs_discovery=(val); end

    # source://simple_form//lib/simple_form.rb#99
    def item_wrapper_class; end

    # source://simple_form//lib/simple_form.rb#99
    def item_wrapper_class=(val); end

    # source://simple_form//lib/simple_form.rb#95
    def item_wrapper_tag; end

    # source://simple_form//lib/simple_form.rb#95
    def item_wrapper_tag=(val); end

    # source://simple_form//lib/simple_form.rb#107
    def label_class; end

    # source://simple_form//lib/simple_form.rb#107
    def label_class=(val); end

    # source://simple_form//lib/simple_form.rb#103
    def label_text; end

    # source://simple_form//lib/simple_form.rb#103
    def label_text=(val); end

    # source://simple_form//lib/simple_form.rb#131
    def required_by_default; end

    # source://simple_form//lib/simple_form.rb#131
    def required_by_default=(val); end

    # Default way to setup Simple Form. Run rails generate simple_form:install
    # to create a fresh initializer with all configuration values.
    #
    # @yield [_self]
    # @yieldparam _self [SimpleForm] the object that the method was called on
    #
    # source://simple_form//lib/simple_form.rb#291
    def setup; end

    # source://simple_form//lib/simple_form.rb#161
    def time_zone_priority; end

    # source://simple_form//lib/simple_form.rb#161
    def time_zone_priority=(val); end

    # source://simple_form//lib/simple_form.rb#170
    def translate_labels; end

    # source://simple_form//lib/simple_form.rb#170
    def translate_labels=(val); end

    # Retrieves a given wrapper
    #
    # source://simple_form//lib/simple_form.rb#221
    def wrapper(name); end

    # source://simple_form//lib/simple_form.rb#149
    def wrapper_mappings; end

    # source://simple_form//lib/simple_form.rb#149
    def wrapper_mappings=(val); end

    # Define a new wrapper using SimpleForm::Wrappers::Builder
    # and store it in the given name.
    #
    # source://simple_form//lib/simple_form.rb#231
    def wrappers(*args, &block); end
  end
end

# source://simple_form//lib/simple_form/action_view_extensions/form_helper.rb#3
module SimpleForm::ActionViewExtensions; end

# A collection of methods required by simple_form but added to rails default form.
# This means that you can use such methods outside simple_form context.
#
# source://simple_form//lib/simple_form/action_view_extensions/builder.rb#6
module SimpleForm::ActionViewExtensions::Builder
  # Wrapper for using SimpleForm inside a default rails form.
  # Example:
  #
  #   form_for @user do |f|
  #     f.simple_fields_for :posts do |posts_form|
  #       # Here you have all simple_form methods available
  #       posts_form.input :title
  #     end
  #   end
  #
  # source://simple_form//lib/simple_form/action_view_extensions/builder.rb#17
  def simple_fields_for(*args, &block); end
end

# This module creates SimpleForm wrappers around default form_for and fields_for.
#
# Example:
#
#   simple_form_for @user do |f|
#     f.input :name, hint: 'My hint'
#   end
#
# source://simple_form//lib/simple_form/action_view_extensions/form_helper.rb#12
module SimpleForm::ActionViewExtensions::FormHelper
  # source://simple_form//lib/simple_form/action_view_extensions/form_helper.rb#31
  def simple_fields_for(record_name, record_object = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://simple_form//lib/simple_form/action_view_extensions/form_helper.rb#14
  def simple_form_for(record, options = T.unsafe(nil), &block); end

  private

  # source://simple_form//lib/simple_form/action_view_extensions/form_helper.rb#52
  def simple_form_css_class(record, options); end

  # source://simple_form//lib/simple_form/action_view_extensions/form_helper.rb#42
  def with_simple_form_field_error_proc; end
end

# source://simple_form//lib/simple_form.rb#29
SimpleForm::CUSTOM_INPUT_DEPRECATION_WARN = T.let(T.unsafe(nil), String)

# Components are a special type of helpers that can work on their own.
# For example, by using a component, it will automatically change the
# output under given circumstances without user input. For example,
# the disabled helper always need a disabled: true option given
# to the input in order to be enabled. On the other hand, things like
# hints can generate output automatically by doing I18n lookups.
#
# source://simple_form//lib/simple_form/components.rb#9
module SimpleForm::Components
  extend ::ActiveSupport::Autoload
end

# source://simple_form//lib/simple_form/components/errors.rb#4
module SimpleForm::Components::Errors
  # source://simple_form//lib/simple_form/components/errors.rb#5
  def error(wrapper_options = T.unsafe(nil)); end

  # source://simple_form//lib/simple_form/components/errors.rb#9
  def full_error(wrapper_options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/components/errors.rb#13
  def has_errors?; end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/components/errors.rb#17
  def has_value?; end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/components/errors.rb#21
  def valid?; end

  protected

  # source://simple_form//lib/simple_form/components/errors.rb#41
  def error_method; end

  # source://simple_form//lib/simple_form/components/errors.rb#27
  def error_text; end

  # source://simple_form//lib/simple_form/components/errors.rb#45
  def errors; end

  # source://simple_form//lib/simple_form/components/errors.rb#61
  def errors_on_association; end

  # source://simple_form//lib/simple_form/components/errors.rb#53
  def errors_on_attribute; end

  # source://simple_form//lib/simple_form/components/errors.rb#33
  def full_error_text; end

  # source://simple_form//lib/simple_form/components/errors.rb#49
  def full_errors; end

  # source://simple_form//lib/simple_form/components/errors.rb#65
  def full_errors_on_association; end

  # source://simple_form//lib/simple_form/components/errors.rb#57
  def full_errors_on_attribute; end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/components/errors.rb#69
  def has_custom_error?; end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/components/errors.rb#37
  def object_with_errors?; end
end

# source://simple_form//lib/simple_form/components/html5.rb#4
module SimpleForm::Components::HTML5
  # source://simple_form//lib/simple_form/components/html5.rb#5
  def initialize(*_arg0); end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/components/html5.rb#32
  def has_required?; end

  # source://simple_form//lib/simple_form/components/html5.rb#9
  def html5(wrapper_options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/components/html5.rb#20
  def html5?; end

  # source://simple_form//lib/simple_form/components/html5.rb#28
  def input_html_aria_required_option; end

  # source://simple_form//lib/simple_form/components/html5.rb#24
  def input_html_required_option; end
end

# Needs to be enabled in order to do automatic lookups.
#
# source://simple_form//lib/simple_form/components/hints.rb#5
module SimpleForm::Components::Hints
  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/components/hints.rb#19
  def has_hint?; end

  # source://simple_form//lib/simple_form/components/hints.rb#6
  def hint(wrapper_options = T.unsafe(nil)); end
end

# source://simple_form//lib/simple_form/components/label_input.rb#4
module SimpleForm::Components::LabelInput
  extend ::ActiveSupport::Concern
  include ::SimpleForm::Components::Labels

  mixes_in_class_methods ::SimpleForm::Components::Labels::ClassMethods

  # source://simple_form//lib/simple_form/components/label_input.rb#11
  def label_input(wrapper_options = T.unsafe(nil)); end

  private

  # source://simple_form//lib/simple_form/components/label_input.rb#21
  def deprecated_component(namespace, wrapper_options); end
end

# source://simple_form//lib/simple_form/components/labels.rb#4
module SimpleForm::Components::Labels
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::SimpleForm::Components::Labels::ClassMethods

  # source://simple_form//lib/simple_form/components/labels.rb#29
  def label(wrapper_options = T.unsafe(nil)); end

  # source://simple_form//lib/simple_form/components/labels.rb#48
  def label_html_options; end

  # source://simple_form//lib/simple_form/components/labels.rb#44
  def label_target; end

  # source://simple_form//lib/simple_form/components/labels.rb#39
  def label_text(wrapper_options = T.unsafe(nil)); end

  protected

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/components/labels.rb#83
  def generate_label_for_attribute?; end

  # First check labels translation and then human attribute name.
  #
  # source://simple_form//lib/simple_form/components/labels.rb#73
  def label_translation; end

  # source://simple_form//lib/simple_form/components/labels.rb#63
  def raw_label_text; end

  # Default required text when attribute is required.
  #
  # source://simple_form//lib/simple_form/components/labels.rb#68
  def required_label_text; end
end

# source://simple_form//lib/simple_form/components/labels.rb#7
module SimpleForm::Components::Labels::ClassMethods
  # source://simple_form//lib/simple_form/components/labels.rb#8
  def translate_required_html; end

  # source://simple_form//lib/simple_form/components/labels.rb#18
  def translate_required_mark; end

  # source://simple_form//lib/simple_form/components/labels.rb#14
  def translate_required_text; end

  private

  # source://simple_form//lib/simple_form/components/labels.rb#24
  def i18n_scope; end
end

# Needs to be enabled in order to do automatic lookups.
#
# source://simple_form//lib/simple_form/components/maxlength.rb#5
module SimpleForm::Components::Maxlength
  # source://simple_form//lib/simple_form/components/maxlength.rb#6
  def maxlength(wrapper_options = T.unsafe(nil)); end

  private

  # source://simple_form//lib/simple_form/components/maxlength.rb#23
  def find_length_validator; end

  # source://simple_form//lib/simple_form/components/maxlength.rb#13
  def maximum_length_from_validation; end

  # source://simple_form//lib/simple_form/components/maxlength.rb#27
  def maximum_length_value_from(length_validator); end
end

# source://simple_form//lib/simple_form/components/min_max.rb#4
module SimpleForm::Components::MinMax
  # source://simple_form//lib/simple_form/components/min_max.rb#5
  def min_max(wrapper_options = T.unsafe(nil)); end

  private

  # source://simple_form//lib/simple_form/components/min_max.rb#40
  def evaluate_numericality_validator_option(option); end

  # source://simple_form//lib/simple_form/components/min_max.rb#36
  def find_numericality_validator; end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/components/min_max.rb#16
  def integer?; end

  # source://simple_form//lib/simple_form/components/min_max.rb#28
  def maximum_value(validator_options); end

  # source://simple_form//lib/simple_form/components/min_max.rb#20
  def minimum_value(validator_options); end
end

# Needs to be enabled in order to do automatic lookups.
#
# source://simple_form//lib/simple_form/components/minlength.rb#5
module SimpleForm::Components::Minlength
  # source://simple_form//lib/simple_form/components/minlength.rb#6
  def minlength(wrapper_options = T.unsafe(nil)); end

  private

  # source://simple_form//lib/simple_form/components/minlength.rb#23
  def find_length_validator; end

  # source://simple_form//lib/simple_form/components/minlength.rb#13
  def minimum_length_from_validation; end

  # source://simple_form//lib/simple_form/components/minlength.rb#27
  def minimum_length_value_from(length_validator); end
end

# Needs to be enabled in order to do automatic lookups.
#
# source://simple_form//lib/simple_form/components/pattern.rb#5
module SimpleForm::Components::Pattern
  # source://simple_form//lib/simple_form/components/pattern.rb#6
  def pattern(wrapper_options = T.unsafe(nil)); end

  private

  # source://simple_form//lib/simple_form/components/pattern.rb#26
  def evaluate_format_validator_option(option); end

  # source://simple_form//lib/simple_form/components/pattern.rb#22
  def find_pattern_validator; end

  # source://simple_form//lib/simple_form/components/pattern.rb#13
  def pattern_source; end
end

# Needs to be enabled in order to do automatic lookups.
#
# source://simple_form//lib/simple_form/components/placeholders.rb#5
module SimpleForm::Components::Placeholders
  # source://simple_form//lib/simple_form/components/placeholders.rb#6
  def placeholder(wrapper_options = T.unsafe(nil)); end

  # source://simple_form//lib/simple_form/components/placeholders.rb#11
  def placeholder_text(wrapper_options = T.unsafe(nil)); end
end

# Needs to be enabled in order to do automatic lookups.
#
# source://simple_form//lib/simple_form/components/readonly.rb#5
module SimpleForm::Components::Readonly
  # source://simple_form//lib/simple_form/components/readonly.rb#6
  def readonly(wrapper_options = T.unsafe(nil)); end

  private

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/components/readonly.rb#16
  def readonly_attribute?; end
end

# source://simple_form//lib/simple_form/error_notification.rb#3
class SimpleForm::ErrorNotification
  # @return [ErrorNotification] a new instance of ErrorNotification
  #
  # source://simple_form//lib/simple_form/error_notification.rb#6
  def initialize(builder, options); end

  # source://simple_form//lib/simple_form/error_notification.rb#4
  def object(*_arg0, **_arg1, &_arg2); end

  # source://simple_form//lib/simple_form/error_notification.rb#4
  def object_name(*_arg0, **_arg1, &_arg2); end

  # source://simple_form//lib/simple_form/error_notification.rb#12
  def render; end

  # source://simple_form//lib/simple_form/error_notification.rb#4
  def template(*_arg0, **_arg1, &_arg2); end

  protected

  # source://simple_form//lib/simple_form/error_notification.rb#28
  def error_message; end

  # source://simple_form//lib/simple_form/error_notification.rb#32
  def error_notification_tag; end

  # source://simple_form//lib/simple_form/error_notification.rb#20
  def errors; end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/error_notification.rb#24
  def has_errors?; end

  # source://simple_form//lib/simple_form/error_notification.rb#36
  def html_options; end

  # source://simple_form//lib/simple_form/error_notification.rb#41
  def translate_error_notification; end
end

# source://simple_form//lib/simple_form.rb#41
SimpleForm::FILE_METHODS_DEPRECATION_WARN = T.let(T.unsafe(nil), String)

# source://simple_form//lib/simple_form/form_builder.rb#7
class SimpleForm::FormBuilder < ::ActionView::Helpers::FormBuilder
  include ::SimpleForm::Inputs
  extend ::SimpleForm::MapType

  # @return [FormBuilder] a new instance of FormBuilder
  #
  # source://simple_form//lib/simple_form/form_builder.rb#41
  def initialize(*_arg0); end

  # Helper for dealing with association selects/radios, generating the
  # collection automatically. It's just a wrapper to input, so all options
  # supported in input are also supported by association. Some extra options
  # can also be given:
  #
  # == Examples
  #
  #   simple_form_for @user do |f|
  #     f.association :company          # Company.all
  #   end
  #
  #   f.association :company, collection: Company.all(order: 'name')
  #   # Same as using :order option, but overriding collection
  #
  # == Block
  #
  # When a block is given, association simple behaves as a proxy to
  # simple_fields_for:
  #
  #   f.association :company do |c|
  #     c.input :name
  #     c.input :type
  #   end
  #
  # From the options above, only :collection can also be supplied.
  #
  # Please note that the association helper is currently only tested with Active Record. Depending on the ORM you are using your mileage may vary.
  #
  # @raise [ArgumentError]
  #
  # source://simple_form//lib/simple_form/form_builder.rb#207
  def association(association, options = T.unsafe(nil), &block); end

  # Basic input helper, combines all components in the stack to generate
  # input html based on options the user define and some guesses through
  # database column information. By default a call to input will generate
  # label + input + hint (when defined) + errors (when exists), and all can
  # be configured inside a wrapper html.
  #
  # If a block is given, the contents of the block will replace the input
  # field that would otherwise be generated automatically. The content will
  # be given a label and wrapper div to make it consistent with the other
  # elements in the form.
  #
  # == Examples
  #
  #   # Imagine @user has error "can't be blank" on name
  #   simple_form_for @user do |f|
  #     f.input :name, hint: 'My hint'
  #   end
  #
  # This is the output html (only the input portion, not the form):
  #
  #     <label class="string required" for="user_name">
  #       <abbr title="required">*</abbr> Super User Name!
  #     </label>
  #     <input class="string required" id="user_name" maxlength="100"
  #        name="user[name]" type="text" value="Carlos" />
  #     <span class="hint">My hint</span>
  #     <span class="error">can't be blank</span>
  #
  # Each database type will render a default input, based on some mappings and
  # heuristic to determine which is the best option.
  #
  # You have some options for the input to enable/disable some functions:
  #
  #   as: allows you to define the input type you want, for instance you
  #          can use it to generate a text field for a date column.
  #
  #   required: defines whether this attribute is required or not. True
  #               by default.
  #
  # The fact SimpleForm is built in components allow the interface to be unified.
  # So, for instance, if you need to disable :hint for a given input, you can pass
  # hint: false. The same works for :error, :label and :wrapper.
  #
  # Besides the html for any component can be changed. So, if you want to change
  # the label html you just need to give a hash to :label_html. To configure the
  # input html, supply :input_html instead and so on.
  #
  # == Options
  #
  # Some inputs, as datetime, time and select allow you to give extra options, like
  # prompt and/or include blank. Such options are given in plainly:
  #
  #    f.input :created_at, include_blank: true
  #
  # == Collection
  #
  # When playing with collections (:radio_buttons, :check_boxes and :select
  # inputs), you have three extra options:
  #
  #   collection: use to determine the collection to generate the radio or select
  #
  #   label_method: the method to apply on the array collection to get the label
  #
  #   value_method: the method to apply on the array collection to get the value
  #
  # == Priority
  #
  # Some inputs, as :time_zone and :country accepts a :priority option. If none is
  # given SimpleForm.time_zone_priority and SimpleForm.country_priority are used respectively.
  #
  # source://simple_form//lib/simple_form/form_builder.rb#118
  def attribute(attribute_name, options = T.unsafe(nil), &block); end

  # source://simple_form//lib/simple_form/form_builder.rb#237
  def button(type, *args, &block); end

  # Creates a button:
  #
  #   form_for @user do |f|
  #     f.button :submit
  #   end
  #
  # It just acts as a proxy to method name given. We also alias original Rails
  # button implementation (3.2 forward (to delegate to the original when
  # calling `f.button :button`.
  #
  # source://actionview/7.2.1.1/lib/action_view/helpers/form_helper.rb#2649
  def button_button(value = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Creates a collection of check boxes for each item in the collection,
  # associated with a clickable label. Use value_method and text_method to
  # convert items in the collection for use as text/value in check boxes.
  # You can give a symbol or a proc to both value_method and text_method,
  # that will be evaluated for each item in the collection.
  #
  # == Examples
  #
  #   form_for @user do |f|
  #     f.collection_check_boxes :options, [[true, 'Yes'] ,[false, 'No']], :first, :last
  #   end
  #
  #   <input name="user[options][]" type="hidden" value="" />
  #   <input id="user_options_true" name="user[options][]" type="checkbox" value="true" />
  #   <label class="collection_check_boxes" for="user_options_true">Yes</label>
  #   <input name="user[options][]" type="hidden" value="" />
  #   <input id="user_options_false" name="user[options][]" type="checkbox" value="false" />
  #   <label class="collection_check_boxes" for="user_options_false">No</label>
  #
  # It is also possible to give a block that should generate the check box +
  # label. To wrap the check box with the label, for instance:
  #
  #   form_for @user do |f|
  #     f.collection_check_boxes(
  #       :options, [[true, 'Yes'] ,[false, 'No']], :first, :last
  #     ) do |b|
  #       b.label { b.check_box + b.text }
  #     end
  #   end
  #
  # == Options
  #
  # Collection check box accepts some extra options:
  #
  #   * checked  => the value or values that should be checked initially. Accepts
  #                 a single item or an array of items. It overrides existing associations.
  #
  #   * disabled => the value or values that should be disabled. Accepts a single
  #                 item or an array of items.
  #
  #   * collection_wrapper_tag   => the tag to wrap the entire collection.
  #
  #   * collection_wrapper_class => the CSS class to use for collection_wrapper_tag. This option
  #                                 is ignored if the :collection_wrapper_tag option is blank.
  #
  #   * item_wrapper_tag         => the tag to wrap each item in the collection.
  #
  #   * item_wrapper_class       => the CSS class to use for item_wrapper_tag
  #
  #   * a block                  => to generate the label + check box or any other component.
  #
  # source://simple_form//lib/simple_form/form_builder.rb#451
  def collection_check_boxes(method, collection, value_method, text_method, options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end

  # Create a collection of radio inputs for the attribute. Basically this
  # helper will create a radio input associated with a label for each
  # text/value option in the collection, using value_method and text_method
  # to convert these text/value. You can give a symbol or a proc to both
  # value_method and text_method, that will be evaluated for each item in
  # the collection.
  #
  # == Examples
  #
  #   form_for @user do |f|
  #     f.collection_radio_buttons :options, [[true, 'Yes'] ,[false, 'No']], :first, :last
  #   end
  #
  #   <input id="user_options_true" name="user[options]" type="radio" value="true" />
  #   <label class="collection_radio_buttons" for="user_options_true">Yes</label>
  #   <input id="user_options_false" name="user[options]" type="radio" value="false" />
  #   <label class="collection_radio_buttons" for="user_options_false">No</label>
  #
  # It is also possible to give a block that should generate the radio +
  # label. To wrap the radio with the label, for instance:
  #
  #   form_for @user do |f|
  #     f.collection_radio_buttons(
  #       :options, [[true, 'Yes'] ,[false, 'No']], :first, :last
  #     ) do |b|
  #       b.label { b.radio_button + b.text }
  #     end
  #   end
  #
  # == Options
  #
  # Collection radio accepts some extra options:
  #
  #   * checked  => the value that should be checked initially.
  #
  #   * disabled => the value or values that should be disabled. Accepts a single
  #                 item or an array of items.
  #
  #   * collection_wrapper_tag   => the tag to wrap the entire collection.
  #
  #   * collection_wrapper_class => the CSS class to use for collection_wrapper_tag
  #
  #   * item_wrapper_tag         => the tag to wrap each item in the collection.
  #
  #   * item_wrapper_class       => the CSS class to use for item_wrapper_tag
  #
  #   * a block                  => to generate the label + radio or any other component.
  #
  # source://simple_form//lib/simple_form/form_builder.rb#397
  def collection_radio_buttons(method, collection, value_method, text_method, options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end

  # Creates an error tag based on the given attribute, only when the attribute
  # contains errors. All the given options are sent as :error_html.
  #
  # == Examples
  #
  #    f.error :name
  #    f.error :name, id: "cool_error"
  #
  # source://simple_form//lib/simple_form/form_builder.rb#256
  def error(attribute_name, options = T.unsafe(nil)); end

  # Creates an error notification message that only appears when the form object
  # has some error. You can give a specific message with the :message option,
  # otherwise it will look for a message using I18n. All other options given are
  # passed straight as html options to the html tag.
  #
  # == Examples
  #
  #    f.error_notification
  #    f.error_notification message: 'Something went wrong'
  #    f.error_notification id: 'user_error_message', class: 'form_error'
  #
  # source://simple_form//lib/simple_form/form_builder.rb#346
  def error_notification(options = T.unsafe(nil)); end

  # Return the error but also considering its name. This is used
  # when errors for a hidden field need to be shown.
  #
  # == Examples
  #
  #    f.full_error :token #=> <span class="error">Token is invalid</span>
  #
  # source://simple_form//lib/simple_form/form_builder.rb#273
  def full_error(attribute_name, options = T.unsafe(nil)); end

  # Creates a hint tag for the given attribute. Accepts a symbol indicating
  # an attribute for I18n lookup or a string. All the given options are sent
  # as :hint_html.
  #
  # == Examples
  #
  #    f.hint :name # Do I18n lookup
  #    f.hint :name, id: "cool_hint"
  #    f.hint "Don't forget to accept this"
  #
  # source://simple_form//lib/simple_form/form_builder.rb#295
  def hint(attribute_name, options = T.unsafe(nil)); end

  # Basic input helper, combines all components in the stack to generate
  # input html based on options the user define and some guesses through
  # database column information. By default a call to input will generate
  # label + input + hint (when defined) + errors (when exists), and all can
  # be configured inside a wrapper html.
  #
  # If a block is given, the contents of the block will replace the input
  # field that would otherwise be generated automatically. The content will
  # be given a label and wrapper div to make it consistent with the other
  # elements in the form.
  #
  # == Examples
  #
  #   # Imagine @user has error "can't be blank" on name
  #   simple_form_for @user do |f|
  #     f.input :name, hint: 'My hint'
  #   end
  #
  # This is the output html (only the input portion, not the form):
  #
  #     <label class="string required" for="user_name">
  #       <abbr title="required">*</abbr> Super User Name!
  #     </label>
  #     <input class="string required" id="user_name" maxlength="100"
  #        name="user[name]" type="text" value="Carlos" />
  #     <span class="hint">My hint</span>
  #     <span class="error">can't be blank</span>
  #
  # Each database type will render a default input, based on some mappings and
  # heuristic to determine which is the best option.
  #
  # You have some options for the input to enable/disable some functions:
  #
  #   as: allows you to define the input type you want, for instance you
  #          can use it to generate a text field for a date column.
  #
  #   required: defines whether this attribute is required or not. True
  #               by default.
  #
  # The fact SimpleForm is built in components allow the interface to be unified.
  # So, for instance, if you need to disable :hint for a given input, you can pass
  # hint: false. The same works for :error, :label and :wrapper.
  #
  # Besides the html for any component can be changed. So, if you want to change
  # the label html you just need to give a hash to :label_html. To configure the
  # input html, supply :input_html instead and so on.
  #
  # == Options
  #
  # Some inputs, as datetime, time and select allow you to give extra options, like
  # prompt and/or include blank. Such options are given in plainly:
  #
  #    f.input :created_at, include_blank: true
  #
  # == Collection
  #
  # When playing with collections (:radio_buttons, :check_boxes and :select
  # inputs), you have three extra options:
  #
  #   collection: use to determine the collection to generate the radio or select
  #
  #   label_method: the method to apply on the array collection to get the label
  #
  #   value_method: the method to apply on the array collection to get the value
  #
  # == Priority
  #
  # Some inputs, as :time_zone and :country accepts a :priority option. If none is
  # given SimpleForm.time_zone_priority and SimpleForm.country_priority are used respectively.
  #
  # source://simple_form//lib/simple_form/form_builder.rb#118
  def input(attribute_name, options = T.unsafe(nil), &block); end

  # Creates a input tag for the given attribute. All the given options
  # are sent as :input_html.
  #
  # == Examples
  #
  #   simple_form_for @user do |f|
  #     f.input_field :name
  #   end
  #
  # This is the output html (only the input portion, not the form):
  #
  #     <input class="string required" id="user_name" maxlength="100"
  #        name="user[name]" type="text" value="Carlos" />
  #
  # It also support validation classes once it is configured.
  #
  #   # config/initializers/simple_form.rb
  #   SimpleForm.setup do |config|
  #     config.input_field_valid_class = 'is-valid'
  #     config.input_field_error_class = 'is-invalid'
  #   end
  #
  #   simple_form_for @user do |f|
  #     f.input_field :name
  #   end
  #
  # When the validation happens, the input will be rendered with
  # the class configured according to the validation:
  #
  # - when the input is valid:
  #
  #     <input class="is-valid string required" id="user_name" value="Carlos" />
  #
  # - when the input is invalid:
  #
  #     <input class="is-invalid string required" id="user_name" value="" />
  #
  # source://simple_form//lib/simple_form/form_builder.rb#165
  def input_field(attribute_name, options = T.unsafe(nil)); end

  # Creates a default label tag for the given attribute. You can give a label
  # through the :label option or using i18n. All the given options are sent
  # as :label_html.
  #
  # == Examples
  #
  #    f.label :name                     # Do I18n lookup
  #    f.label :name, "Name"             # Same behavior as Rails, do not add required tag
  #    f.label :name, label: "Name"      # Same as above, but adds required tag
  #
  #    f.label :name, required: false
  #    f.label :name, id: "cool_label"
  #
  # source://simple_form//lib/simple_form/form_builder.rb#324
  def label(attribute_name, *args); end

  # The action to be used in lookup.
  #
  # source://simple_form//lib/simple_form/form_builder.rb#474
  def lookup_action; end

  # Extract the model names from the object_name mess, ignoring numeric and
  # explicit child indexes.
  #
  # Example:
  #
  # route[blocks_attributes][0][blocks_learning_object_attributes][1][foo_attributes]
  # ["route", "blocks", "blocks_learning_object", "foo"]
  #
  # source://simple_form//lib/simple_form/form_builder.rb#463
  def lookup_model_names; end

  # source://simple_form//lib/simple_form/map_type.rb#7
  def mappings; end

  # source://simple_form//lib/simple_form/map_type.rb#7
  def mappings=(_arg0); end

  # source://simple_form//lib/simple_form/map_type.rb#7
  def mappings?; end

  # Returns the value of attribute object.
  #
  # source://simple_form//lib/simple_form/form_builder.rb#8
  def object; end

  # Returns the value of attribute object_name.
  #
  # source://simple_form//lib/simple_form/form_builder.rb#8
  def object_name; end

  # Returns the value of attribute template.
  #
  # source://simple_form//lib/simple_form/form_builder.rb#8
  def template; end

  # Returns the value of attribute wrapper.
  #
  # source://simple_form//lib/simple_form/form_builder.rb#8
  def wrapper; end

  private

  # source://simple_form//lib/simple_form/form_builder.rb#673
  def attempt_mapping(mapping, at); end

  # source://simple_form//lib/simple_form/form_builder.rb#679
  def attempt_mapping_with_custom_namespace(input_name); end

  # source://simple_form//lib/simple_form/form_builder.rb#508
  def build_association_attribute(reflection, association, options); end

  # source://simple_form//lib/simple_form/form_builder.rb#689
  def build_input_field_components(components); end

  # source://simple_form//lib/simple_form/form_builder.rb#699
  def build_input_field_options; end

  # Attempt to guess the better input type given the defined options. By
  # default always fallback to the user :as option, or to a :select when a
  # collection is given.
  #
  # source://simple_form//lib/simple_form/form_builder.rb#545
  def default_input_type(attribute_name, column, options); end

  # If cache_discovery is enabled, use the class level cache that persists
  # between requests, otherwise use the instance one.
  #
  # source://simple_form//lib/simple_form/form_builder.rb#656
  def discovery_cache; end

  # source://simple_form//lib/simple_form/form_builder.rb#485
  def fetch_association_collection(reflection, options); end

  # Internal: Try to discover whether an attribute corresponds to a file or not.
  #
  # Most upload Gems add some kind of attributes to the ActiveRecord's model they are included in.
  # This method tries to guess if an attribute belongs to some of these Gems by checking the presence
  # of their methods using `#respond_to?`.
  #
  # Note: This does not support multiple file upload inputs, as this is very application-specific.
  #
  # The order here was chosen based on the popularity of Gems:
  #
  # - `#{attribute_name}_attachment` - ActiveStorage >= `5.2` and Refile >= `0.2.0` <= `0.4.0`
  # - `remote_#{attribute_name}_url` - Refile >= `0.3.0` and CarrierWave >= `0.2.2`
  # - `#{attribute_name}_attacher` - Refile >= `0.4.0` and Shrine >= `0.9.0`
  # - `#{attribute_name}_file_name` - Paperclip ~> `2.0` (added for backwards compatibility)
  #
  # Returns a Boolean.
  #
  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/form_builder.rb#592
  def file_method?(attribute_name); end

  # source://simple_form//lib/simple_form/form_builder.rb#608
  def find_association_reflection(association); end

  # source://simple_form//lib/simple_form/form_builder.rb#600
  def find_attribute_column(attribute_name); end

  # source://simple_form//lib/simple_form/form_builder.rb#570
  def find_custom_type(attribute_name); end

  # Find an input based on the attribute name.
  #
  # source://simple_form//lib/simple_form/form_builder.rb#531
  def find_input(attribute_name, options = T.unsafe(nil), &block); end

  # Attempts to find a mapping. It follows the following rules:
  #
  # 1) It tries to find a registered mapping, if succeeds:
  #    a) Try to find an alternative with the same name in the Object scope
  #    b) Or use the found mapping
  # 2) If not, fallbacks to #{input_type}Input
  # 3) If not, fallbacks to SimpleForm::Inputs::#{input_type}Input
  #
  # source://simple_form//lib/simple_form/form_builder.rb#621
  def find_mapping(input_type); end

  # source://simple_form//lib/simple_form/form_builder.rb#646
  def find_wrapper(input_type, options); end

  # Attempts to find a wrapper mapping. It follows the following rules:
  #
  # 1) It tries to find a wrapper for the current form
  # 2) If not, it tries to find a config
  #
  # source://simple_form//lib/simple_form/form_builder.rb#638
  def find_wrapper_mapping(input_type); end

  # source://simple_form//lib/simple_form/form_builder.rb#664
  def mapping_override(klass); end

  class << self
    # source://simple_form//lib/simple_form/form_builder.rb#37
    def discovery_cache; end

    # source://simple_form//lib/simple_form/map_type.rb#7
    def mappings; end

    # source://simple_form//lib/simple_form/map_type.rb#7
    def mappings=(value); end

    # source://simple_form//lib/simple_form/map_type.rb#7
    def mappings?; end
  end
end

# When action is create or update, we still should use new and edit
#
# source://simple_form//lib/simple_form/form_builder.rb#11
SimpleForm::FormBuilder::ACTIONS = T.let(T.unsafe(nil), Hash)

# source://simple_form//lib/simple_form/form_builder.rb#16
SimpleForm::FormBuilder::ATTRIBUTE_COMPONENTS = T.let(T.unsafe(nil), Array)

# Helpers are made of several helpers that cannot be turned on automatically.
# For instance, disabled cannot be turned on automatically, it requires the
# user to explicitly pass the option disabled: true so it may work.
#
# source://simple_form//lib/simple_form/helpers.rb#6
module SimpleForm::Helpers; end

# source://simple_form//lib/simple_form/helpers/autofocus.rb#4
module SimpleForm::Helpers::Autofocus
  private

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/helpers/autofocus.rb#7
  def has_autofocus?; end
end

# source://simple_form//lib/simple_form/helpers/disabled.rb#4
module SimpleForm::Helpers::Disabled
  private

  # source://simple_form//lib/simple_form/helpers/disabled.rb#11
  def disabled_class; end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/helpers/disabled.rb#7
  def has_disabled?; end
end

# source://simple_form//lib/simple_form/helpers/readonly.rb#4
module SimpleForm::Helpers::Readonly
  private

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/helpers/readonly.rb#11
  def has_readonly?; end

  # source://simple_form//lib/simple_form/helpers/readonly.rb#7
  def readonly_class; end
end

# source://simple_form//lib/simple_form/helpers/required.rb#4
module SimpleForm::Helpers::Required
  private

  # source://simple_form//lib/simple_form/helpers/required.rb#11
  def calculate_required; end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/helpers/required.rb#25
  def required_by_default?; end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/helpers/required.rb#21
  def required_by_validators?; end

  # Do not use has_required? because we want to add the class
  # regardless of the required option.
  #
  # source://simple_form//lib/simple_form/helpers/required.rb#31
  def required_class; end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/helpers/required.rb#7
  def required_field?; end
end

# source://simple_form//lib/simple_form/helpers/validators.rb#4
module SimpleForm::Helpers::Validators
  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/helpers/validators.rb#5
  def has_validators?; end

  private

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/helpers/validators.rb#27
  def action_validator_match?(validator); end

  # source://simple_form//lib/simple_form/helpers/validators.rb#11
  def attribute_validators; end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/helpers/validators.rb#23
  def conditional_validators?(validator); end

  # source://simple_form//lib/simple_form/helpers/validators.rb#40
  def find_validator(kind); end

  # source://simple_form//lib/simple_form/helpers/validators.rb#15
  def reflection_validators; end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/helpers/validators.rb#19
  def valid_validator?(validator); end
end

# source://simple_form//lib/simple_form/inputs.rb#3
module SimpleForm::Inputs
  extend ::ActiveSupport::Autoload
end

# source://simple_form//lib/simple_form/inputs/base.rb#7
class SimpleForm::Inputs::Base
  include ::ERB::Escape
  include ::ERB::Util
  include ::ActiveSupport::CoreExt::ERBUtil
  include ::ActiveSupport::CoreExt::ERBUtilPrivate
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::TranslationHelper
  include ::SimpleForm::Helpers::Autofocus
  include ::SimpleForm::Helpers::Disabled
  include ::SimpleForm::Helpers::Readonly
  include ::SimpleForm::Helpers::Required
  include ::SimpleForm::Helpers::Validators
  include ::SimpleForm::Components::Errors
  include ::SimpleForm::Components::Hints
  include ::SimpleForm::Components::HTML5
  include ::SimpleForm::Components::LabelInput
  include ::SimpleForm::Components::Labels
  include ::SimpleForm::Components::Maxlength
  include ::SimpleForm::Components::Minlength
  include ::SimpleForm::Components::MinMax
  include ::SimpleForm::Components::Pattern
  include ::SimpleForm::Components::Placeholders
  include ::SimpleForm::Components::Readonly
  extend ::SimpleForm::Components::Labels::ClassMethods

  # @return [Base] a new instance of Base
  #
  # source://simple_form//lib/simple_form/inputs/base.rb#54
  def initialize(builder, attribute_name, column, input_type, options = T.unsafe(nil)); end

  # source://simple_form//lib/simple_form/inputs/base.rb#94
  def additional_classes; end

  # Returns the value of attribute attribute_name.
  #
  # source://simple_form//lib/simple_form/inputs/base.rb#28
  def attribute_name; end

  # Returns the value of attribute column.
  #
  # source://simple_form//lib/simple_form/inputs/base.rb#28
  def column; end

  # source://actionview/7.2.1.1/lib/action_view/helpers/translation_helper.rb#18
  def debug_missing_translation; end

  # source://actionview/7.2.1.1/lib/action_view/helpers/translation_helper.rb#18
  def debug_missing_translation=(val); end

  # source://simple_form//lib/simple_form/inputs/base.rb#33
  def default_options; end

  # source://simple_form//lib/simple_form/inputs/base.rb#33
  def default_options=(_arg0); end

  # source://simple_form//lib/simple_form/inputs/base.rb#33
  def default_options?; end

  # Returns the value of attribute html_classes.
  #
  # source://simple_form//lib/simple_form/inputs/base.rb#28
  def html_classes; end

  # @raise [NotImplementedError]
  #
  # source://simple_form//lib/simple_form/inputs/base.rb#86
  def input(wrapper_options = T.unsafe(nil)); end

  # source://simple_form//lib/simple_form/inputs/base.rb#98
  def input_class; end

  # Returns the value of attribute input_html_classes.
  #
  # source://simple_form//lib/simple_form/inputs/base.rb#28
  def input_html_classes; end

  # Returns the value of attribute input_html_options.
  #
  # source://simple_form//lib/simple_form/inputs/base.rb#28
  def input_html_options; end

  # source://simple_form//lib/simple_form/inputs/base.rb#90
  def input_options; end

  # Returns the value of attribute input_type.
  #
  # source://simple_form//lib/simple_form/inputs/base.rb#28
  def input_type; end

  # source://simple_form//lib/simple_form/inputs/base.rb#31
  def lookup_action(*_arg0, **_arg1, &_arg2); end

  # source://simple_form//lib/simple_form/inputs/base.rb#31
  def lookup_model_names(*_arg0, **_arg1, &_arg2); end

  # source://simple_form//lib/simple_form/inputs/base.rb#31
  def object(*_arg0, **_arg1, &_arg2); end

  # source://simple_form//lib/simple_form/inputs/base.rb#31
  def object_name(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute options.
  #
  # source://simple_form//lib/simple_form/inputs/base.rb#28
  def options; end

  # Returns the value of attribute reflection.
  #
  # source://simple_form//lib/simple_form/inputs/base.rb#28
  def reflection; end

  # source://simple_form//lib/simple_form/inputs/base.rb#31
  def template(*_arg0, **_arg1, &_arg2); end

  private

  # source://simple_form//lib/simple_form/inputs/base.rb#110
  def column_limit; end

  # Add one for decimal point
  #
  # source://simple_form//lib/simple_form/inputs/base.rb#115
  def decimal_limit; end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/inputs/base.rb#119
  def decimal_or_float?; end

  # Retrieve options for the given namespace from the options hash
  #
  # source://simple_form//lib/simple_form/inputs/base.rb#133
  def html_options_for(namespace, css_classes); end

  # source://simple_form//lib/simple_form/inputs/base.rb#227
  def i18n_scope; end

  # source://simple_form//lib/simple_form/inputs/base.rb#104
  def limit; end

  # source://simple_form//lib/simple_form/inputs/base.rb#192
  def merge_wrapper_options(options, wrapper_options); end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/inputs/base.rb#123
  def nested_boolean_style?; end

  # Find reflection name when available, otherwise use attribute
  #
  # source://simple_form//lib/simple_form/inputs/base.rb#128
  def reflection_or_attribute_name; end

  # source://simple_form//lib/simple_form/inputs/base.rb#211
  def set_input_classes(wrapper_options); end

  # Lookup translations for the given namespace using I18n, based on object name,
  # actual action and attribute name. Lookup priority as follows:
  #
  #   simple_form.{namespace}.{model}.{action}.{attribute}
  #   simple_form.{namespace}.{model}.{attribute}
  #   simple_form.{namespace}.defaults.{attribute}
  #
  #  Namespace is used for :labels and :hints.
  #
  #  Model is the actual object name, for a @user object you'll have :user.
  #  Action is the action being rendered, usually :new or :edit.
  #  And attribute is the attribute itself, :name for example.
  #
  #  The lookup for nested attributes is also done in a nested format using
  #  both model and nested object names, such as follow:
  #
  #   simple_form.{namespace}.{model}.{nested}.{action}.{attribute}
  #   simple_form.{namespace}.{model}.{nested}.{attribute}
  #   simple_form.{namespace}.{nested}.{action}.{attribute}
  #   simple_form.{namespace}.{nested}.{attribute}
  #   simple_form.{namespace}.defaults.{attribute}
  #
  #  Example:
  #
  #    simple_form:
  #      labels:
  #        user:
  #          new:
  #            email: 'E-mail para efetuar o sign in.'
  #          edit:
  #            email: 'E-mail.'
  #
  #  Take a look at our locale example file.
  #
  # source://simple_form//lib/simple_form/inputs/base.rb#174
  def translate_from_namespace(namespace, default = T.unsafe(nil)); end

  class << self
    # source://actionview/7.2.1.1/lib/action_view/helpers/translation_helper.rb#18
    def debug_missing_translation; end

    # source://actionview/7.2.1.1/lib/action_view/helpers/translation_helper.rb#18
    def debug_missing_translation=(val); end

    # source://simple_form//lib/simple_form/inputs/base.rb#33
    def default_options; end

    # source://simple_form//lib/simple_form/inputs/base.rb#33
    def default_options=(value); end

    # source://simple_form//lib/simple_form/inputs/base.rb#33
    def default_options?; end

    # source://simple_form//lib/simple_form/inputs/base.rb#42
    def disable(*keys); end

    # source://simple_form//lib/simple_form/inputs/base.rb#36
    def enable(*keys); end
  end
end

# source://simple_form//lib/simple_form/inputs/block_input.rb#4
class SimpleForm::Inputs::BlockInput < ::SimpleForm::Inputs::Base
  # @return [BlockInput] a new instance of BlockInput
  #
  # source://simple_form//lib/simple_form/inputs/block_input.rb#5
  def initialize(*args, &block); end

  # source://simple_form//lib/simple_form/inputs/block_input.rb#10
  def input(wrapper_options = T.unsafe(nil)); end
end

# source://simple_form//lib/simple_form/inputs/boolean_input.rb#4
class SimpleForm::Inputs::BooleanInput < ::SimpleForm::Inputs::Base
  # source://simple_form//lib/simple_form/inputs/boolean_input.rb#5
  def input(wrapper_options = T.unsafe(nil)); end

  # source://simple_form//lib/simple_form/inputs/boolean_input.rb#23
  def label_input(wrapper_options = T.unsafe(nil)); end

  private

  # source://simple_form//lib/simple_form/inputs/boolean_input.rb#44
  def boolean_label_class; end

  # Build a checkbox tag using default unchecked value. This allows us to
  # reuse the method for nested boolean style, but with no unchecked value,
  # which won't generate the hidden checkbox. This is the default functionality
  # in Rails > 3.2.1, and is backported in SimpleForm AV helpers.
  #
  # source://simple_form//lib/simple_form/inputs/boolean_input.rb#52
  def build_check_box(unchecked_value, options); end

  # Build a checkbox without generating the hidden field. See
  # #build_hidden_field_for_checkbox for more info.
  #
  # source://simple_form//lib/simple_form/inputs/boolean_input.rb#58
  def build_check_box_without_hidden_field(options); end

  # Create a hidden field for the current checkbox, so we can simulate Rails
  # functionality with hidden + checkbox, but under a nested context, where
  # we need the hidden field to be *outside* the label (otherwise it
  # generates invalid html - html5 only).
  #
  # source://simple_form//lib/simple_form/inputs/boolean_input.rb#66
  def build_hidden_field_for_checkbox; end

  # source://simple_form//lib/simple_form/inputs/boolean_input.rb#99
  def checked_value; end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/inputs/boolean_input.rb#95
  def include_hidden?; end

  # source://simple_form//lib/simple_form/inputs/boolean_input.rb#79
  def inline_label; end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/inputs/boolean_input.rb#75
  def inline_label?; end

  # Booleans are not required by default because in most of the cases
  # it makes no sense marking them as required. The only exception is
  # Terms of Use usually presented at most sites sign up screen.
  #
  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/inputs/boolean_input.rb#91
  def required_by_default?; end

  # source://simple_form//lib/simple_form/inputs/boolean_input.rb#103
  def unchecked_value; end
end

# source://simple_form//lib/simple_form/inputs/collection_check_boxes_input.rb#4
class SimpleForm::Inputs::CollectionCheckBoxesInput < ::SimpleForm::Inputs::CollectionRadioButtonsInput
  protected

  # source://simple_form//lib/simple_form/inputs/collection_check_boxes_input.rb#13
  def build_nested_boolean_style_item_tag(collection_builder); end

  # Checkbox components do not use the required html tag.
  # More info: https://github.com/heartcombo/simple_form/issues/340#issuecomment-2871956
  #
  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/inputs/collection_check_boxes_input.rb#9
  def has_required?; end

  # source://simple_form//lib/simple_form/inputs/collection_check_boxes_input.rb#17
  def item_wrapper_class; end
end

# source://simple_form//lib/simple_form/inputs/collection_input.rb#4
class SimpleForm::Inputs::CollectionInput < ::SimpleForm::Inputs::Base
  # @raise [NotImplementedError]
  #
  # source://simple_form//lib/simple_form/inputs/collection_input.rb#17
  def input(wrapper_options = T.unsafe(nil)); end

  # source://simple_form//lib/simple_form/inputs/collection_input.rb#22
  def input_options; end

  private

  # source://simple_form//lib/simple_form/inputs/collection_input.rb#34
  def collection; end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/inputs/collection_input.rb#94
  def collection_includes_basic_objects?(collection_classes); end

  # source://simple_form//lib/simple_form/inputs/collection_input.rb#90
  def detect_collection_classes(some_collection = T.unsafe(nil)); end

  # Detect the right method to find the label and value for a collection.
  # If no label or value method are defined, will attempt to find them based
  # on default label and value methods that can be configured through
  # SimpleForm.collection_label_methods and
  # SimpleForm.collection_value_methods.
  #
  # source://simple_form//lib/simple_form/inputs/collection_input.rb#59
  def detect_collection_methods; end

  # source://simple_form//lib/simple_form/inputs/collection_input.rb#71
  def detect_common_display_methods(collection_classes = T.unsafe(nil)); end

  # source://simple_form//lib/simple_form/inputs/collection_input.rb#83
  def detect_method_from_class(collection_classes); end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/inputs/collection_input.rb#41
  def has_required?; end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/inputs/collection_input.rb#50
  def multiple?; end

  # Check if :include_blank must be included by default.
  #
  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/inputs/collection_input.rb#46
  def skip_include_blank?; end

  # source://simple_form//lib/simple_form/inputs/collection_input.rb#98
  def translate_collection; end

  # source://simple_form//lib/simple_form/inputs/collection_input.rb#113
  def translate_option(options, key); end

  class << self
    # Default boolean collection for use with selects/radios when no
    # collection is given. Always fallback to this boolean collection.
    # Texts can be translated using i18n in "simple_form.yes" and
    # "simple_form.no" keys. See the example locale file.
    #
    # source://simple_form//lib/simple_form/inputs/collection_input.rb#12
    def boolean_collection; end
  end
end

# source://simple_form//lib/simple_form/inputs/collection_input.rb#5
SimpleForm::Inputs::CollectionInput::BASIC_OBJECT_CLASSES = T.let(T.unsafe(nil), Array)

# source://simple_form//lib/simple_form/inputs/collection_radio_buttons_input.rb#4
class SimpleForm::Inputs::CollectionRadioButtonsInput < ::SimpleForm::Inputs::CollectionInput
  # source://simple_form//lib/simple_form/inputs/collection_radio_buttons_input.rb#5
  def input(wrapper_options = T.unsafe(nil)); end

  # source://simple_form//lib/simple_form/inputs/collection_radio_buttons_input.rb#17
  def input_options; end

  protected

  # source://simple_form//lib/simple_form/inputs/collection_radio_buttons_input.rb#25
  def apply_default_collection_options!(options); end

  # source://simple_form//lib/simple_form/inputs/collection_radio_buttons_input.rb#43
  def build_nested_boolean_style_item_tag(collection_builder); end

  # source://simple_form//lib/simple_form/inputs/collection_radio_buttons_input.rb#37
  def collection_block_for_nested_boolean_style; end

  # Do not attempt to generate label[for] attributes by default, unless an
  # explicit html option is given. This avoids generating labels pointing to
  # non existent fields.
  #
  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/inputs/collection_radio_buttons_input.rb#54
  def generate_label_for_attribute?; end

  # source://simple_form//lib/simple_form/inputs/collection_radio_buttons_input.rb#47
  def item_wrapper_class; end
end

# source://simple_form//lib/simple_form/inputs/collection_select_input.rb#4
class SimpleForm::Inputs::CollectionSelectInput < ::SimpleForm::Inputs::CollectionInput
  # source://simple_form//lib/simple_form/inputs/collection_select_input.rb#5
  def input(wrapper_options = T.unsafe(nil)); end
end

# source://simple_form//lib/simple_form/inputs/color_input.rb#4
class SimpleForm::Inputs::ColorInput < ::SimpleForm::Inputs::Base
  # source://simple_form//lib/simple_form/inputs/color_input.rb#5
  def input(wrapper_options = T.unsafe(nil)); end
end

# source://simple_form//lib/simple_form/inputs/date_time_input.rb#4
class SimpleForm::Inputs::DateTimeInput < ::SimpleForm::Inputs::Base
  # source://simple_form//lib/simple_form/inputs/date_time_input.rb#5
  def input(wrapper_options = T.unsafe(nil)); end

  private

  # source://simple_form//lib/simple_form/inputs/date_time_input.rb#17
  def label_target; end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/inputs/date_time_input.rb#34
  def use_html5_inputs?; end
end

# source://simple_form//lib/simple_form/inputs/file_input.rb#4
class SimpleForm::Inputs::FileInput < ::SimpleForm::Inputs::Base
  # source://simple_form//lib/simple_form/inputs/file_input.rb#5
  def input(wrapper_options = T.unsafe(nil)); end
end

# source://simple_form//lib/simple_form/inputs/grouped_collection_select_input.rb#4
class SimpleForm::Inputs::GroupedCollectionSelectInput < ::SimpleForm::Inputs::CollectionInput
  # source://simple_form//lib/simple_form/inputs/grouped_collection_select_input.rb#5
  def input(wrapper_options = T.unsafe(nil)); end

  private

  # Sample collection
  #
  # source://simple_form//lib/simple_form/inputs/grouped_collection_select_input.rb#25
  def collection; end

  # source://simple_form//lib/simple_form/inputs/grouped_collection_select_input.rb#44
  def detect_method_from_class(collection_classes); end

  # source://simple_form//lib/simple_form/inputs/grouped_collection_select_input.rb#33
  def group_label_method; end

  # source://simple_form//lib/simple_form/inputs/grouped_collection_select_input.rb#29
  def group_method; end

  # source://simple_form//lib/simple_form/inputs/grouped_collection_select_input.rb#17
  def grouped_collection; end
end

# source://simple_form//lib/simple_form/inputs/hidden_input.rb#4
class SimpleForm::Inputs::HiddenInput < ::SimpleForm::Inputs::Base
  # source://simple_form//lib/simple_form/inputs/hidden_input.rb#7
  def input(wrapper_options = T.unsafe(nil)); end

  private

  # source://simple_form//lib/simple_form/inputs/hidden_input.rb#15
  def required_class; end

  class << self
    # source://simple_form//lib/simple_form/inputs/base.rb#33
    def default_options; end
  end
end

# source://simple_form//lib/simple_form/inputs/numeric_input.rb#4
class SimpleForm::Inputs::NumericInput < ::SimpleForm::Inputs::Base
  # source://simple_form//lib/simple_form/inputs/numeric_input.rb#7
  def input(wrapper_options = T.unsafe(nil)); end

  class << self
    # source://simple_form//lib/simple_form/inputs/base.rb#33
    def default_options; end
  end
end

# source://simple_form//lib/simple_form/inputs/password_input.rb#4
class SimpleForm::Inputs::PasswordInput < ::SimpleForm::Inputs::Base
  # source://simple_form//lib/simple_form/inputs/password_input.rb#7
  def input(wrapper_options = T.unsafe(nil)); end

  class << self
    # source://simple_form//lib/simple_form/inputs/base.rb#33
    def default_options; end
  end
end

# source://simple_form//lib/simple_form/inputs/priority_input.rb#4
class SimpleForm::Inputs::PriorityInput < ::SimpleForm::Inputs::CollectionSelectInput
  # source://simple_form//lib/simple_form/inputs/priority_input.rb#5
  def input(wrapper_options = T.unsafe(nil)); end

  # source://simple_form//lib/simple_form/inputs/priority_input.rb#11
  def input_priority; end

  protected

  # source://simple_form//lib/simple_form/inputs/priority_input.rb#17
  def country_input(merged_input_options); end

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/inputs/priority_input.rb#32
  def skip_include_blank?; end

  # source://simple_form//lib/simple_form/inputs/priority_input.rb#24
  def time_zone_input(merged_input_options); end
end

# source://simple_form//lib/simple_form/inputs/range_input.rb#4
class SimpleForm::Inputs::RangeInput < ::SimpleForm::Inputs::NumericInput
  # source://simple_form//lib/simple_form/inputs/range_input.rb#5
  def input(wrapper_options = T.unsafe(nil)); end
end

# source://simple_form//lib/simple_form/inputs/rich_text_area_input.rb#4
class SimpleForm::Inputs::RichTextAreaInput < ::SimpleForm::Inputs::Base
  # source://simple_form//lib/simple_form/inputs/rich_text_area_input.rb#5
  def input(wrapper_options = T.unsafe(nil)); end
end

# source://simple_form//lib/simple_form/inputs/string_input.rb#4
class SimpleForm::Inputs::StringInput < ::SimpleForm::Inputs::Base
  # source://simple_form//lib/simple_form/inputs/string_input.rb#7
  def input(wrapper_options = T.unsafe(nil)); end

  private

  # @return [Boolean]
  #
  # source://simple_form//lib/simple_form/inputs/string_input.rb#20
  def string?; end

  class << self
    # source://simple_form//lib/simple_form/inputs/base.rb#33
    def default_options; end
  end
end

# source://simple_form//lib/simple_form/inputs/text_input.rb#4
class SimpleForm::Inputs::TextInput < ::SimpleForm::Inputs::Base
  # source://simple_form//lib/simple_form/inputs/text_input.rb#7
  def input(wrapper_options = T.unsafe(nil)); end

  class << self
    # source://simple_form//lib/simple_form/inputs/base.rb#33
    def default_options; end
  end
end

# source://simple_form//lib/simple_form/map_type.rb#5
module SimpleForm::MapType
  # @raise [ArgumentError]
  #
  # source://simple_form//lib/simple_form/map_type.rb#11
  def map_type(*types); end

  class << self
    # @private
    #
    # source://simple_form//lib/simple_form/map_type.rb#6
    def extended(base); end
  end
end

# source://simple_form//lib/simple_form/railtie.rb#5
class SimpleForm::Railtie < ::Rails::Railtie; end

# source://simple_form//lib/simple_form/tags.rb#3
module SimpleForm::Tags; end

# source://simple_form//lib/simple_form/tags.rb#57
class SimpleForm::Tags::CollectionCheckBoxes < ::ActionView::Helpers::Tags::CollectionCheckBoxes
  include ::SimpleForm::Tags::CollectionExtensions

  # source://simple_form//lib/simple_form/tags.rb#60
  def render; end

  private

  # source://simple_form//lib/simple_form/tags.rb#66
  def render_component(builder); end
end

# source://simple_form//lib/simple_form/tags.rb#4
module SimpleForm::Tags::CollectionExtensions
  private

  # source://simple_form//lib/simple_form/tags.rb#7
  def render_collection; end

  # source://simple_form//lib/simple_form/tags.rb#29
  def wrap_rendered_collection(collection); end
end

# source://simple_form//lib/simple_form/tags.rb#41
class SimpleForm::Tags::CollectionRadioButtons < ::ActionView::Helpers::Tags::CollectionRadioButtons
  include ::SimpleForm::Tags::CollectionExtensions

  # source://simple_form//lib/simple_form/tags.rb#44
  def render; end

  private

  # source://simple_form//lib/simple_form/tags.rb#50
  def render_component(builder); end
end

# Raised when fails to find a given wrapper name
#
# source://simple_form//lib/simple_form.rb#226
class SimpleForm::WrapperNotFound < ::StandardError; end

# source://simple_form//lib/simple_form/wrappers.rb#3
module SimpleForm::Wrappers; end

# Provides the builder syntax for components. The builder provides
# three methods `use`, `optional` and `wrapper` and they allow the following invocations:
#
#     config.wrappers do |b|
#       # Use a single component
#       b.use :html5
#
#       # Use the component, but do not automatically lookup. It will only be triggered when
#       # :placeholder is explicitly set.
#       b.optional :placeholder
#
#       # Use a component with specific wrapper options
#       b.use :error, wrap_with: { tag: "span", class: "error" }
#
#       # Use a set of components by wrapping them in a tag+class.
#       b.wrapper tag: "div", class: "another" do |ba|
#         ba.use :label
#         ba.use :input
#       end
#
#       # Use a set of components by wrapping them in a tag+class.
#       # This wrapper is identified by :label_input, which means it can
#       # be turned off on demand with `f.input :name, label_input: false`
#       b.wrapper :label_input, tag: "div", class: "another" do |ba|
#         ba.use :label
#         ba.use :input
#       end
#     end
#
# The builder also accepts default options at the root level. This is usually
# used if you want a component to be disabled by default:
#
#     config.wrappers hint: false do |b|
#       b.use :hint
#       b.use :label_input
#     end
#
# In the example above, hint defaults to false, which means it won't automatically
# do the lookup anymore. It will only be triggered when :hint is explicitly set.
#
# source://simple_form//lib/simple_form/wrappers/builder.rb#43
class SimpleForm::Wrappers::Builder
  # @return [Builder] a new instance of Builder
  #
  # source://simple_form//lib/simple_form/wrappers/builder.rb#44
  def initialize(options); end

  # source://simple_form//lib/simple_form/wrappers/builder.rb#57
  def optional(name, options = T.unsafe(nil), &block); end

  # source://simple_form//lib/simple_form/wrappers/builder.rb#75
  def to_a; end

  # source://simple_form//lib/simple_form/wrappers/builder.rb#49
  def use(name, options = T.unsafe(nil)); end

  # source://simple_form//lib/simple_form/wrappers/builder.rb#62
  def wrapper(name, options = T.unsafe(nil)); end
end

# source://simple_form//lib/simple_form/wrappers/leaf.rb#4
class SimpleForm::Wrappers::Leaf
  # @return [Leaf] a new instance of Leaf
  #
  # source://simple_form//lib/simple_form/wrappers/leaf.rb#7
  def initialize(namespace, options = T.unsafe(nil)); end

  # source://simple_form//lib/simple_form/wrappers/leaf.rb#24
  def find(name); end

  # Returns the value of attribute namespace.
  #
  # source://simple_form//lib/simple_form/wrappers/leaf.rb#5
  def namespace; end

  # source://simple_form//lib/simple_form/wrappers/leaf.rb#12
  def render(input); end
end

# A wrapper is an object that holds several components and render them.
# A component may be any object that responds to `render`.
# This API allows inputs/components to be easily wrapped, removing the
# need to modify the code only to wrap input in an extra tag.
#
# `Many` represents a wrapper around several components at the same time.
# It may optionally receive a namespace, allowing it to be configured
# on demand on input generation.
#
# source://simple_form//lib/simple_form/wrappers/many.rb#12
class SimpleForm::Wrappers::Many
  # @return [Many] a new instance of Many
  #
  # source://simple_form//lib/simple_form/wrappers/many.rb#15
  def initialize(namespace, components, defaults = T.unsafe(nil)); end

  # Returns the value of attribute components.
  #
  # source://simple_form//lib/simple_form/wrappers/many.rb#13
  def components; end

  # Returns the value of attribute defaults.
  #
  # source://simple_form//lib/simple_form/wrappers/many.rb#13
  def defaults; end

  # source://simple_form//lib/simple_form/wrappers/many.rb#36
  def find(name); end

  # Returns the value of attribute namespace.
  #
  # source://simple_form//lib/simple_form/wrappers/many.rb#13
  def namespace; end

  # source://simple_form//lib/simple_form/wrappers/many.rb#23
  def render(input); end

  private

  # source://simple_form//lib/simple_form/wrappers/many.rb#69
  def html_classes(input, options); end

  # source://simple_form//lib/simple_form/wrappers/many.rb#65
  def html_options(options); end

  # source://simple_form//lib/simple_form/wrappers/many.rb#52
  def wrap(input, options, content); end
end

# `Root` is the root wrapper for all components. It is special cased to
# always have a namespace and to add special html classes.
#
# source://simple_form//lib/simple_form/wrappers/root.rb#6
class SimpleForm::Wrappers::Root < ::SimpleForm::Wrappers::Many
  # @return [Root] a new instance of Root
  #
  # source://simple_form//lib/simple_form/wrappers/root.rb#9
  def initialize(*args); end

  # Provide a fallback if name cannot be found.
  #
  # source://simple_form//lib/simple_form/wrappers/root.rb#20
  def find(name); end

  # Returns the value of attribute options.
  #
  # source://simple_form//lib/simple_form/wrappers/root.rb#7
  def options; end

  # source://simple_form//lib/simple_form/wrappers/root.rb#14
  def render(input); end

  private

  # source://simple_form//lib/simple_form/wrappers/root.rb#37
  def html_class(key, options); end

  # source://simple_form//lib/simple_form/wrappers/root.rb#26
  def html_classes(input, options); end
end

# `Single` is an optimization for a wrapper that has only one component.
#
# source://simple_form//lib/simple_form/wrappers/single.rb#5
class SimpleForm::Wrappers::Single < ::SimpleForm::Wrappers::Many
  # @return [Single] a new instance of Single
  #
  # source://simple_form//lib/simple_form/wrappers/single.rb#6
  def initialize(name, wrapper_options = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://simple_form//lib/simple_form/wrappers/single.rb#12
  def render(input); end

  private

  # source://simple_form//lib/simple_form/wrappers/single.rb#22
  def html_options(options); end
end
