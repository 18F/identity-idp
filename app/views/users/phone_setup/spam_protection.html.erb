<% title t('titles.spam_protection') %>

<%= render PageHeadingComponent.new.with_content(t('titles.spam_protection')) %>

<p><%= t('forms.spam_protection.description') %></p>

<%= simple_form_for(@new_phone_form, url: request.url, method: :post) do |f| %>
  <%= f.input :phone, as: :hidden %>
  <%= f.input :international_code, as: :hidden %>
  <%= f.input :otp_delivery_preference, as: :hidden %>
  <%= f.input :otp_make_default_number, as: :hidden %>
  <%= f.input :recaptcha_version, as: :hidden, input_html: { value: 2 } %>
  <%= f.input :recaptcha_token, as: :hidden, input_html: { id: :recaptcha_token } %>
  <%= javascript_tag(nonce: true) do %>
    function onCaptchaResponse(token) {
      const input = document.getElementById('recaptcha_token');
      input.value = token;
      input.closest('form').submit();
    }
  <% end %>
  <% if IdentityConfig.store.recaptcha_site_key_v2.present? %>
    <div
      class="g-recaptcha"
      data-sitekey="<%= IdentityConfig.store.recaptcha_site_key_v2 %>"
      data-callback="onCaptchaResponse"
      data-action="<%= PhoneRecaptchaValidator::RECAPTCHA_ACTION %>"
    ></div>
    <% if FeatureManagement.recaptcha_enterprise? %>
      <script src="https://www.google.com/recaptcha/enterprise.js" async></script>
    <% else %>
      <script src="https://www.google.com/recaptcha/api.js" async></script>
    <% end %>
  <% elsif IdentityConfig.store.phone_recaptcha_mock_validator %>
    <%= f.input :recaptcha_mock_score, as: :hidden, input_html: { value: 1.0 } %>
    <%= render ButtonComponent.new(id: :submit_button, type: :button, big: true, wide: true, class: 'display-block margin-y-5') do %>
      <%= t('forms.buttons.continue') %>
    <% end %>
    <%= javascript_tag(nonce: true) do %>
      document.getElementById('submit_button').addEventListener('click', () => onCaptchaResponse('mock_token'));
    <% end %>
  <% end %>
<% end %>

<%= render TroubleshootingOptionsComponent.new do |c| %>
  <% c.with_header { t('components.troubleshooting_options.default_heading') } %>
  <% if local_assigns[:two_factor_options_path].present? %>
    <% c.with_option(
         url: two_factor_options_path,
       ).with_content(t('two_factor_authentication.login_options_link_text')) %>
  <% end %>
  <% c.with_option(
       url: help_center_redirect_path(
         category: 'get-started',
         article: 'authentication-options',
         flow: :two_factor_authentication,
         step: :phone_setup_spam_protection,
       ),
       new_tab: true,
     ).with_content(t('two_factor_authentication.phone_verification.troubleshooting.learn_more')) %>
<% end %>

<% unless local_assigns[:two_factor_options_path].present? %>
  <%= render PageFooterComponent.new do %>
    <%= link_to t('links.cancel'), account_path %>
  <% end %>
<% end %>