export DIRENV_WARN_TIMEOUT=20s

# Ensure required environment variables exist and store them in .env for devenv to consume
dotenv

if [ ! -f .env ]; then
  touch .env
fi

ensure_var() {
  VAR_NAME="$1"
  if [ -z "$VAR_NAME" ] || [ "$(printenv "$VAR_NAME")" = "" ]; then
    echo "If you don't know the value, or have it ready, just hit enter. We'll re-prompt during the next execution."
    read -r -p "Enter value for ${VAR_NAME}: " VALUE
    remove_existing_var_record "$VAR_NAME"
    echo "${VAR_NAME}=$VALUE" >>.env
    echo "Saved ${VAR_NAME} to .env"
  elif ! grep -q "^${VAR_NAME}=" .env; then
    remove_existing_var_record "$VAR_NAME"
    echo "${VAR_NAME}=$(printenv "$VAR_NAME")" >>.env
    echo "Saved ${VAR_NAME} to .env"
  fi
}

remove_existing_var_record() {
  VAR_NAME="$1"
  # GNU Sed Check
  if sed --version >/dev/null 2>&1; then
    sed -i "/^${VAR_NAME}=/d" .env
  # BSD Sed Check
  else
    sed -i "" "/^${VAR_NAME}=/d" .env
  fi
}

ensure_var "YKMAN_OATH_CREDENTIAL_NAME"

eval "$(devenv direnvrc)"

if [ ! -d .direnv ] || [ ! -d .devenv ]; then
  echo "Setting up your development environment for the first time."
  echo "This process may take a while. Verbose mode is now enabled to provide detailed progress updates."
  echo "If you weren't expecting direnv to launch a local developer environment, consider running 'direnv disallow' to disable any error messages."
  use devenv --verbose
else
  use devenv
fi
