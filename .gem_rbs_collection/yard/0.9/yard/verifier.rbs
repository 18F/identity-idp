# !!! GENERATED FILE !!!
# Please see yard/0.9/_generators/README.md

# Similar to a Proc, but runs a set of Ruby expressions using a small
# DSL to make tag lookups easier.
#
# The syntax is as follows:
# * All syntax is Ruby compatible
# * +object+ (+o+ for short) exist to access the object being verified
# * +@TAGNAME+ is translated into +object.tag('TAGNAME')+
# * +@@TAGNAME+ is translated into +object.tags('TAGNAME')+
# * +object+ can be omitted as target for method calls (it is implied)
#
# @example Create a verifier to check for objects that don't have @private tags
#   verifier = Verifier.new('!@private')
#   verifier.call(object) # => true (no @private tag)
# @example Create a verifier to find any return tag with an empty description
#   Verifier.new('@return.text.empty?')
#   # Equivalent to:
#   Verifier.new('object.tag(:return).text.empty?')
# @example Check if there are any @param tags
#   Verifier.new('@@param.empty?')
#   # Equivalent to:
#   Verifier.new('object.tags(:param).empty?')
# @example Using +object+ or +o+ to look up object attributes directly
#   Verifier.new('object.docstring == "hello world"')
#   # Equivalent to:
#   Verifier.new('o.docstring == "hello world"')
# @example Without using +object+ or +o+
#   Verifier.new('tag(:return).size == 1 || has_tag?(:author)')
# @example Specifying multiple expressions
#   Verifier.new('@return', '@param', '@yield')
#   # Equivalent to:
#   Verifier.new('@return && @param && @yield')
class YARD::Verifier
  # @return [Array<String>] a list of all expressions the verifier checks for
  # @since 0.5.6
  attr_accessor expressions: Array[String]
  # @return [CodeObjects::Base] the current object being tested
  attr_reader object: YARD::CodeObjects::Base
  # Creates a verifier from a set of expressions
  #
  # @param [Array<String>] expressions a list of Ruby expressions to
  #   parse.
  def initialize: (*Array[String] expressions) -> void
  # Adds a set of expressions and recompiles the verifier
  #
  # @param [Array<String>] expressions a list of expressions
  # @return [void]
  # @since 0.5.6
  def add_expressions: (*Array[String] expressions) -> void
  # Passes any method calls to the object from the {#call}
  def method_missing: (untyped sym, *untyped args) -> untyped
  # Tests the expressions on the object.
  #
  # @note If the object is a {CodeObjects::Proxy} the result will always be true.
  # @param [CodeObjects::Base] object the object to verify
  # @return [Boolean] the result of the expressions
  def call: (YARD::CodeObjects::Base object) -> bool
  # Runs a list of objects against the verifier and returns the subset
  # of verified objects.
  #
  # @param [Array<CodeObjects::Base>] list a list of code objects
  # @return [Array<CodeObjects::Base>] a list of code objects that match
  #   the verifier.
  def run: (Array[YARD::CodeObjects::Base] list) -> Array[YARD::CodeObjects::Base]
  # @return [CodeObjects::Base] the current object being tested
  #
  def o: () -> YARD::CodeObjects::Base
  # Modifies nil to not throw NoMethodErrors. This allows
  # syntax like object.tag(:return).text to work if the #tag
  # call returns nil, which means users don't need to perform
  # stringent nil checking
  #
  # @return [void]
  private def modify_nilclass: () -> void
  # Returns the state of NilClass back to normal
  # @return [void]
  private def unmodify_nilclass: () -> void
  # Creates the +__execute+ method by evaluating the expressions
  # as Ruby code
  # @return [void]
  private def create_method_from_expressions: () -> void
  # Parses a single expression, handling some of the DSL syntax.
  #
  # The syntax "@tag" should be turned into object.tag(:tag),
  # and "@@tag" should be turned into object.tags(:tag)
  #
  # @return [String] the parsed expression
  private def parse_expression: (untyped expr) -> String
  # @private
  NILCLASS_METHODS: untyped
end
