# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `barby` gem.
# Please instead update this file by running `bin/tapioca gem barby`.


# source://barby//lib/barby/version.rb#1
module Barby; end

# The base class for all barcodes. It includes some method_missing magic
# that is used to find registered outputters.
#
# The only interface requirement of a barcode class is that is has an encoding
# method that returns a string consisting of 1s and 0s representing the barcode's
# "black" and "white" parts. One digit is the width of the "X dimension"; that is,
# "101100" represents a single-width bar followed by a single-width space, then
# a bar and a space twice that width.
#
# Example implementation:
#
# class StaticBarcode < Barby::Barcode1D
#  def encoding
#   '101100111000111100001'
#  end
# end
#
# require 'barby/outputter/ascii_outputter'
# puts StaticBarcode.new.to_ascii(:height => 3)
#
# # ##  ###   ####    #
# # ##  ###   ####    #
# # ##  ###   ####    #
#
# 2D implementation:
#
# class Static2DBarcode < Barby::Barcode2D
#   def encoding
#     ['1010101', '010101110', '0001010100']
#   end
# end
#
# source://barby//lib/barby/barcode.rb#35
class Barby::Barcode
  # Every barcode must have an encoding method. This method returns
  # a string containing a series of 1 and 0, representing bars and
  # spaces. One digit is the width of one "module" or X dimension.
  #
  # If the barcode is 2D, it returns an array of strings representing
  # each line in the barcode
  #
  # @raise [NotImplementedError]
  #
  # source://barby//lib/barby/barcode.rb#44
  def encoding; end

  # source://barby//lib/barby/barcode.rb#66
  def method_missing(name, *args, &b); end

  # Get the outputter class object for +name+
  #
  # source://barby//lib/barby/barcode.rb#84
  def outputter_class_for(name); end

  # Returns an instantiated outputter for +name+ if any outputter
  # has registered that name
  #
  # source://barby//lib/barby/barcode.rb#79
  def outputter_for(name, *a, &b); end

  # source://barby//lib/barby/barcode.rb#55
  def to_s; end

  # Is this barcode 2D?
  #
  # @return [Boolean]
  #
  # source://barby//lib/barby/barcode.rb#61
  def two_dimensional?; end

  # Is this barcode valid?
  #
  # @return [Boolean]
  #
  # source://barby//lib/barby/barcode.rb#50
  def valid?; end

  class << self
    # source://barby//lib/barby/barcode.rb#91
    def outputters; end

    # Registers an outputter with +name+ so that a call to
    # +name+ on a Barcode instance will be delegated to this outputter
    #
    # source://barby//lib/barby/barcode.rb#97
    def register_outputter(name, klass, method_name); end
  end
end

# Most barcodes are one-dimensional. They have bars.
#
# source://barby//lib/barby/barcode.rb#107
class Barby::Barcode1D < ::Barby::Barcode; end

# 2D barcodes are 1D barcodes stacked on top of each other.
# Their encoding method must return an array of strings
#
# source://barby//lib/barby/barcode.rb#112
class Barby::Barcode2D < ::Barby::Barcode; end

# An Outputter creates something from a barcode. That something can be
# anything, but is most likely a graphical representation of the barcode.
# Outputters can register methods on barcodes that will be associated with
# them.
#
# The basic structure of an outputter class:
#
#  class FooOutputter < Barby::Outputter
#    register :to_foo
#    def to_too
#      do_something_with(barcode.encoding)
#    end
#  end
#
# Barcode#to_foo will now be available to all barcodes
#
# source://barby//lib/barby/outputter.rb#21
class Barby::Outputter
  # An outputter instance will have access to a Barcode
  #
  # @return [Outputter] a new instance of Outputter
  #
  # source://barby//lib/barby/outputter.rb#27
  def initialize(barcode); end

  # Returns the value of attribute barcode.
  #
  # source://barby//lib/barby/outputter.rb#23
  def barcode; end

  # Sets the attribute barcode
  #
  # @param value the value to set the attribute barcode to.
  #
  # source://barby//lib/barby/outputter.rb#23
  def barcode=(_arg0); end

  # Collects continuous groups of bars and spaces (1 and 0)
  # into arrays where the first item is true or false (1 or 0)
  # and the second is the size of the group
  #
  # For example, "1100111000" becomes [[true,2],[false,2],[true,3],[false,3]]
  #
  # source://barby//lib/barby/outputter.rb#93
  def boolean_groups(reload = T.unsafe(nil)); end

  # Converts the barcode's encoding (a string containing 1s and 0s)
  # to true and false values (1 == true == "black bar")
  #
  # If the barcode is 2D, each line will be converted to an array
  # in the same way
  #
  # source://barby//lib/barby/outputter.rb#71
  def booleans(reload = T.unsafe(nil)); end

  # Returns the barcode's encoding. The encoding
  # is cached and can be reloaded by passing true
  #
  # source://barby//lib/barby/outputter.rb#82
  def encoding(reload = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://barby//lib/barby/outputter.rb#61
  def two_dimensional?; end

  private

  # Takes a hash and temporarily sets properties on self (the outputter object)
  # corresponding with the keys to their values. When the block exits, the
  # properties are reset to their original values. Returns whatever the block returns.
  #
  # source://barby//lib/barby/outputter.rb#113
  def with_options(options = T.unsafe(nil)); end

  class << self
    # Register one or more handler methods with this outputter
    # Barcodes will then be able to use these methods to get the output
    # from the outputter. For example, if you have an ImageOutputter,
    # you could do:
    #
    # register :to_png, :to_gif
    #
    # You could then do aBarcode.to_png and get the result of that method.
    # The class which registers the method will receive the barcode as the only
    # argument, and the default implementation of initialize puts that into
    # the +barcode+ accessor.
    #
    # You can also have different method names on the barcode and the outputter
    # by providing a hash:
    #
    # register :to_png => :create_png, :to_gif => :create_gif
    #
    # source://barby//lib/barby/outputter.rb#48
    def register(*method_names); end
  end
end

# source://barby//lib/barby/version.rb#2
module Barby::VERSION; end

# source://barby//lib/barby/version.rb#3
Barby::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://barby//lib/barby/version.rb#4
Barby::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://barby//lib/barby/version.rb#7
Barby::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://barby//lib/barby/version.rb#5
Barby::VERSION::TINY = T.let(T.unsafe(nil), Integer)
