# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `knapsack` gem.
# Please instead update this file by running `bin/tapioca gem knapsack`.


# source://knapsack//lib/knapsack/version.rb#1
module Knapsack
  class << self
    # source://knapsack//lib/knapsack.rb#43
    def load_tasks; end

    # source://knapsack//lib/knapsack.rb#48
    def logger; end

    # source://knapsack//lib/knapsack.rb#55
    def logger=(value); end

    # source://knapsack//lib/knapsack.rb#35
    def report; end

    # source://knapsack//lib/knapsack.rb#39
    def root; end

    # source://knapsack//lib/knapsack.rb#31
    def tracker; end
  end
end

# source://knapsack//lib/knapsack/adapters/base_adapter.rb#2
module Knapsack::Adapters; end

# source://knapsack//lib/knapsack/adapters/base_adapter.rb#3
class Knapsack::Adapters::BaseAdapter
  # source://knapsack//lib/knapsack/adapters/base_adapter.rb#14
  def bind; end

  # @raise [NotImplementedError]
  #
  # source://knapsack//lib/knapsack/adapters/base_adapter.rb#34
  def bind_report_generator; end

  # @raise [NotImplementedError]
  #
  # source://knapsack//lib/knapsack/adapters/base_adapter.rb#38
  def bind_time_offset_warning; end

  # @raise [NotImplementedError]
  #
  # source://knapsack//lib/knapsack/adapters/base_adapter.rb#30
  def bind_time_tracker; end

  private

  # source://knapsack//lib/knapsack/adapters/base_adapter.rb#44
  def tracker; end

  # source://knapsack//lib/knapsack/adapters/base_adapter.rb#48
  def update_report_config; end

  class << self
    # source://knapsack//lib/knapsack/adapters/base_adapter.rb#8
    def bind; end
  end
end

# source://knapsack//lib/knapsack/adapters/base_adapter.rb#6
Knapsack::Adapters::BaseAdapter::REPORT_PATH = T.let(T.unsafe(nil), String)

# Just examples, please overwrite constants in subclasses
#
# source://knapsack//lib/knapsack/adapters/base_adapter.rb#5
Knapsack::Adapters::BaseAdapter::TEST_DIR_PATTERN = T.let(T.unsafe(nil), String)

# source://knapsack//lib/knapsack/adapters/cucumber_adapter.rb#3
class Knapsack::Adapters::CucumberAdapter < ::Knapsack::Adapters::BaseAdapter
  # source://knapsack//lib/knapsack/adapters/cucumber_adapter.rb#20
  def bind_report_generator; end

  # source://knapsack//lib/knapsack/adapters/cucumber_adapter.rb#27
  def bind_time_offset_warning; end

  # source://knapsack//lib/knapsack/adapters/cucumber_adapter.rb#7
  def bind_time_tracker; end

  private

  # source://knapsack//lib/knapsack/adapters/cucumber_adapter.rb#63
  def Around(*tag_expressions, &proc); end

  class << self
    # source://knapsack//lib/knapsack/adapters/cucumber_adapter.rb#36
    def test_path(object); end
  end
end

# source://knapsack//lib/knapsack/adapters/cucumber_adapter.rb#5
Knapsack::Adapters::CucumberAdapter::REPORT_PATH = T.let(T.unsafe(nil), String)

# source://knapsack//lib/knapsack/adapters/cucumber_adapter.rb#4
Knapsack::Adapters::CucumberAdapter::TEST_DIR_PATTERN = T.let(T.unsafe(nil), String)

# source://knapsack//lib/knapsack/adapters/minitest_adapter.rb#3
class Knapsack::Adapters::MinitestAdapter < ::Knapsack::Adapters::BaseAdapter
  # source://knapsack//lib/knapsack/adapters/minitest_adapter.rb#31
  def bind_report_generator; end

  # source://knapsack//lib/knapsack/adapters/minitest_adapter.rb#38
  def bind_time_offset_warning; end

  # source://knapsack//lib/knapsack/adapters/minitest_adapter.rb#23
  def bind_time_tracker; end

  # source://knapsack//lib/knapsack/adapters/minitest_adapter.rb#47
  def set_test_helper_path(file_path); end

  class << self
    # source://knapsack//lib/knapsack/adapters/minitest_adapter.rb#52
    def test_path(obj); end
  end
end

# See how to write hooks and plugins
# https://github.com/seattlerb/minitest/blob/master/lib/minitest/test.rb
#
# source://knapsack//lib/knapsack/adapters/minitest_adapter.rb#10
module Knapsack::Adapters::MinitestAdapter::BindTimeTrackerMinitestPlugin
  # source://knapsack//lib/knapsack/adapters/minitest_adapter.rb#17
  def after_teardown; end

  # source://knapsack//lib/knapsack/adapters/minitest_adapter.rb#11
  def before_setup; end
end

# source://knapsack//lib/knapsack/adapters/minitest_adapter.rb#5
Knapsack::Adapters::MinitestAdapter::REPORT_PATH = T.let(T.unsafe(nil), String)

# source://knapsack//lib/knapsack/adapters/minitest_adapter.rb#4
Knapsack::Adapters::MinitestAdapter::TEST_DIR_PATTERN = T.let(T.unsafe(nil), String)

# source://knapsack//lib/knapsack/adapters/rspec_adapter.rb#3
class Knapsack::Adapters::RSpecAdapter < ::Knapsack::Adapters::BaseAdapter
  # source://knapsack//lib/knapsack/adapters/rspec_adapter.rb#27
  def bind_report_generator; end

  # source://knapsack//lib/knapsack/adapters/rspec_adapter.rb#36
  def bind_time_offset_warning; end

  # source://knapsack//lib/knapsack/adapters/rspec_adapter.rb#7
  def bind_time_tracker; end

  class << self
    # source://knapsack//lib/knapsack/adapters/rspec_adapter.rb#47
    def test_path(example); end
  end
end

# source://knapsack//lib/knapsack/adapters/rspec_adapter.rb#5
Knapsack::Adapters::RSpecAdapter::REPORT_PATH = T.let(T.unsafe(nil), String)

# source://knapsack//lib/knapsack/adapters/rspec_adapter.rb#4
Knapsack::Adapters::RSpecAdapter::TEST_DIR_PATTERN = T.let(T.unsafe(nil), String)

# This is added to provide backwards compatibility
#
# source://knapsack//lib/knapsack/adapters/rspec_adapter.rb#67
class Knapsack::Adapters::RspecAdapter < ::Knapsack::Adapters::RSpecAdapter; end

# source://knapsack//lib/knapsack/adapters/spinach_adapter.rb#3
class Knapsack::Adapters::SpinachAdapter < ::Knapsack::Adapters::BaseAdapter
  # source://knapsack//lib/knapsack/adapters/spinach_adapter.rb#22
  def bind_report_generator; end

  # source://knapsack//lib/knapsack/adapters/spinach_adapter.rb#29
  def bind_time_offset_warning; end

  # source://knapsack//lib/knapsack/adapters/spinach_adapter.rb#7
  def bind_time_tracker; end

  class << self
    # source://knapsack//lib/knapsack/adapters/spinach_adapter.rb#38
    def test_path(scenario); end
  end
end

# source://knapsack//lib/knapsack/adapters/spinach_adapter.rb#5
Knapsack::Adapters::SpinachAdapter::REPORT_PATH = T.let(T.unsafe(nil), String)

# source://knapsack//lib/knapsack/adapters/spinach_adapter.rb#4
Knapsack::Adapters::SpinachAdapter::TEST_DIR_PATTERN = T.let(T.unsafe(nil), String)

# source://knapsack//lib/knapsack/allocator.rb#2
class Knapsack::Allocator
  # @return [Allocator] a new instance of Allocator
  #
  # source://knapsack//lib/knapsack/allocator.rb#3
  def initialize(args = T.unsafe(nil)); end

  # source://knapsack//lib/knapsack/allocator.rb#12
  def leftover_node_tests; end

  # source://knapsack//lib/knapsack/allocator.rb#16
  def node_tests; end

  # source://knapsack//lib/knapsack/allocator.rb#8
  def report_node_tests; end

  # source://knapsack//lib/knapsack/allocator.rb#20
  def stringify_node_tests; end

  # source://knapsack//lib/knapsack/allocator.rb#27
  def test_dir; end
end

# source://knapsack//lib/knapsack/allocator_builder.rb#2
class Knapsack::AllocatorBuilder
  # @return [AllocatorBuilder] a new instance of AllocatorBuilder
  #
  # source://knapsack//lib/knapsack/allocator_builder.rb#3
  def initialize(adapter_class); end

  # source://knapsack//lib/knapsack/allocator_builder.rb#8
  def allocator; end

  # source://knapsack//lib/knapsack/allocator_builder.rb#17
  def test_dir; end

  private

  # source://knapsack//lib/knapsack/allocator_builder.rb#29
  def report_path; end

  # source://knapsack//lib/knapsack/allocator_builder.rb#23
  def set_report_path; end

  # source://knapsack//lib/knapsack/allocator_builder.rb#33
  def test_file_pattern; end
end

# source://knapsack//lib/knapsack/config/env.rb#2
module Knapsack::Config; end

# source://knapsack//lib/knapsack/config/env.rb#3
class Knapsack::Config::Env
  class << self
    # source://knapsack//lib/knapsack/config/env.rb#13
    def ci_node_index; end

    # source://knapsack//lib/knapsack/config/env.rb#9
    def ci_node_total; end

    # source://knapsack//lib/knapsack/config/env.rb#25
    def log_level; end

    # source://knapsack//lib/knapsack/config/env.rb#5
    def report_path; end

    # source://knapsack//lib/knapsack/config/env.rb#21
    def test_dir; end

    # source://knapsack//lib/knapsack/config/env.rb#17
    def test_file_pattern; end

    private

    # source://knapsack//lib/knapsack/config/env.rb#51
    def gitlab_ci_node_index; end

    # source://knapsack//lib/knapsack/config/env.rb#35
    def index_starting_from_one(index); end

    # source://knapsack//lib/knapsack/config/env.rb#43
    def semaphore_current_thread; end

    # source://knapsack//lib/knapsack/config/env.rb#39
    def semaphore_job_index; end

    # source://knapsack//lib/knapsack/config/env.rb#47
    def snap_ci_worker_index; end
  end
end

# source://knapsack//lib/knapsack/config/tracker.rb#3
class Knapsack::Config::Tracker
  class << self
    # source://knapsack//lib/knapsack/config/tracker.rb#5
    def enable_time_offset_warning; end

    # source://knapsack//lib/knapsack/config/tracker.rb#13
    def generate_report; end

    # source://knapsack//lib/knapsack/config/tracker.rb#9
    def time_offset_in_seconds; end
  end
end

# source://knapsack//lib/knapsack/distributors/base_distributor.rb#2
module Knapsack::Distributors; end

# source://knapsack//lib/knapsack/distributors/base_distributor.rb#3
class Knapsack::Distributors::BaseDistributor
  # @return [BaseDistributor] a new instance of BaseDistributor
  #
  # source://knapsack//lib/knapsack/distributors/base_distributor.rb#6
  def initialize(args = T.unsafe(nil)); end

  # source://knapsack//lib/knapsack/distributors/base_distributor.rb#39
  def all_tests; end

  # source://knapsack//lib/knapsack/distributors/base_distributor.rb#34
  def assign_test_files_to_node; end

  # source://knapsack//lib/knapsack/distributors/base_distributor.rb#21
  def ci_node_index; end

  # source://knapsack//lib/knapsack/distributors/base_distributor.rb#17
  def ci_node_total; end

  # Returns the value of attribute node_tests.
  #
  # source://knapsack//lib/knapsack/distributors/base_distributor.rb#4
  def node_tests; end

  # Returns the value of attribute report.
  #
  # source://knapsack//lib/knapsack/distributors/base_distributor.rb#4
  def report; end

  # Returns the value of attribute test_file_pattern.
  #
  # source://knapsack//lib/knapsack/distributors/base_distributor.rb#4
  def test_file_pattern; end

  # source://knapsack//lib/knapsack/distributors/base_distributor.rb#25
  def tests_for_current_node; end

  # source://knapsack//lib/knapsack/distributors/base_distributor.rb#29
  def tests_for_node(node_index); end

  protected

  # @raise [NotImplementedError]
  #
  # source://knapsack//lib/knapsack/distributors/base_distributor.rb#53
  def default_node_tests; end

  # @raise [NotImplementedError]
  #
  # source://knapsack//lib/knapsack/distributors/base_distributor.rb#49
  def post_assign_test_files_to_node; end

  # @raise [NotImplementedError]
  #
  # source://knapsack//lib/knapsack/distributors/base_distributor.rb#45
  def post_tests_for_node(node_index); end
end

# source://knapsack//lib/knapsack/distributors/leftover_distributor.rb#3
class Knapsack::Distributors::LeftoverDistributor < ::Knapsack::Distributors::BaseDistributor
  # source://knapsack//lib/knapsack/distributors/leftover_distributor.rb#8
  def leftover_tests; end

  # source://knapsack//lib/knapsack/distributors/leftover_distributor.rb#4
  def report_tests; end

  private

  # source://knapsack//lib/knapsack/distributors/leftover_distributor.rb#29
  def default_node_tests; end

  # source://knapsack//lib/knapsack/distributors/leftover_distributor.rb#14
  def post_assign_test_files_to_node; end

  # source://knapsack//lib/knapsack/distributors/leftover_distributor.rb#23
  def post_tests_for_node(node_index); end
end

# source://knapsack//lib/knapsack/distributors/report_distributor.rb#3
class Knapsack::Distributors::ReportDistributor < ::Knapsack::Distributors::BaseDistributor
  # source://knapsack//lib/knapsack/distributors/report_distributor.rb#16
  def node_time_execution; end

  # source://knapsack//lib/knapsack/distributors/report_distributor.rb#4
  def sorted_report; end

  # source://knapsack//lib/knapsack/distributors/report_distributor.rb#8
  def sorted_report_with_existing_tests; end

  # source://knapsack//lib/knapsack/distributors/report_distributor.rb#12
  def total_time_execution; end

  private

  # source://knapsack//lib/knapsack/distributors/report_distributor.rb#54
  def assign_test_files; end

  # source://knapsack//lib/knapsack/distributors/report_distributor.rb#43
  def default_node_tests; end

  # source://knapsack//lib/knapsack/distributors/report_distributor.rb#22
  def post_assign_test_files_to_node; end

  # source://knapsack//lib/knapsack/distributors/report_distributor.rb#37
  def post_tests_for_node(node_index); end

  # source://knapsack//lib/knapsack/distributors/report_distributor.rb#27
  def sort_assigned_test_files; end
end

# source://knapsack//lib/knapsack/logger.rb#2
class Knapsack::Logger
  # source://knapsack//lib/knapsack/logger.rb#23
  def debug(text = T.unsafe(nil)); end

  # source://knapsack//lib/knapsack/logger.rb#28
  def info(text = T.unsafe(nil)); end

  # Returns the value of attribute level.
  #
  # source://knapsack//lib/knapsack/logger.rb#3
  def level; end

  # Sets the attribute level
  #
  # @param value the value to set the attribute level to.
  #
  # source://knapsack//lib/knapsack/logger.rb#3
  def level=(_arg0); end

  # source://knapsack//lib/knapsack/logger.rb#11
  def log(level, text = T.unsafe(nil)); end

  # source://knapsack//lib/knapsack/logger.rb#33
  def warn(text = T.unsafe(nil)); end
end

# source://knapsack//lib/knapsack/logger.rb#5
Knapsack::Logger::DEBUG = T.let(T.unsafe(nil), Integer)

# source://knapsack//lib/knapsack/logger.rb#6
Knapsack::Logger::INFO = T.let(T.unsafe(nil), Integer)

# source://knapsack//lib/knapsack/logger.rb#9
class Knapsack::Logger::UnknownLogLevel < ::StandardError; end

# source://knapsack//lib/knapsack/logger.rb#7
Knapsack::Logger::WARN = T.let(T.unsafe(nil), Integer)

# source://knapsack//lib/knapsack/presenter.rb#5
class Knapsack::Presenter
  class << self
    # source://knapsack//lib/knapsack/presenter.rb#33
    def exceeded_time; end

    # source://knapsack//lib/knapsack/presenter.rb#19
    def global_time; end

    # source://knapsack//lib/knapsack/presenter.rb#28
    def max_allowed_node_time_execution; end

    # source://knapsack//lib/knapsack/presenter.rb#79
    def pretty_seconds(seconds); end

    # source://knapsack//lib/knapsack/presenter.rb#15
    def report_details; end

    # source://knapsack//lib/knapsack/presenter.rb#11
    def report_json; end

    # source://knapsack//lib/knapsack/presenter.rb#7
    def report_yml; end

    # source://knapsack//lib/knapsack/presenter.rb#24
    def time_offset; end

    # source://knapsack//lib/knapsack/presenter.rb#38
    def time_offset_log_level; end

    # source://knapsack//lib/knapsack/presenter.rb#46
    def time_offset_warning; end
  end
end

# source://knapsack//lib/knapsack/report.rb#2
class Knapsack::Report
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://knapsack//lib/knapsack/report.rb#5
  def config(args = T.unsafe(nil)); end

  # source://knapsack//lib/knapsack/report.rb#24
  def open; end

  # source://knapsack//lib/knapsack/report.rb#10
  def report_path; end

  # source://knapsack//lib/knapsack/report.rb#18
  def save; end

  # source://knapsack//lib/knapsack/report.rb#14
  def test_file_pattern; end

  private

  # source://knapsack//lib/knapsack/report.rb#33
  def report_json; end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://knapsack//lib/knapsack/runners/rspec_runner.rb#2
module Knapsack::Runners; end

# source://knapsack//lib/knapsack/runners/cucumber_runner.rb#3
class Knapsack::Runners::CucumberRunner
  class << self
    # source://knapsack//lib/knapsack/runners/cucumber_runner.rb#4
    def run(args); end
  end
end

# source://knapsack//lib/knapsack/runners/minitest_runner.rb#3
class Knapsack::Runners::MinitestRunner
  class << self
    # source://knapsack//lib/knapsack/runners/minitest_runner.rb#4
    def run(args); end
  end
end

# source://knapsack//lib/knapsack/runners/rspec_runner.rb#3
class Knapsack::Runners::RSpecRunner
  class << self
    # source://knapsack//lib/knapsack/runners/rspec_runner.rb#4
    def run(args); end
  end
end

# source://knapsack//lib/knapsack/runners/spinach_runner.rb#3
class Knapsack::Runners::SpinachRunner
  class << self
    # source://knapsack//lib/knapsack/runners/spinach_runner.rb#4
    def run(args); end
  end
end

# source://knapsack//lib/knapsack/task_loader.rb#4
class Knapsack::TaskLoader
  include ::FileUtils::StreamUtils_
  include ::FileUtils
  include ::Rake::FileUtilsExt
  include ::Rake::DSL

  # source://knapsack//lib/knapsack/task_loader.rb#7
  def load_tasks; end
end

# source://knapsack//lib/knapsack/tracker.rb#2
class Knapsack::Tracker
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # @return [Tracker] a new instance of Tracker
  #
  # source://knapsack//lib/knapsack/tracker.rb#8
  def initialize; end

  # source://knapsack//lib/knapsack/tracker.rb#12
  def config(opts = T.unsafe(nil)); end

  # source://knapsack//lib/knapsack/tracker.rb#49
  def exceeded_time; end

  # Returns the value of attribute global_time.
  #
  # source://knapsack//lib/knapsack/tracker.rb#5
  def global_time; end

  # source://knapsack//lib/knapsack/tracker.rb#45
  def max_node_time_execution; end

  # source://knapsack//lib/knapsack/tracker.rb#17
  def reset!; end

  # source://knapsack//lib/knapsack/tracker.rb#21
  def start_timer; end

  # source://knapsack//lib/knapsack/tracker.rb#25
  def stop_timer; end

  # Returns the value of attribute test_files_with_time.
  #
  # source://knapsack//lib/knapsack/tracker.rb#5
  def test_files_with_time; end

  # source://knapsack//lib/knapsack/tracker.rb#37
  def test_path; end

  # Sets the attribute test_path
  #
  # @param value the value to set the attribute test_path to.
  #
  # source://knapsack//lib/knapsack/tracker.rb#6
  def test_path=(_arg0); end

  # @return [Boolean]
  #
  # source://knapsack//lib/knapsack/tracker.rb#41
  def time_exceeded?; end

  private

  # source://knapsack//lib/knapsack/tracker.rb#55
  def default_config; end

  # source://knapsack//lib/knapsack/tracker.rb#87
  def now_without_mock_time; end

  # source://knapsack//lib/knapsack/tracker.rb#78
  def report_distributor; end

  # source://knapsack//lib/knapsack/tracker.rb#63
  def set_defaults; end

  # source://knapsack//lib/knapsack/tracker.rb#69
  def update_global_time(execution_time); end

  # source://knapsack//lib/knapsack/tracker.rb#73
  def update_test_file_time(execution_time); end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://knapsack//lib/knapsack/version.rb#2
Knapsack::VERSION = T.let(T.unsafe(nil), String)

# source://knapsack//lib/knapsack/extensions/time.rb#3
class Time
  include ::Comparable
end
