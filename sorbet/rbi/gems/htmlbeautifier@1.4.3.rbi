# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `htmlbeautifier` gem.
# Please instead update this file by running `bin/tapioca gem htmlbeautifier`.


# source://htmlbeautifier//lib/htmlbeautifier/parser.rb#5
module HtmlBeautifier
  class << self
    # Returns a beautified HTML/HTML+ERB document as a String.
    # html must be an object that responds to +#to_s+.
    #
    # Available options are:
    # tab_stops - an integer for the number of spaces to indent, default 2.
    # Deprecated: see indent.
    # indent - what to indent with ("  ", "\t" etc.), default "  "
    # stop_on_errors - raise an exception on a badly-formed document. Default
    # is false, i.e. continue to process the rest of the document.
    # initial_level - The entire output will be indented by this number of steps.
    # Default is 0.
    # keep_blank_lines - an integer for the number of consecutive empty lines
    # to keep in output.
    #
    # source://htmlbeautifier//lib/htmlbeautifier.rb#23
    def beautify(html, options = T.unsafe(nil)); end
  end
end

# source://htmlbeautifier//lib/htmlbeautifier/builder.rb#7
class HtmlBeautifier::Builder
  # @return [Builder] a new instance of Builder
  #
  # source://htmlbeautifier//lib/htmlbeautifier/builder.rb#15
  def initialize(output, options = T.unsafe(nil)); end

  private

  # source://htmlbeautifier//lib/htmlbeautifier/builder.rb#104
  def close_block_element(elem); end

  # source://htmlbeautifier//lib/htmlbeautifier/builder.rb#99
  def close_element(elem); end

  # source://htmlbeautifier//lib/htmlbeautifier/builder.rb#119
  def close_ie_cc(elem); end

  # source://htmlbeautifier//lib/htmlbeautifier/builder.rb#58
  def embed(opening, code, closing); end

  # source://htmlbeautifier//lib/htmlbeautifier/builder.rb#45
  def emit(*strings); end

  # source://htmlbeautifier//lib/htmlbeautifier/builder.rb#71
  def emit_reindented_block_content(code); end

  # source://htmlbeautifier//lib/htmlbeautifier/builder.rb#30
  def error(text); end

  # source://htmlbeautifier//lib/htmlbeautifier/builder.rb#65
  def foreign_block(opening, code, closing); end

  # source://htmlbeautifier//lib/htmlbeautifier/builder.rb#84
  def foreign_block_indentation(code); end

  # source://htmlbeautifier//lib/htmlbeautifier/builder.rb#36
  def indent; end

  # source://htmlbeautifier//lib/htmlbeautifier/builder.rb#54
  def new_line; end

  # source://htmlbeautifier//lib/htmlbeautifier/builder.rb#134
  def new_lines(*content); end

  # source://htmlbeautifier//lib/htmlbeautifier/builder.rb#114
  def open_block_element(elem); end

  # source://htmlbeautifier//lib/htmlbeautifier/builder.rb#109
  def open_element(elem); end

  # source://htmlbeautifier//lib/htmlbeautifier/builder.rb#128
  def open_ie_cc(elem); end

  # source://htmlbeautifier//lib/htmlbeautifier/builder.rb#40
  def outdent; end

  # source://htmlbeautifier//lib/htmlbeautifier/builder.rb#88
  def preformatted_block(opening, content, closing); end

  # source://htmlbeautifier//lib/htmlbeautifier/builder.rb#94
  def standalone_element(elem); end

  # source://htmlbeautifier//lib/htmlbeautifier/builder.rb#45
  def text(*strings); end
end

# source://htmlbeautifier//lib/htmlbeautifier/builder.rb#8
HtmlBeautifier::Builder::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://htmlbeautifier//lib/htmlbeautifier/html_parser.rb#6
class HtmlBeautifier::HtmlParser < ::HtmlBeautifier::Parser
  # @return [HtmlParser] a new instance of HtmlParser
  #
  # source://htmlbeautifier//lib/htmlbeautifier/html_parser.rb#57
  def initialize; end
end

# source://htmlbeautifier//lib/htmlbeautifier/html_parser.rb#7
HtmlBeautifier::HtmlParser::ELEMENT_CONTENT = T.let(T.unsafe(nil), Regexp)

# source://htmlbeautifier//lib/htmlbeautifier/html_parser.rb#12
HtmlBeautifier::HtmlParser::HTML_BLOCK_ELEMENTS = T.let(T.unsafe(nil), Regexp)

# source://htmlbeautifier//lib/htmlbeautifier/html_parser.rb#8
HtmlBeautifier::HtmlParser::HTML_VOID_ELEMENTS = T.let(T.unsafe(nil), Regexp)

# source://htmlbeautifier//lib/htmlbeautifier/html_parser.rb#20
HtmlBeautifier::HtmlParser::MAPPINGS = T.let(T.unsafe(nil), Array)

# source://htmlbeautifier//lib/htmlbeautifier/parser.rb#6
class HtmlBeautifier::Parser
  # @return [Parser] a new instance of Parser
  # @yield [_self]
  # @yieldparam _self [HtmlBeautifier::Parser] the object that the method was called on
  #
  # source://htmlbeautifier//lib/htmlbeautifier/parser.rb#7
  def initialize; end

  # source://htmlbeautifier//lib/htmlbeautifier/parser.rb#12
  def map(pattern, method); end

  # source://htmlbeautifier//lib/htmlbeautifier/parser.rb#16
  def scan(subject, receiver); end

  # source://htmlbeautifier//lib/htmlbeautifier/parser.rb#25
  def source_line_number; end

  # source://htmlbeautifier//lib/htmlbeautifier/parser.rb#21
  def source_so_far; end

  private

  # source://htmlbeautifier//lib/htmlbeautifier/parser.rb#31
  def dispatch(receiver); end

  # source://htmlbeautifier//lib/htmlbeautifier/parser.rb#40
  def extract_params(scanner); end
end

# source://htmlbeautifier//lib/htmlbeautifier/ruby_indenter.rb#4
class HtmlBeautifier::RubyIndenter
  # @return [Boolean]
  #
  # source://htmlbeautifier//lib/htmlbeautifier/ruby_indenter.rb#17
  def indent?(lines); end

  # @return [Boolean]
  #
  # source://htmlbeautifier//lib/htmlbeautifier/ruby_indenter.rb#13
  def outdent?(lines); end
end

# source://htmlbeautifier//lib/htmlbeautifier/ruby_indenter.rb#5
HtmlBeautifier::RubyIndenter::INDENT_KEYWORDS = T.let(T.unsafe(nil), Array)

# source://htmlbeautifier//lib/htmlbeautifier/ruby_indenter.rb#6
HtmlBeautifier::RubyIndenter::OUTDENT_KEYWORDS = T.let(T.unsafe(nil), Array)

# source://htmlbeautifier//lib/htmlbeautifier/ruby_indenter.rb#7
HtmlBeautifier::RubyIndenter::RUBY_INDENT = T.let(T.unsafe(nil), Regexp)

# source://htmlbeautifier//lib/htmlbeautifier/ruby_indenter.rb#11
HtmlBeautifier::RubyIndenter::RUBY_OUTDENT = T.let(T.unsafe(nil), Regexp)

# source://htmlbeautifier//lib/htmlbeautifier/version.rb#4
module HtmlBeautifier::VERSION; end

# source://htmlbeautifier//lib/htmlbeautifier/version.rb#5
HtmlBeautifier::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://htmlbeautifier//lib/htmlbeautifier/version.rb#6
HtmlBeautifier::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://htmlbeautifier//lib/htmlbeautifier/version.rb#9
HtmlBeautifier::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://htmlbeautifier//lib/htmlbeautifier/version.rb#7
HtmlBeautifier::VERSION::TINY = T.let(T.unsafe(nil), Integer)
