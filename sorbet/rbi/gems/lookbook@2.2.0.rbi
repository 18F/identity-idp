# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `lookbook` gem.
# Please instead update this file by running `bin/tapioca gem lookbook`.


# The Lookbook application entry point.
#
# @api public
#
# source://lookbook//lib/lookbook/version.rb#1
module Lookbook
  class << self
    # Add a custom `@param` tag input type
    #
    # @api public
    # @param name [Symbol] Unique input type name
    # @param partial_path [String] Path to the partial template used to render the input
    # @param opts [Hash] Set of default options to be passed to the input. Any supplied param options will override these values
    #
    # source://lookbook//lib/lookbook.rb#75
    def add_input_type(name, partial_path, opts = T.unsafe(nil)); end

    # Add a custom inspector panel
    #
    # @api public
    # @example :ruby
    #   Lookbook.add_panel(:info, "panels/info", {
    #   label: "Extra Info"
    #   })
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @param name [Symbol, String] Unique panel name
    # @param partial_path [String] Path to the partial template used to render the panel
    # @param opts [Hash] Set of panel options
    #
    # source://lookbook//lib/lookbook.rb#98
    def add_panel(name, partial_path, opts = T.unsafe(nil)); end

    # Add a custom tag
    #
    # @api public
    # @param name [Symbol, String] Tag name
    # @param args [Array<Symbol>] Array of argument names
    # @yield [tag] The custom tag instance
    #
    # source://lookbook//lib/lookbook.rb#140
    def add_tag(name, args = T.unsafe(nil), &block); end

    # Add a callback to run when a change to a watched
    # file occurs. Only called when an evented file watcher is being
    # used to detect changes.
    #
    # @api public
    # @yield [app, changes] Lookbook app and hash of files changed, added & removed
    #
    # source://lookbook//lib/lookbook.rb#175
    def after_change(&block); end

    # Add a callback to run after app initialization.
    #
    # @api public
    # @example :ruby
    #   Lookbook.after_initialize do |app|
    #   puts "Lookbook has started!"
    #   end
    # @yield [app] Lookbook app
    #
    # source://lookbook//lib/lookbook.rb#159
    def after_initialize(&block); end

    # Edit the properties of an existing inspector panel
    #
    # @api public
    # @example :ruby
    #   Lookbook.update_panel(:notes, {
    #   label: "Usage Info",
    #   hotkey: "u",
    #   })
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @param name [Symbol, String] Name of target panel
    # @param opts [Hash] Set of panel options
    #
    # source://activesupport/7.2.1.1/lib/active_support/deprecation/method_wrappers.rb#46
    def amend_panel(*args, **_arg1, &block); end

    # Add a callback to run before Lookbook shuts down
    #
    # @api public
    # @yield [app] Lookbook app
    #
    # source://lookbook//lib/lookbook.rb#166
    def before_exit(&block); end

    # @api private
    #
    # source://lookbook//lib/lookbook.rb#182
    def broadcast(event_name, data = T.unsafe(nil)); end

    # Provides access to the Lookbook config store
    #
    # @api public
    # @example :ruby
    #   Lookbook.config.project_title = "MyApp"
    # @return [ConfigStore] The config store object
    #
    # source://lookbook//lib/lookbook.rb#35
    def config; end

    # @api private
    # @yield [config]
    #
    # source://lookbook//lib/lookbook.rb#192
    def configure; end

    # Get the global data store instance
    #
    # @api public
    # @return [Store] The global data store instance
    #
    # source://lookbook//lib/lookbook.rb#56
    def data; end

    # Replace the global data store contents
    #
    # @api public
    # @param new_data [Hash] Hash of data to store
    # @return [Store] The global data store instance
    #
    # source://lookbook//lib/lookbook.rb#64
    def data=(new_data); end

    # @api private
    #
    # source://lookbook//lib/lookbook.rb#208
    def debug_data; end

    # Add a custom inspector panel
    #
    # @api public
    # @example :ruby
    #   Lookbook.add_panel(:info, "panels/info", {
    #   label: "Extra Info"
    #   })
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @param name [Symbol, String] Unique panel name
    # @param partial_path [String] Path to the partial template used to render the panel
    # @param opts [Hash] Set of panel options
    #
    # source://activesupport/7.2.1.1/lib/active_support/deprecation/method_wrappers.rb#46
    def define_panel(*args, **_arg1, &block); end

    # Add a custom `@param` tag input type
    #
    # @api public
    # @param name [Symbol] Unique input type name
    # @param partial_path [String] Path to the partial template used to render the input
    # @param opts [Hash] Set of default options to be passed to the input. Any supplied param options will override these values
    #
    # source://activesupport/7.2.1.1/lib/active_support/deprecation/method_wrappers.rb#46
    def define_param_input(*args, **_arg1, &block); end

    # Add a custom tag
    #
    # @api public
    # @param name [Symbol, String] Tag name
    # @param args [Array<Symbol>] Array of argument names
    # @yield [tag] The custom tag instance
    #
    # source://activesupport/7.2.1.1/lib/active_support/deprecation/method_wrappers.rb#46
    def define_tag(*args, **_arg1, &block); end

    # @api private
    #
    # source://lookbook//lib/lookbook.rb#187
    def engine; end

    # @api private
    #
    # source://lookbook//lib/lookbook.rb#197
    def logger; end

    # Get an array of documentation page objects
    #
    # @api public
    # @return [Array<PageEntity>] Array of page entities
    #
    # source://lookbook//lib/lookbook.rb#49
    def pages; end

    # Get an array of component preview objects
    #
    # @api public
    # @return [Array<PreviewEntity>] Array of preview entities
    #
    # source://lookbook//lib/lookbook.rb#42
    def previews; end

    # source://railties/7.2.1.1/lib/rails/engine.rb#412
    def railtie_helpers_paths; end

    # source://railties/7.2.1.1/lib/rails/engine.rb#395
    def railtie_namespace; end

    # source://railties/7.2.1.1/lib/rails/engine.rb#416
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # Remove a panel from the inspector
    #
    # @api public
    # @example :ruby
    #   Lookbook.remove_panel(:notes)
    # @param name [Symbol, String] Name of target panel
    #
    # source://lookbook//lib/lookbook.rb#127
    def remove_panel(name); end

    # source://railties/7.2.1.1/lib/rails/engine.rb#401
    def table_name_prefix; end

    # Edit the properties of an existing inspector panel
    #
    # @api public
    # @example :ruby
    #   Lookbook.update_panel(:notes, {
    #   label: "Usage Info",
    #   hotkey: "u",
    #   })
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @param name [Symbol, String] Name of target panel
    # @param opts [Hash] Set of panel options
    #
    # source://lookbook//lib/lookbook.rb#117
    def update_panel(name, opts); end

    # source://railties/7.2.1.1/lib/rails/engine.rb#408
    def use_relative_model_naming?; end

    # Returns the installed Lookbook version
    #
    # @api public
    # @example :erb
    #   <p>Using Lookbook v<%= Lookbook.version %></p>
    # @return [String] Version number string
    #
    # source://lookbook//lib/lookbook.rb#25
    def version; end
  end
end

# source://lookbook//lib/lookbook/services/templates/action_view_annotations_handler.rb#2
class Lookbook::ActionViewAnnotationsHandler < ::Lookbook::Service
  # @return [ActionViewAnnotationsHandler] a new instance of ActionViewAnnotationsHandler
  #
  # source://lookbook//lib/lookbook/services/templates/action_view_annotations_handler.rb#5
  def initialize(disable_annotations: T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/services/templates/action_view_annotations_handler.rb#9
  def call; end

  # Returns the value of attribute disable_annotations.
  #
  # source://lookbook//lib/lookbook/services/templates/action_view_annotations_handler.rb#3
  def disable_annotations; end
end

# source://lookbook//lib/lookbook/services/templates/action_view_annotations_stripper.rb#2
class Lookbook::ActionViewAnnotationsStripper < ::Lookbook::Service
  # @return [ActionViewAnnotationsStripper] a new instance of ActionViewAnnotationsStripper
  #
  # source://lookbook//lib/lookbook/services/templates/action_view_annotations_stripper.rb#7
  def initialize(text); end

  # source://lookbook//lib/lookbook/services/templates/action_view_annotations_stripper.rb#11
  def call; end

  # Returns the value of attribute text.
  #
  # source://lookbook//lib/lookbook/services/templates/action_view_annotations_stripper.rb#3
  def text; end
end

# source://lookbook//lib/lookbook/services/templates/action_view_annotations_stripper.rb#5
Lookbook::ActionViewAnnotationsStripper::ANNOTATIONS_REGEX = T.let(T.unsafe(nil), Regexp)

# source://lookbook//lib/lookbook/tags/after_render_tag.rb#2
class Lookbook::AfterRenderTag < ::Lookbook::YardTag
  # source://lookbook//lib/lookbook/tags/after_render_tag.rb#3
  def value; end
end

# source://lookbook//lib/lookbook/entities/concerns/annotatable_entity.rb#2
module Lookbook::AnnotatableEntity
  extend ::ActiveSupport::Concern
end

class Lookbook::ApplicationController < ::ActionController::Base
  def index; end
  def not_found; end

  protected

  def assign_instance_vars; end
  def assign_theme_overrides; end
  def current_layout; end
  def handle_error(err); end
  def raise_not_found(message = T.unsafe(nil)); end

  private

  # source://actionview/7.2.1.1/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def get_status_code(err); end
  def sidebar_panels; end

  class << self
    # source://activesupport/7.2.1.1/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://actionview/7.2.1.1/lib/action_view/layouts.rb#211
    def _layout; end

    # source://actionview/7.2.1.1/lib/action_view/layouts.rb#212
    def _layout_conditions; end

    def controller_path; end

    # source://actionpack/7.2.1.1/lib/action_controller/metal.rb#288
    def middleware_stack; end

    # source://activesupport/7.2.1.1/lib/active_support/rescuable.rb#15
    def rescue_handlers; end
  end
end

module Lookbook::ApplicationController::HelperMethods
  include ::ActionController::Base::HelperMethods
  include ::Lookbook::ApplicationHelper
  include ::Lookbook::UiElementsHelper
end

module Lookbook::ApplicationHelper
  def lookbook_asset_path(file, version: T.unsafe(nil)); end
  def lookbook_landing_path; end
end

class Lookbook::BaseComponent < ::ViewComponent::Base
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionView::RoutingUrlFor
  include ::Lookbook::UiElementsHelper

  def initialize(alpine_data: T.unsafe(nil), **html_attrs); end

  def component_name; end

  # source://actionpack/7.2.1.1/lib/action_dispatch/routing/url_for.rb#100
  def default_url_options; end

  # source://actionpack/7.2.1.1/lib/action_dispatch/routing/url_for.rb#100
  def default_url_options=(_arg0); end

  # source://actionpack/7.2.1.1/lib/action_dispatch/routing/url_for.rb#100
  def default_url_options?; end

  def render_component_tag(tag = T.unsafe(nil), **attrs, &block); end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  protected

  def alpine_component; end
  def alpine_data; end
  def alpine_encode(data); end
  def prepare_alpine_data(x_data = T.unsafe(nil)); end

  class << self
    # source://actionpack/7.2.1.1/lib/action_dispatch/routing/route_set.rb#600
    def _routes; end

    # source://actionpack/7.2.1.1/lib/action_dispatch/routing/url_for.rb#100
    def default_url_options; end

    # source://actionpack/7.2.1.1/lib/action_dispatch/routing/url_for.rb#100
    def default_url_options=(value); end

    # source://actionpack/7.2.1.1/lib/action_dispatch/routing/url_for.rb#100
    def default_url_options?; end

    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

module Lookbook::Button; end

class Lookbook::Button::Component < ::Lookbook::BaseComponent
  def initialize(id: T.unsafe(nil), icon: T.unsafe(nil), **html_attrs); end

  def before_render; end
  def button_attrs; end
  def button_component; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#92
  def dropdown; end

  def dropdown?; end
  def icon; end
  def icon_button?; end
  def id; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  def text_button?; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#87
  def with_dropdown(*args, **_arg1, &block); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#100
  def with_dropdown_content(content); end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

module Lookbook::ButtonGroup; end

class Lookbook::ButtonGroup::Component < ::Lookbook::BaseComponent
  def initialize(size: T.unsafe(nil), **html_attrs); end

  def _call_buttons(copy: T.unsafe(nil), **attrs, &block); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#179
  def buttons; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#183
  def buttons?; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#158
  def with_button(*args, **_arg1, &block); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#163
  def with_button_content(content); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#169
  def with_buttons(collection_args = T.unsafe(nil), &block); end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

# source://lookbook//lib/lookbook/helpers/class_names_helper.rb#2
module Lookbook::ClassNamesHelper
  # source://lookbook//lib/lookbook/helpers/class_names_helper.rb#3
  def build_tag_values(*args); end

  # source://lookbook//lib/lookbook/helpers/class_names_helper.rb#22
  def class_names(*args); end
end

module Lookbook::Code; end

class Lookbook::Code::Component < ::Lookbook::BaseComponent
  def initialize(source: T.unsafe(nil), language: T.unsafe(nil), line_numbers: T.unsafe(nil), highlight_lines: T.unsafe(nil), start_line: T.unsafe(nil), wrap: T.unsafe(nil), theme: T.unsafe(nil), dark: T.unsafe(nil), full_height: T.unsafe(nil), **html_attrs); end

  def before_render; end
  def focussed?; end
  def full_height?; end
  def is_dark?; end
  def numbered?; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  def source; end
  def theme_classname; end

  protected

  def alpine_component; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

# source://lookbook//lib/lookbook/services/code/code_beautifier.rb#4
class Lookbook::CodeBeautifier < ::Lookbook::Service
  # @return [CodeBeautifier] a new instance of CodeBeautifier
  #
  # source://lookbook//lib/lookbook/services/code/code_beautifier.rb#7
  def initialize(source, opts = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/services/code/code_beautifier.rb#12
  def call; end

  # Returns the value of attribute opts.
  #
  # source://lookbook//lib/lookbook/services/code/code_beautifier.rb#5
  def opts; end

  # Returns the value of attribute source.
  #
  # source://lookbook//lib/lookbook/services/code/code_beautifier.rb#5
  def source; end
end

# source://lookbook//lib/lookbook/services/code/code_highlighter.rb#5
class Lookbook::CodeHighlighter < ::Lookbook::Service
  # @return [CodeHighlighter] a new instance of CodeHighlighter
  #
  # source://lookbook//lib/lookbook/services/code/code_highlighter.rb#8
  def initialize(source, opts = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/services/code/code_highlighter.rb#17
  def call; end

  # source://lookbook//lib/lookbook/services/code/code_highlighter.rb#13
  def opts; end

  # Returns the value of attribute source.
  #
  # source://lookbook//lib/lookbook/services/code/code_highlighter.rb#6
  def source; end
end

# source://lookbook//lib/lookbook/services/code/code_highlighter.rb#26
class Lookbook::CodeHighlighter::LookbookFormatter < ::Rouge::Formatters::HTML
  # @return [LookbookFormatter] a new instance of LookbookFormatter
  #
  # source://lookbook//lib/lookbook/services/code/code_highlighter.rb#27
  def initialize(**opts); end

  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/services/code/code_highlighter.rb#60
  def highlighted?(i); end

  # source://lookbook//lib/lookbook/services/code/code_highlighter.rb#64
  def line_number(i); end

  # @yield ["<div class='wrapper'>"]
  #
  # source://lookbook//lib/lookbook/services/code/code_highlighter.rb#34
  def stream(tokens, &block); end
end

# source://lookbook//lib/lookbook/services/code/code_indenter.rb#2
class Lookbook::CodeIndenter < ::Lookbook::Service
  # @return [CodeIndenter] a new instance of CodeIndenter
  #
  # source://lookbook//lib/lookbook/services/code/code_indenter.rb#3
  def initialize(source); end

  # source://lookbook//lib/lookbook/services/code/code_indenter.rb#7
  def call; end
end

# source://lookbook//lib/lookbook/support/errors/config_error.rb#2
class Lookbook::ConfigError < ::Lookbook::Error
  # @return [ConfigError] a new instance of ConfigError
  #
  # source://lookbook//lib/lookbook/support/errors/config_error.rb#3
  def initialize(msg = T.unsafe(nil), scope: T.unsafe(nil), **kwargs); end
end

# source://lookbook//lib/lookbook/services/config_loader.rb#2
class Lookbook::ConfigLoader < ::Lookbook::Service
  # @return [ConfigLoader] a new instance of ConfigLoader
  #
  # source://lookbook//lib/lookbook/services/config_loader.rb#5
  def initialize(path, env: T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/services/config_loader.rb#10
  def call; end

  # Returns the value of attribute env.
  #
  # source://lookbook//lib/lookbook/services/config_loader.rb#3
  def env; end

  # Returns the value of attribute file.
  #
  # source://lookbook//lib/lookbook/services/config_loader.rb#3
  def file; end
end

# Configuration store for Lookbook.
#
# Config option values can be get/set using hash property access syntax
# or dot-notation syntax.
#
# @api public
# @example :ruby
#   # Lookbook config access in Rails config files:
#   config.lookbook.ui_theme = :zinc
#
#   # Lookbook config access everywhere else:
#   Lookbook.config.ui_theme = :zinc
#
# source://lookbook//lib/lookbook/stores/config_store.rb#16
class Lookbook::ConfigStore
  # @api public
  # @return [ConfigStore] a new instance of ConfigStore
  #
  # source://lookbook//lib/lookbook/stores/config_store.rb#26
  def initialize(config = T.unsafe(nil)); end

  # @api public
  #
  # source://lookbook//lib/lookbook/stores/config_store.rb#58
  def highlighter_options=(options = T.unsafe(nil)); end

  # @api public
  #
  # source://lookbook//lib/lookbook/stores/config_store.rb#50
  def listen_extensions=(extensions = T.unsafe(nil)); end

  # @api public
  #
  # source://lookbook//lib/lookbook/stores/config_store.rb#54
  def markdown_options=(options = T.unsafe(nil)); end

  # source://activesupport/7.2.1.1/lib/active_support/delegation.rb#187
  def method_missing(method, *_arg1, **_arg2, &_arg3); end

  # @api public
  #
  # source://lookbook//lib/lookbook/stores/config_store.rb#46
  def page_extensions=(extensions = T.unsafe(nil)); end

  # @api public
  #
  # source://lookbook//lib/lookbook/stores/config_store.rb#30
  def project_name; end

  # @api public
  #
  # source://lookbook//lib/lookbook/stores/config_store.rb#42
  def project_name=(name); end

  # @api public
  #
  # source://lookbook//lib/lookbook/stores/config_store.rb#24
  def store; end

  # @api public
  #
  # source://lookbook//lib/lookbook/stores/config_store.rb#75
  def ui_favicon_dark; end

  # @api public
  #
  # source://lookbook//lib/lookbook/stores/config_store.rb#71
  def ui_favicon_light; end

  # @api public
  #
  # source://lookbook//lib/lookbook/stores/config_store.rb#62
  def ui_theme=(name); end

  # @api public
  #
  # source://lookbook//lib/lookbook/stores/config_store.rb#79
  def ui_theme_overrides(&block); end

  private

  # @api public
  #
  # source://lookbook//lib/lookbook/stores/config_store.rb#97
  def get_favicon(theme); end

  # source://activesupport/7.2.1.1/lib/active_support/delegation.rb#179
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end

  class << self
    # @api public
    #
    # source://lookbook//lib/lookbook/stores/config_store.rb#91
    def default_config(env: T.unsafe(nil)); end

    # @api public
    #
    # source://lookbook//lib/lookbook/stores/config_store.rb#87
    def init_from_config(env: T.unsafe(nil)); end
  end
end

# @api public
#
# source://lookbook//lib/lookbook/stores/config_store.rb#17
Lookbook::ConfigStore::CONFIG_FILE = T.let(T.unsafe(nil), String)

# @api public
#
# source://lookbook//lib/lookbook/stores/config_store.rb#18
Lookbook::ConfigStore::DEFAULT_FAVICONS = T.let(T.unsafe(nil), Hash)

module Lookbook::CopyButton; end

class Lookbook::CopyButton::Component < ::Lookbook::BaseComponent
  def initialize(target: T.unsafe(nil), icon: T.unsafe(nil), size: T.unsafe(nil), **attrs); end

  def button_attrs; end
  def icon; end
  def icon_size; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  def size; end
  def target; end

  protected

  def alpine_component; end
  def alpine_data; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

# source://lookbook//lib/lookbook/tags/custom_tag.rb#2
class Lookbook::CustomTag < ::Lookbook::YardTag
  # @return [CustomTag] a new instance of CustomTag
  #
  # source://lookbook//lib/lookbook/tags/custom_tag.rb#7
  def initialize(tag_name, text = T.unsafe(nil), *args); end

  # Returns the value of attribute arg_names.
  #
  # source://lookbook//lib/lookbook/tags/custom_tag.rb#5
  def arg_names; end

  # source://lookbook//lib/lookbook/tags/yard_tag.rb#16
  def opts; end

  # Returns the value of attribute tag_args.
  #
  # source://lookbook//lib/lookbook/tags/custom_tag.rb#5
  def tag_args; end

  # Method aliases to keep compatability with
  # the original custom tag implementation
  #
  # source://lookbook//lib/lookbook/tags/yard_tag.rb#12
  def tag_body; end

  protected

  # source://lookbook//lib/lookbook/tags/custom_tag.rb#49
  def method_missing(name, *args); end

  # source://lookbook//lib/lookbook/tags/custom_tag.rb#32
  def parse_tag; end

  # source://lookbook//lib/lookbook/tags/custom_tag.rb#41
  def validate_arg_names; end

  private

  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/tags/custom_tag.rb#57
  def respond_to_missing?(name, include_private); end
end

# source://lookbook//lib/lookbook/services/data/parsers/data_parser.rb#2
class Lookbook::DataParser < ::Lookbook::Service
  # @return [DataParser] a new instance of DataParser
  #
  # source://lookbook//lib/lookbook/services/data/parsers/data_parser.rb#3
  def initialize(input, fail_silently: T.unsafe(nil), fallback: T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/services/data/parsers/data_parser.rb#9
  def call; end

  protected

  # source://lookbook//lib/lookbook/services/data/parsers/data_parser.rb#18
  def parse(input); end
end

# source://lookbook//lib/lookbook/services/data/resolvers/data_resolver.rb#2
class Lookbook::DataResolver < ::Lookbook::Service
  # @return [DataResolver] a new instance of DataResolver
  #
  # source://lookbook//lib/lookbook/services/data/resolvers/data_resolver.rb#8
  def initialize(input, eval_context: T.unsafe(nil), fail_silently: T.unsafe(nil), base_dir: T.unsafe(nil), file: T.unsafe(nil), fallback: T.unsafe(nil)); end

  # Returns the value of attribute base_dir.
  #
  # source://lookbook//lib/lookbook/services/data/resolvers/data_resolver.rb#6
  def base_dir; end

  # source://lookbook//lib/lookbook/services/data/resolvers/data_resolver.rb#17
  def call; end

  # Returns the value of attribute eval_context.
  #
  # source://lookbook//lib/lookbook/services/data/resolvers/data_resolver.rb#6
  def eval_context; end

  # Returns the value of attribute fallback.
  #
  # source://lookbook//lib/lookbook/services/data/resolvers/data_resolver.rb#6
  def fallback; end

  # Returns the value of attribute file.
  #
  # source://lookbook//lib/lookbook/services/data/resolvers/data_resolver.rb#6
  def file; end

  protected

  # source://lookbook//lib/lookbook/services/data/resolvers/data_resolver.rb#43
  def evaluate(input, fallback = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/services/data/resolvers/data_resolver.rb#30
  def extract(input); end

  # source://lookbook//lib/lookbook/services/data/resolvers/data_resolver.rb#58
  def raise_error(message, original_exception = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/services/data/resolvers/data_resolver.rb#39
  def resolve(input); end

  private

  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/services/data/resolvers/data_resolver.rb#64
  def evaluatable?; end

  class << self
    # @return [Boolean]
    #
    # source://lookbook//lib/lookbook/services/data/resolvers/data_resolver.rb#24
    def resolveable?(input); end
  end
end

# source://lookbook//lib/lookbook/services/data/resolvers/data_resolver.rb#3
Lookbook::DataResolver::MATCHER = T.let(T.unsafe(nil), Regexp)

# source://lookbook//lib/lookbook/services/data/resolvers/data_resolver.rb#4
Lookbook::DataResolver::MATCH_INDEX = T.let(T.unsafe(nil), Integer)

# source://lookbook//lib/lookbook/services/urls/data_uri_encoder.rb#2
class Lookbook::DataUriEncoder < ::Lookbook::Service
  # @return [DataUriEncoder] a new instance of DataUriEncoder
  #
  # source://lookbook//lib/lookbook/services/urls/data_uri_encoder.rb#5
  def initialize(str, mime_type); end

  # source://lookbook//lib/lookbook/services/urls/data_uri_encoder.rb#10
  def call; end

  # Returns the value of attribute mime_type.
  #
  # source://lookbook//lib/lookbook/services/urls/data_uri_encoder.rb#3
  def mime_type; end

  # Returns the value of attribute str.
  #
  # source://lookbook//lib/lookbook/services/urls/data_uri_encoder.rb#3
  def str; end
end

module Lookbook::DebugMenu; end

class Lookbook::DebugMenu::Component < ::Lookbook::BaseComponent
  def initialize(version: T.unsafe(nil), docs_url: T.unsafe(nil), repo_url: T.unsafe(nil), features: T.unsafe(nil), **html_attrs); end

  def auto_refresh_enabled?; end
  def debug_data; end
  def debug_data?; end
  def feature(name, fallback = T.unsafe(nil)); end
  def features; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

# source://lookbook//lib/lookbook/support/deprecation.rb#4
Lookbook::Deprecation = T.let(T.unsafe(nil), ActiveSupport::Deprecation)

module Lookbook::DimensionsDisplay; end

class Lookbook::DimensionsDisplay::Component < ::Lookbook::BaseComponent
  def initialize(target:, **html_attrs); end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  protected

  def alpine_component; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

module Lookbook::DisplayOptions; end

class Lookbook::DisplayOptions::Editor::Component < ::Lookbook::BaseComponent
  # source://view_component/3.9.0/lib/view_component/slotable.rb#179
  def fields; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#183
  def fields?; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#158
  def with_field(*args, **_arg1, &block); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#163
  def with_field_content(content); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#169
  def with_fields(collection_args = T.unsafe(nil), &block); end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

module Lookbook::DisplayOptions::Field; end

class Lookbook::DisplayOptions::Field::Component < ::Lookbook::BaseComponent
  def initialize(name:, opts:, value:, **html_attrs); end

  def choices; end
  def name; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  def value; end

  protected

  def alpine_component; end
  def alpine_data; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

# source://lookbook//lib/lookbook/tags/display_tag.rb#2
class Lookbook::DisplayTag < ::Lookbook::YardTag
  # source://lookbook//lib/lookbook/tags/display_tag.rb#3
  def key; end

  # source://lookbook//lib/lookbook/tags/display_tag.rb#11
  def parts; end

  # source://lookbook//lib/lookbook/tags/display_tag.rb#7
  def value; end
end

module Lookbook::Embed; end

class Lookbook::Embed::Component < ::Lookbook::BaseComponent
  def initialize(scenario:, params: T.unsafe(nil), options: T.unsafe(nil), **html_attrs); end

  def actions; end
  def options; end
  def panels; end
  def params; end
  def params_attrs_str; end
  def preview; end
  def preview_class; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  def scenario; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

Lookbook::Embed::Component::ACTIONS = T.let(T.unsafe(nil), Array)
module Lookbook::Embed::Inspector; end

class Lookbook::Embed::Inspector::Component < ::Lookbook::BaseComponent
  def initialize(target:, context: T.unsafe(nil), options: T.unsafe(nil), scenarios: T.unsafe(nil), panels: T.unsafe(nil), actions: T.unsafe(nil), **html_attrs); end

  def actions; end
  def context; end
  def data; end
  def display_action?(name); end
  def display_option_controls?; end
  def drawer?; end
  def dynamic_display_options; end
  def id; end
  def options; end
  def panels; end
  def params; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  def scenario_select_options; end
  def scenarios; end
  def static_display_options; end
  def target; end

  protected

  def alpine_component; end
  def alpine_data; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

module Lookbook::EmbedCodeDropdown; end

class Lookbook::EmbedCodeDropdown::Component < ::Lookbook::BaseComponent
  def initialize(preview:, target:, pages:, params:, policy:, **html_attrs); end

  def app_path; end
  def embed_code; end
  def embed_url; end
  def external_embed_params; end
  def pages; end
  def params; end
  def policy; end
  def preview; end
  def preview_name; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  def target; end

  private

  def alpine_component; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

class Lookbook::EmbedsController < ::Lookbook::ApplicationController
  include ::ActionView::Helpers::SanitizeHelper
  include ::Lookbook::TargetableConcern
  include ::Lookbook::WithPreviewControllerConcern
  extend ::ActionView::Helpers::SanitizeHelper::ClassMethods

  def lookup; end
  def show; end

  protected

  def embed_options; end
  def lookup_entities; end
  def permit_embeds; end
  def req_params; end
  def set_actions; end
  def set_options; end
  def set_panels; end
  def set_params; end
  def set_scenario_choices; end

  private

  # source://actionview/7.2.1.1/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/7.2.1.1/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://actionview/7.2.1.1/lib/action_view/layouts.rb#211
    def _layout; end

    # source://actionview/7.2.1.1/lib/action_view/layouts.rb#212
    def _layout_conditions; end

    def controller_path; end

    # source://actionpack/7.2.1.1/lib/action_controller/metal.rb#288
    def middleware_stack; end
  end
end

# source://lookbook//lib/lookbook/engine.rb#4
class Lookbook::Engine < ::Rails::Engine
  # source://lookbook//lib/lookbook/engine.rb#83
  def opts; end

  # source://lookbook//lib/lookbook/engine.rb#87
  def parser; end

  # source://lookbook//lib/lookbook/engine.rb#91
  def reloaders; end

  class << self
    # source://activesupport/7.2.1.1/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://lookbook//lib/lookbook/engine.rb#96
    def app_name(*_arg0, **_arg1, &_arg2); end

    # @return [Boolean]
    #
    # source://lookbook//lib/lookbook/engine.rb#110
    def auto_refresh?; end

    # source://lookbook//lib/lookbook/engine.rb#173
    def component_paths; end

    # source://lookbook//lib/lookbook/engine.rb#234
    def files_changed(modified, added, removed); end

    # source://lookbook//lib/lookbook/engine.rb#145
    def hooks; end

    # source://lookbook//lib/lookbook/engine.rb#155
    def host_app_path; end

    # source://lookbook//lib/lookbook/engine.rb#159
    def host_config; end

    # source://lookbook//lib/lookbook/engine.rb#137
    def inputs; end

    # source://lookbook//lib/lookbook/engine.rb#220
    def load_pages(changes = T.unsafe(nil)); end

    # source://lookbook//lib/lookbook/engine.rb#210
    def load_previews(changes = T.unsafe(nil)); end

    # source://lookbook//lib/lookbook/engine.rb#98
    def mount_path; end

    # @return [Boolean]
    #
    # source://lookbook//lib/lookbook/engine.rb#102
    def mounted?; end

    # source://lookbook//lib/lookbook/engine.rb#227
    def notify_clients(changes = T.unsafe(nil)); end

    # source://lookbook//lib/lookbook/engine.rb#180
    def page_paths; end

    # source://lookbook//lib/lookbook/engine.rb#180
    def page_watch_paths; end

    # source://lookbook//lib/lookbook/engine.rb#197
    def pages; end

    # source://lookbook//lib/lookbook/engine.rb#133
    def panels; end

    # source://lookbook//lib/lookbook/engine.rb#205
    def preview_controller; end

    # @return [Boolean]
    #
    # source://lookbook//lib/lookbook/engine.rb#117
    def preview_embeds_allowed?; end

    # source://lookbook//lib/lookbook/engine.rb#186
    def preview_paths; end

    # source://lookbook//lib/lookbook/engine.rb#190
    def preview_watch_paths; end

    # source://lookbook//lib/lookbook/engine.rb#201
    def previews; end

    # @return [Boolean]
    #
    # source://lookbook//lib/lookbook/engine.rb#106
    def reloading?; end

    # source://lookbook//lib/lookbook/engine.rb#149
    def run_hooks(event_name, *args); end

    # source://lookbook//lib/lookbook/engine.rb#125
    def runtime_context; end

    # source://lookbook//lib/lookbook/engine.rb#141
    def tags; end

    # source://lookbook//lib/lookbook/engine.rb#129
    def theme; end

    # source://lookbook//lib/lookbook/engine.rb#163
    def view_paths; end

    # source://lookbook//lib/lookbook/engine.rb#121
    def websocket; end
  end
end

# Base entity class
#
# @api public
#
# source://lookbook//lib/lookbook/entities/entity.rb#5
class Lookbook::Entity
  include ::Comparable
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor

  # @api private
  # @return [Entity] a new instance of Entity
  #
  # source://lookbook//lib/lookbook/entities/entity.rb#10
  def initialize(lookup_path = T.unsafe(nil)); end

  # @api public
  #
  # source://lookbook//lib/lookbook/entities/entity.rb#74
  def <=>(other); end

  # source://actionpack/7.2.1.1/lib/action_dispatch/routing/url_for.rb#100
  def default_url_options; end

  # source://actionpack/7.2.1.1/lib/action_dispatch/routing/url_for.rb#100
  def default_url_options=(_arg0); end

  # source://actionpack/7.2.1.1/lib/action_dispatch/routing/url_for.rb#100
  def default_url_options?; end

  # Human-readable unique ID for the entity
  #
  # @api public
  # @return [String] The ID
  #
  # source://lookbook//lib/lookbook/entities/entity.rb#19
  def id; end

  # Titlized name for use in navigation etc.
  #
  # Can be customized using the `@label` tag where supported.
  #
  # @api public
  # @return [String] The label
  #
  # source://lookbook//lib/lookbook/entities/entity.rb#35
  def label; end

  # Canonical reference path.
  #
  # Used for generating URL paths and looking up entities.
  #
  # @api public
  # @return [String] The lookup path
  #
  # source://lookbook//lib/lookbook/entities/entity.rb#55
  def lookup_path; end

  # Parameter-safe entity name.
  #
  # @api public
  # @return [String] The name
  #
  # source://lookbook//lib/lookbook/entities/entity.rb#26
  def name; end

  # Canonical reference path.
  #
  # Used for generating URL paths and looking up entities.
  #
  # @api public
  # @return [String] The lookup path
  #
  # source://activesupport/7.2.1.1/lib/active_support/deprecation/method_wrappers.rb#46
  def path(*args, **_arg1, &block); end

  # @api public
  #
  # source://lookbook//lib/lookbook/entities/entity.rb#68
  def search_terms; end

  # Entity type identifier
  #
  # @api public
  # @return [Symbol] The entity type
  #
  # source://lookbook//lib/lookbook/entities/entity.rb#42
  def type; end

  protected

  # @api public
  #
  # source://lookbook//lib/lookbook/entities/entity.rb#80
  def fetch_config(key, fallback = T.unsafe(nil), &block); end

  class << self
    # source://actionpack/7.2.1.1/lib/action_dispatch/routing/route_set.rb#600
    def _routes; end

    # source://actionpack/7.2.1.1/lib/action_dispatch/routing/url_for.rb#100
    def default_url_options; end

    # source://actionpack/7.2.1.1/lib/action_dispatch/routing/url_for.rb#100
    def default_url_options=(value); end

    # source://actionpack/7.2.1.1/lib/action_dispatch/routing/url_for.rb#100
    def default_url_options?; end
  end
end

# source://lookbook//lib/lookbook/entities/collections/entity_collection.rb#2
class Lookbook::EntityCollection
  include ::Enumerable

  # @return [EntityCollection] a new instance of EntityCollection
  #
  # source://lookbook//lib/lookbook/entities/collections/entity_collection.rb#9
  def initialize(entities = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/entities/collections/entity_collection.rb#15
  def add(to_add = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/entities/collections/entity_collection.rb#55
  def clear_all; end

  # source://lookbook//lib/lookbook/entities/collections/entity_collection.rb#43
  def each(&block); end

  # Returns the value of attribute entities.
  #
  # source://lookbook//lib/lookbook/entities/collections/entity_collection.rb#7
  def entities; end

  # source://lookbook//lib/lookbook/entities/collections/entity_collection.rb#24
  def find_by_id(id); end

  # source://lookbook//lib/lookbook/entities/collections/entity_collection.rb#29
  def find_by_path(path); end

  # source://lookbook//lib/lookbook/entities/collections/entity_collection.rb#51
  def flat_map(*_arg0, **_arg1, &_arg2); end

  # source://activesupport/7.2.1.1/lib/active_support/delegation.rb#187
  def method_missing(method, *_arg1, **_arg2, &_arg3); end

  # source://lookbook//lib/lookbook/entities/collections/entity_collection.rb#33
  def next(entity); end

  # source://lookbook//lib/lookbook/entities/collections/entity_collection.rb#38
  def previous(entity); end

  protected

  # source://lookbook//lib/lookbook/entities/collections/entity_collection.rb#62
  def clear_cache; end

  private

  # source://activesupport/7.2.1.1/lib/active_support/delegation.rb#179
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

# source://lookbook//lib/lookbook/support/errors/error.rb#2
class Lookbook::Error < ::StandardError
  # @return [Error] a new instance of Error
  #
  # source://lookbook//lib/lookbook/support/errors/error.rb#5
  def initialize(message = T.unsafe(nil), scope: T.unsafe(nil), original: T.unsafe(nil), status: T.unsafe(nil), detail: T.unsafe(nil), file_path: T.unsafe(nil), source: T.unsafe(nil), line_number: T.unsafe(nil), **kwargs); end

  # source://lookbook//lib/lookbook/support/errors/error.rb#23
  def backtrace; end

  # source://lookbook//lib/lookbook/support/errors/error.rb#50
  def backtrace_lines; end

  # Returns the value of attribute detail.
  #
  # source://lookbook//lib/lookbook/support/errors/error.rb#3
  def detail; end

  # source://lookbook//lib/lookbook/support/errors/error.rb#31
  def file_path; end

  # source://lookbook//lib/lookbook/support/errors/error.rb#41
  def line_number; end

  # source://lookbook//lib/lookbook/support/errors/error.rb#19
  def message; end

  # Returns the value of attribute original.
  #
  # source://lookbook//lib/lookbook/support/errors/error.rb#3
  def original; end

  # source://lookbook//lib/lookbook/support/errors/error.rb#37
  def relative_file_path; end

  # Returns the value of attribute scope.
  #
  # source://lookbook//lib/lookbook/support/errors/error.rb#3
  def scope; end

  # Returns the value of attribute source.
  #
  # source://lookbook//lib/lookbook/support/errors/error.rb#3
  def source; end

  # Returns the value of attribute status.
  #
  # source://lookbook//lib/lookbook/support/errors/error.rb#3
  def status; end

  # source://lookbook//lib/lookbook/support/errors/error.rb#27
  def type; end

  protected

  # source://lookbook//lib/lookbook/support/errors/error.rb#57
  def parsed_backtrace; end
end

# source://lookbook//lib/lookbook/services/data/resolvers/eval_resolver.rb#2
class Lookbook::EvalResolver < ::Lookbook::DataResolver
  # source://lookbook//lib/lookbook/services/data/resolvers/eval_resolver.rb#6
  def resolve(input); end
end

# source://lookbook//lib/lookbook/services/data/resolvers/eval_resolver.rb#3
Lookbook::EvalResolver::MATCHER = T.let(T.unsafe(nil), Regexp)

# source://lookbook//lib/lookbook/services/data/resolvers/eval_resolver.rb#4
Lookbook::EvalResolver::MATCH_INDEX = T.let(T.unsafe(nil), Integer)

# source://lookbook//lib/lookbook/services/urls/file_data_uri_encoder.rb#4
class Lookbook::FileDataUriEncoder < ::Lookbook::Service
  # @return [FileDataUriEncoder] a new instance of FileDataUriEncoder
  #
  # source://lookbook//lib/lookbook/services/urls/file_data_uri_encoder.rb#7
  def initialize(path, mime_type = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/services/urls/file_data_uri_encoder.rb#20
  def call; end

  # source://lookbook//lib/lookbook/services/urls/file_data_uri_encoder.rb#12
  def content; end

  # source://lookbook//lib/lookbook/services/urls/file_data_uri_encoder.rb#16
  def mime_type; end

  # Returns the value of attribute path.
  #
  # source://lookbook//lib/lookbook/services/urls/file_data_uri_encoder.rb#5
  def path; end
end

# source://lookbook//lib/lookbook/services/data/resolvers/file_resolver.rb#2
class Lookbook::FileResolver < ::Lookbook::DataResolver
  protected

  # source://lookbook//lib/lookbook/services/data/resolvers/file_resolver.rb#20
  def read_file(path); end

  # source://lookbook//lib/lookbook/services/data/resolvers/file_resolver.rb#8
  def resolve(input); end

  # source://lookbook//lib/lookbook/services/data/resolvers/file_resolver.rb#24
  def resolve_path(path, base_dir); end
end

# source://lookbook//lib/lookbook/services/data/resolvers/file_resolver.rb#3
Lookbook::FileResolver::MATCHER = T.let(T.unsafe(nil), Regexp)

# source://lookbook//lib/lookbook/services/data/resolvers/file_resolver.rb#4
Lookbook::FileResolver::MATCH_INDEX = T.let(T.unsafe(nil), Integer)

module Lookbook::FileSource; end

class Lookbook::FileSource::Component < ::Lookbook::BaseComponent
  def initialize(file_path:, source: T.unsafe(nil), highlight_lines: T.unsafe(nil), lines_around_highlight: T.unsafe(nil), start_line: T.unsafe(nil), end_line: T.unsafe(nil), start_line_number: T.unsafe(nil), **html_attrs); end

  def end_line; end
  def file_path; end
  def highlight_lines; end
  def lines_around_highlight; end
  def render?; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  def source; end
  def source_lang; end
  def source_lines; end
  def start_line; end
  def start_line_number; end
  def trimmed_source; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

# source://lookbook//lib/lookbook/file_watcher.rb#2
class Lookbook::FileWatcher
  class << self
    # @return [Boolean]
    #
    # source://lookbook//lib/lookbook/file_watcher.rb#8
    def evented?; end

    # source://lookbook//lib/lookbook/file_watcher.rb#4
    def new(*_arg0, **_arg1, &_arg2); end

    protected

    # source://lookbook//lib/lookbook/file_watcher.rb#14
    def file_watcher; end
  end
end

module Lookbook::Filter; end

class Lookbook::Filter::Component < ::Lookbook::BaseComponent
  def initialize(store: T.unsafe(nil), placeholder: T.unsafe(nil), **html_attrs); end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  protected

  def alpine_component; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

# source://lookbook//lib/lookbook/services/templates/frontmatter_extractor.rb#2
class Lookbook::FrontmatterExtractor < ::Lookbook::Service
  # @return [FrontmatterExtractor] a new instance of FrontmatterExtractor
  #
  # source://lookbook//lib/lookbook/services/templates/frontmatter_extractor.rb#7
  def initialize(content); end

  # source://lookbook//lib/lookbook/services/templates/frontmatter_extractor.rb#11
  def call; end

  # Returns the value of attribute content.
  #
  # source://lookbook//lib/lookbook/services/templates/frontmatter_extractor.rb#5
  def content; end

  protected

  # source://lookbook//lib/lookbook/services/templates/frontmatter_extractor.rb#19
  def extract_frontmatter(text); end

  # source://lookbook//lib/lookbook/services/templates/frontmatter_extractor.rb#24
  def strip_frontmatter(text); end
end

# source://lookbook//lib/lookbook/services/templates/frontmatter_extractor.rb#3
Lookbook::FrontmatterExtractor::FRONTMATTER_REGEX = T.let(T.unsafe(nil), Regexp)

module Lookbook::Header; end

class Lookbook::Header::Component < ::Lookbook::BaseComponent
  def initialize(debug_menu: T.unsafe(nil), project_name: T.unsafe(nil), project_logo: T.unsafe(nil), **html_attrs); end

  def debug_data; end
  def landing_path; end
  def project_logo; end
  def project_name; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

# source://lookbook//lib/lookbook/tags/hidden_tag.rb#2
class Lookbook::HiddenTag < ::Lookbook::YardTag
  # source://lookbook//lib/lookbook/tags/hidden_tag.rb#3
  def to_bool; end

  # source://lookbook//lib/lookbook/tags/hidden_tag.rb#7
  def to_s; end

  # source://lookbook//lib/lookbook/tags/hidden_tag.rb#3
  def value; end
end

# source://lookbook//lib/lookbook/entities/collections/concerns/hierarchical_collection.rb#2
module Lookbook::HierarchicalCollection
  extend ::ActiveSupport::Concern
end

# source://lookbook//lib/lookbook/entities/collections/concerns/hierarchical_collection.rb#5
Lookbook::HierarchicalCollection::TREE_BUILDER = T.let(T.unsafe(nil), T.untyped)

# source://lookbook//lib/lookbook/stores/hook_store.rb#2
class Lookbook::HookStore
  # @return [HookStore] a new instance of HookStore
  #
  # source://lookbook//lib/lookbook/stores/hook_store.rb#6
  def initialize(config = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/stores/hook_store.rb#10
  def add_hook(event_name, callback); end

  # source://lookbook//lib/lookbook/stores/hook_store.rb#14
  def for_event(event_name); end

  # Returns the value of attribute store.
  #
  # source://lookbook//lib/lookbook/stores/hook_store.rb#3
  def store; end

  # source://lookbook//lib/lookbook/stores/hook_store.rb#4
  def to_h(*_arg0, **_arg1, &_arg2); end
end

module Lookbook::Icon; end

class Lookbook::Icon::Component < ::Lookbook::BaseComponent
  def initialize(name:, size: T.unsafe(nil), stroke: T.unsafe(nil), **html_attrs); end

  def read_svg; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  def size_rems; end
  def stroke; end
  def svg; end
  def svg_path; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

Lookbook::Icon::Component::ICON_CACHE = T.let(T.unsafe(nil), Hash)
module Lookbook::IconButton; end

class Lookbook::IconButton::Component < ::Lookbook::BaseComponent
  def initialize(id: T.unsafe(nil), icon: T.unsafe(nil), tooltip: T.unsafe(nil), disabled: T.unsafe(nil), size: T.unsafe(nil), href: T.unsafe(nil), **html_attrs); end

  def disabled; end
  def href; end
  def icon; end
  def icon_size; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#179
  def icons; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#183
  def icons?; end

  def id; end
  def padding; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  def size; end
  def tag_name; end
  def tooltip; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#158
  def with_icon(*args, **_arg1, &block); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#163
  def with_icon_content(content); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#169
  def with_icons(collection_args = T.unsafe(nil), &block); end

  protected

  def alpine_component; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

Lookbook::IconButton::Component::ICON_SIZES = T.let(T.unsafe(nil), Hash)

# source://lookbook//lib/lookbook/tags/id_tag.rb#2
class Lookbook::IdTag < ::Lookbook::YardTag
  # source://lookbook//lib/lookbook/tags/id_tag.rb#3
  def value; end
end

# source://lookbook//lib/lookbook/stores/input_store.rb#2
class Lookbook::InputStore
  # @return [InputStore] a new instance of InputStore
  #
  # source://lookbook//lib/lookbook/stores/input_store.rb#10
  def initialize(config = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/stores/input_store.rb#19
  def add_input(input, *args); end

  # source://lookbook//lib/lookbook/stores/input_store.rb#23
  def get_input(input); end

  # Returns the value of attribute store.
  #
  # source://lookbook//lib/lookbook/stores/input_store.rb#7
  def store; end

  # source://lookbook//lib/lookbook/stores/input_store.rb#8
  def to_h(*_arg0, **_arg1, &_arg2); end

  protected

  # source://lookbook//lib/lookbook/stores/input_store.rb#41
  def build_config(name, *args); end

  # source://lookbook//lib/lookbook/stores/input_store.rb#37
  def normalize_name(name); end

  class << self
    # source://lookbook//lib/lookbook/stores/input_store.rb#31
    def default_config; end

    # source://lookbook//lib/lookbook/stores/input_store.rb#27
    def init_from_config; end
  end
end

# source://lookbook//lib/lookbook/stores/input_store.rb#3
Lookbook::InputStore::CONFIG_FILE = T.let(T.unsafe(nil), String)

# source://lookbook//lib/lookbook/stores/input_store.rb#5
Lookbook::InputStore::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://lookbook//lib/lookbook/entities/concerns/inspectable_entity.rb#2
module Lookbook::InspectableEntity
  extend ::ActiveSupport::Concern
end

class Lookbook::InspectorController < ::Lookbook::ApplicationController
  include ::Lookbook::TargetableConcern
  include ::Lookbook::WithPanelsConcern
  include ::Lookbook::WithPreviewControllerConcern

  def show; end

  private

  # source://actionview/7.2.1.1/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def drawer_panel_names; end
  def drawer_panels; end
  def main_panel_names; end
  def main_panels; end

  class << self
    # source://activesupport/7.2.1.1/lib/active_support/callbacks.rb#70
    def __callbacks; end

    def controller_path; end

    # source://actionpack/7.2.1.1/lib/action_controller/metal.rb#288
    def middleware_stack; end
  end
end

module Lookbook::InspectorPanel; end

class Lookbook::InspectorPanel::Component < ::Lookbook::BaseComponent
  def initialize(name:, **attrs); end

  def before_render; end
  def id; end
  def panel_html; end
  def panel_styles; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

# source://lookbook//lib/lookbook/services/data/parsers/json_parser.rb#2
class Lookbook::JsonParser < ::Lookbook::DataParser
  # source://lookbook//lib/lookbook/services/data/parsers/json_parser.rb#3
  def parse(input); end
end

# source://lookbook//lib/lookbook/services/tags/key_value_tag_parser.rb#2
class Lookbook::KeyValueTagParser < ::Lookbook::Service
  # @return [KeyValueTagParser] a new instance of KeyValueTagParser
  #
  # source://lookbook//lib/lookbook/services/tags/key_value_tag_parser.rb#7
  def initialize(text); end

  # @raise [ParserError]
  #
  # source://lookbook//lib/lookbook/services/tags/key_value_tag_parser.rb#11
  def call; end

  # Returns the value of attribute text.
  #
  # source://lookbook//lib/lookbook/services/tags/key_value_tag_parser.rb#5
  def text; end
end

# source://lookbook//lib/lookbook/services/tags/key_value_tag_parser.rb#3
Lookbook::KeyValueTagParser::KEY_VALUE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://lookbook//lib/lookbook/tags/label_tag.rb#2
class Lookbook::LabelTag < ::Lookbook::YardTag; end

# source://lookbook//lib/lookbook/lang.rb#2
module Lookbook::Lang
  class << self
    # source://lookbook//lib/lookbook/lang.rb#7
    def find(name); end

    # source://lookbook//lib/lookbook/lang.rb#11
    def guess(path, fallback_name = T.unsafe(nil)); end

    protected

    # source://lookbook//lib/lookbook/lang.rb#19
    def languages; end
  end
end

# source://lookbook//lib/lookbook/services/list_resolver.rb#2
class Lookbook::ListResolver < ::Lookbook::Service
  # @return [ListResolver] a new instance of ListResolver
  #
  # source://lookbook//lib/lookbook/services/list_resolver.rb#5
  def initialize(to_include = T.unsafe(nil), item_set = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/services/list_resolver.rb#10
  def call(&resolver); end

  # Returns the value of attribute item_set.
  #
  # source://lookbook//lib/lookbook/services/list_resolver.rb#3
  def item_set; end

  # source://lookbook//lib/lookbook/services/list_resolver.rb#24
  def to_include; end
end

# source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#2
module Lookbook::LocatableEntity
  extend ::ActiveSupport::Concern
end

# source://lookbook//lib/lookbook/tags/logical_path_tag.rb#2
class Lookbook::LogicalPathTag < ::Lookbook::YardTag
  # source://lookbook//lib/lookbook/tags/logical_path_tag.rb#3
  def value; end
end

module Lookbook::Logo; end

class Lookbook::Logo::Component < ::Lookbook::BaseComponent
  def initialize(size: T.unsafe(nil), stroke: T.unsafe(nil), **html_attrs); end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  def size_rems; end
  def stroke; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

# source://lookbook//lib/lookbook/services/markdown_renderer.rb#4
class Lookbook::MarkdownRenderer < ::Lookbook::Service
  # @return [MarkdownRenderer] a new instance of MarkdownRenderer
  #
  # source://lookbook//lib/lookbook/services/markdown_renderer.rb#7
  def initialize(text, opts = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/services/markdown_renderer.rb#12
  def call; end

  # Returns the value of attribute opts.
  #
  # source://lookbook//lib/lookbook/services/markdown_renderer.rb#5
  def opts; end

  # Returns the value of attribute text.
  #
  # source://lookbook//lib/lookbook/services/markdown_renderer.rb#5
  def text; end
end

# source://lookbook//lib/lookbook/services/markdown_renderer.rb#18
class Lookbook::MarkdownRenderer::LookbookMarkdownRenderer < ::Redcarpet::Render::HTML
  # source://lookbook//lib/lookbook/services/markdown_renderer.rb#19
  def block_code(code, language = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/services/markdown_renderer.rb#26
  def postprocess(full_document); end
end

module Lookbook::Message; end

class Lookbook::Message::Component < ::Lookbook::BaseComponent
  def initialize(title: T.unsafe(nil), icon: T.unsafe(nil), icon_position: T.unsafe(nil), theme: T.unsafe(nil), **html_attrs); end

  def icon_name; end
  def icon_position; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  def theme; end
  def title; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

# source://lookbook//lib/lookbook/services/data/resolvers/method_resolver.rb#2
class Lookbook::MethodResolver < ::Lookbook::DataResolver
  # source://lookbook//lib/lookbook/services/data/resolvers/method_resolver.rb#6
  def resolve(input); end
end

# source://lookbook//lib/lookbook/services/data/resolvers/method_resolver.rb#3
Lookbook::MethodResolver::MATCHER = T.let(T.unsafe(nil), Regexp)

# source://lookbook//lib/lookbook/services/data/resolvers/method_resolver.rb#4
Lookbook::MethodResolver::MATCH_INDEX = T.let(T.unsafe(nil), Integer)

module Lookbook::Nav; end

class Lookbook::Nav::Component < ::Lookbook::BaseComponent
  def initialize(tree:, id: T.unsafe(nil), **attrs); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#92
  def filter; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#96
  def filter?; end

  def id; end
  def items; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#92
  def toolbar; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#96
  def toolbar?; end

  def tree; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#87
  def with_filter(*args, **_arg1, &block); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#100
  def with_filter_content(content); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#87
  def with_toolbar(*args, **_arg1, &block); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#100
  def with_toolbar_content(content); end

  protected

  def alpine_component; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

class Lookbook::Nav::Directory::Component < ::Lookbook::Nav::Item::Component
  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

module Lookbook::Nav::Entity; end

class Lookbook::Nav::Entity::Component < ::Lookbook::Nav::Item::Component
  def children; end
  def collapsed?; end
  def href; end
  def nav_icon; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  def search_terms; end
  def type; end

  protected

  def alpine_data; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

Lookbook::Nav::Entity::Component::ICONS = T.let(T.unsafe(nil), Hash)
module Lookbook::Nav::Item; end

class Lookbook::Nav::Item::Component < ::Lookbook::BaseComponent
  def initialize(node, nav_id:, **html_attrs); end

  def children; end
  def children?; end
  def depth(*_arg0, **_arg1, &_arg2); end
  def id; end
  def label(*_arg0, **_arg1, &_arg2); end
  def left_pad; end
  def nav_icon; end
  def nav_id; end
  def node; end
  def priority(*_arg0, **_arg1, &_arg2); end
  def render_item(node); end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  protected

  def alpine_component; end
  def alpine_data; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

# source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#2
module Lookbook::NavigableEntity
  extend ::ActiveSupport::Concern
end

# source://lookbook//lib/lookbook/support/null_object.rb#2
class Lookbook::NullObject < ::BasicObject
  # source://lookbook//lib/lookbook/support/null_object.rb#3
  def method_missing(*_arg0); end

  private

  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/support/null_object.rb#6
  def respond_to_missing?(name); end
end

# source://lookbook//lib/lookbook/support/null_websocket.rb#2
class Lookbook::NullWebsocket < ::Lookbook::NullObject
  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/support/null_websocket.rb#3
  def mountable?; end

  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/support/null_websocket.rb#3
  def mounted?; end
end

# source://lookbook//lib/lookbook/entities/collections/page_collection.rb#2
class Lookbook::PageCollection < ::Lookbook::EntityCollection
  include ::Lookbook::HierarchicalCollection

  # source://lookbook//lib/lookbook/entities/collections/concerns/hierarchical_collection.rb#8
  def entities; end

  # source://lookbook//lib/lookbook/entities/collections/page_collection.rb#7
  def load(page_paths, changes = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/entities/collections/page_collection.rb#33
  def pages_from_paths(file_paths); end

  # source://lookbook//lib/lookbook/entities/collections/page_collection.rb#13
  def reload_all(file_paths); end

  # source://lookbook//lib/lookbook/entities/collections/page_collection.rb#18
  def reload_changed(file_paths, changes); end

  # source://lookbook//lib/lookbook/entities/collections/page_collection.rb#27
  def remove_by_file_path(paths); end

  # source://lookbook//lib/lookbook/entities/collections/concerns/hierarchical_collection.rb#12
  def to_tree(include_hidden: T.unsafe(nil)); end

  protected

  # source://lookbook//lib/lookbook/entities/collections/concerns/hierarchical_collection.rb#19
  def collect_ordered_entities(start_node); end

  class << self
    # source://lookbook//lib/lookbook/entities/collections/page_collection.rb#53
    def entity(file_path); end

    # source://lookbook//lib/lookbook/entities/collections/page_collection.rb#47
    def file_paths(directories); end
  end
end

# source://lookbook//lib/lookbook/entities/collections/page_collection.rb#5
Lookbook::PageCollection::TREE_BUILDER = Lookbook::PageTreeBuilder

class Lookbook::PageController < ::Rails::ApplicationController
  def render_page(page, locals = T.unsafe(nil)); end

  private

  # source://actionview/7.2.1.1/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  class << self
    # source://actionpack/7.2.1.1/lib/action_controller/metal.rb#288
    def middleware_stack; end
  end
end

module Lookbook::PageController::HelperMethods
  include ::ActionController::Base::HelperMethods
  include ::Lookbook::PageHelper
  include ::Lookbook::UiElementsHelper
end

# Represents a documentation page
#
# @api public
#
# source://lookbook//lib/lookbook/entities/page_entity.rb#5
class Lookbook::PageEntity < ::Lookbook::Entity
  include ::Lookbook::LocatableEntity
  include ::Lookbook::NavigableEntity

  # @api private
  # @return [PageEntity] a new instance of PageEntity
  #
  # source://lookbook//lib/lookbook/entities/page_entity.rb#16
  def initialize(file_path); end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#53
  def <=>(other); end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/page_entity.rb#112
  def add_section(section); end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#14
  def base_directories; end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/page_entity.rb#10
  def content; end

  # Merged data hash. Combines `data` set in frontmatter
  # with any global default values.
  #
  # @api public
  # @return [Hash] The resolved data hash
  #
  # source://lookbook//lib/lookbook/entities/page_entity.rb#43
  def data; end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#48
  def default_priority; end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#38
  def default_priority=(i); end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#43
  def depth; end

  # source://activesupport/7.2.1.1/lib/active_support/deprecation/method_wrappers.rb#46
  def dir_path(*args, **_arg1, &block); end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#37
  def directory_path; end

  # The docs URL path for this page.
  #
  # @api public
  # @return [String] URL path
  #
  # source://lookbook//lib/lookbook/entities/page_entity.rb#98
  def docs_path; end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#30
  def file_extension; end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#22
  def file_name(strip_ext = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#90
  def file_name_base; end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#11
  def file_path; end

  # Whether the page footer will be shown.
  #
  # Set via the `footer` frontmatter property.
  #
  # @api public
  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/entities/page_entity.rb#87
  def footer?; end

  # source://activesupport/7.2.1.1/lib/active_support/deprecation/method_wrappers.rb#46
  def full_path(*args, **_arg1, &block); end

  # Whether the page header will be shown.
  #
  # Set via the `header` frontmatter property.
  #
  # @api public
  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/entities/page_entity.rb#78
  def header?; end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#11
  def hidden?; end

  # Whether the page is the default landing page.
  #
  # Set via the `landing` frontmatter property.
  #
  # @api public
  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/entities/page_entity.rb#59
  def landing?; end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#64
  def last_modified; end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#75
  def logical_path; end

  # Whether the page content should be rendered
  # with the Markdown renderer.
  #
  # Set via the `markdown` frontmatter property.
  #
  # @api public
  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/entities/page_entity.rb#69
  def markdown?; end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/page_entity.rb#118
  def method_missing(method_name, *args, &block); end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#25
  def priority; end

  # source://activesupport/7.2.1.1/lib/active_support/deprecation/method_wrappers.rb#46
  def rel_path(*args, **_arg1, &block); end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#57
  def relative_directory_path; end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#47
  def relative_file_path; end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/page_entity.rb#107
  def search_terms; end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/page_entity.rb#13
  def sections; end

  # Page title, as defined in frontmatter.
  # Defaults to the page `label` if not provided.
  #
  # @api public
  # @return [String] The title
  #
  # source://lookbook//lib/lookbook/entities/page_entity.rb#31
  def title; end

  # The docs URL path for this page.
  #
  # @api public
  # @return [String] URL path
  #
  # source://lookbook//lib/lookbook/entities/page_entity.rb#98
  def url_path; end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#18
  def visible?; end

  protected

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#108
  def base_directory; end

  # @api public
  #
  # source://lookbook//lib/lookbook/entities/page_entity.rb#129
  def fetch_config(key, fallback = T.unsafe(nil), &block); end

  # @api public
  #
  # source://lookbook//lib/lookbook/entities/page_entity.rb#134
  def file_contents; end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#104
  def file_pathname; end

  # @api public
  #
  # source://lookbook//lib/lookbook/entities/page_entity.rb#138
  def frontmatter; end

  private

  # @api private
  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/entities/page_entity.rb#123
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end
end

# Helpers for documentation page templates
#
# @api public
#
# source://lookbook//lib/lookbook/helpers/page_helper.rb#5
module Lookbook::PageHelper
  # Render a 'live' embed of a component preview.
  #
  # If no scenario name is provided then the default (first) preview
  # scenario will be rendered in the embed.
  #
  # @api public
  # @param preview [String] Name of the preview class to embed
  # @param scenario [String] Example method name
  # @param opts [Hash] Options hash
  #
  # source://lookbook//lib/lookbook/helpers/page_helper.rb#27
  def embed(preview, scenario = T.unsafe(nil), **opts); end

  # Returns the URL path to a page.
  #
  # @api private
  # @param id [String, PageEntity] The id or PageEntity instance to generate a URL path for
  #
  # source://lookbook//lib/lookbook/helpers/page_helper.rb#10
  def page_path(id); end
end

# Represents a documentation page section.
#
# @api private
#
# source://lookbook//lib/lookbook/entities/page_section_entity.rb#6
class Lookbook::PageSectionEntity < ::Lookbook::PageEntity
  # @api private
  # @return [PageSectionEntity] a new instance of PageSectionEntity
  #
  # source://lookbook//lib/lookbook/entities/page_section_entity.rb#9
  def initialize(file_path); end

  # @api private
  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/entities/page_section_entity.rb#28
  def landing?; end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/page_section_entity.rb#19
  def lookup_path; end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/page_section_entity.rb#15
  def name; end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/page_section_entity.rb#7
  def page; end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/page_section_entity.rb#7
  def parent; end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/page_section_entity.rb#7
  def parent=(_arg0); end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/page_section_entity.rb#32
  def url_path; end

  protected

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/page_section_entity.rb#40
  def name_parts; end
end

module Lookbook::PageTabs; end

class Lookbook::PageTabs::Component < ::Lookbook::BaseComponent
  def initialize(markdown: T.unsafe(nil), **html_attrs); end

  def _call_tabs(**attrs, &block); end
  def before_render; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#179
  def tabs; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#183
  def tabs?; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#158
  def with_tab(*args, **_arg1, &block); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#163
  def with_tab_content(content); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#169
  def with_tabs(collection_args = T.unsafe(nil), &block); end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

# source://lookbook//lib/lookbook/services/entities/page_tree_builder.rb#2
class Lookbook::PageTreeBuilder < ::Lookbook::Service
  # @return [PageTreeBuilder] a new instance of PageTreeBuilder
  #
  # source://lookbook//lib/lookbook/services/entities/page_tree_builder.rb#5
  def initialize(pages, include_hidden: T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/services/entities/page_tree_builder.rb#10
  def call; end

  # Returns the value of attribute include_hidden.
  #
  # source://lookbook//lib/lookbook/services/entities/page_tree_builder.rb#3
  def include_hidden; end

  # source://lookbook//lib/lookbook/services/entities/page_tree_builder.rb#36
  def pages; end

  # source://lookbook//lib/lookbook/services/entities/page_tree_builder.rb#27
  def parse_segments(path); end
end

class Lookbook::PagesController < ::Lookbook::ApplicationController
  def index; end
  def show; end

  protected

  def page_controller; end

  private

  # source://actionview/7.2.1.1/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  class << self
    # source://actionpack/7.2.1.1/lib/abstract_controller/helpers.rb#13
    def _helper_methods; end

    def controller_path; end

    # source://actionpack/7.2.1.1/lib/action_controller/metal.rb#288
    def middleware_stack; end
  end
end

module Lookbook::PagesController::HelperMethods
  include ::ActionController::Base::HelperMethods
  include ::Lookbook::ApplicationHelper
  include ::Lookbook::UiElementsHelper
  include ::Lookbook::ApplicationController::HelperMethods

  def page_controller(*_arg0, **_arg1, &_arg2); end
end

# source://lookbook//lib/lookbook/stores/panel_store.rb#2
class Lookbook::PanelStore
  # @return [PanelStore] a new instance of PanelStore
  #
  # source://lookbook//lib/lookbook/stores/panel_store.rb#17
  def initialize(config = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/stores/panel_store.rb#22
  def add_panel(name, *args); end

  # source://lookbook//lib/lookbook/stores/panel_store.rb#58
  def all; end

  # source://lookbook//lib/lookbook/stores/panel_store.rb#50
  def get_panel(name); end

  # source://lookbook//lib/lookbook/stores/panel_store.rb#54
  def get_panels(*names); end

  # source://lookbook//lib/lookbook/stores/panel_store.rb#43
  def load_config(config); end

  # source://lookbook//lib/lookbook/stores/panel_store.rb#62
  def names; end

  # source://lookbook//lib/lookbook/stores/panel_store.rb#58
  def panels; end

  # source://lookbook//lib/lookbook/stores/panel_store.rb#39
  def remove_panel(name); end

  # Returns the value of attribute store.
  #
  # source://lookbook//lib/lookbook/stores/panel_store.rb#14
  def store; end

  # source://lookbook//lib/lookbook/stores/panel_store.rb#15
  def to_h(*_arg0, **_arg1, &_arg2); end

  # source://lookbook//lib/lookbook/stores/panel_store.rb#30
  def update_panel(name, opts = T.unsafe(nil)); end

  protected

  # source://lookbook//lib/lookbook/stores/panel_store.rb#102
  def build_config(name, *args); end

  # @raise [ConfigError]
  #
  # source://lookbook//lib/lookbook/stores/panel_store.rb#118
  def not_found!(name); end

  class << self
    # source://lookbook//lib/lookbook/stores/panel_store.rb#85
    def default_config; end

    # source://lookbook//lib/lookbook/stores/panel_store.rb#81
    def init_from_config; end

    # source://lookbook//lib/lookbook/stores/panel_store.rb#68
    def resolve_config(opts, data); end
  end
end

# source://lookbook//lib/lookbook/stores/panel_store.rb#3
Lookbook::PanelStore::CONFIG_FILE = T.let(T.unsafe(nil), String)

# source://lookbook//lib/lookbook/stores/panel_store.rb#5
Lookbook::PanelStore::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://lookbook//lib/lookbook/param.rb#2
class Lookbook::Param
  # @return [Param] a new instance of Param
  #
  # source://lookbook//lib/lookbook/param.rb#5
  def initialize(name:, input: T.unsafe(nil), description: T.unsafe(nil), value_type: T.unsafe(nil), value_default: T.unsafe(nil), value: T.unsafe(nil), options: T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://lookbook//lib/lookbook/param.rb#52
  def cast_value; end

  # Returns the value of attribute description.
  #
  # source://lookbook//lib/lookbook/param.rb#3
  def description; end

  # source://lookbook//lib/lookbook/param.rb#19
  def hint; end

  # source://lookbook//lib/lookbook/param.rb#23
  def input; end

  # source://lookbook//lib/lookbook/param.rb#41
  def input_options; end

  # source://lookbook//lib/lookbook/param.rb#48
  def input_partial; end

  # source://lookbook//lib/lookbook/param.rb#15
  def label; end

  # Returns the value of attribute name.
  #
  # source://lookbook//lib/lookbook/param.rb#3
  def name; end

  # Returns the value of attribute options.
  #
  # source://lookbook//lib/lookbook/param.rb#3
  def options; end

  # source://lookbook//lib/lookbook/param.rb#27
  def value; end

  # Returns the value of attribute value_default.
  #
  # source://lookbook//lib/lookbook/param.rb#3
  def value_default; end

  # source://lookbook//lib/lookbook/param.rb#37
  def value_type; end

  protected

  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/param.rb#101
  def boolean?(value); end

  # source://lookbook//lib/lookbook/param.rb#77
  def guess_input; end

  # source://lookbook//lib/lookbook/param.rb#85
  def guess_value_type; end

  # source://lookbook//lib/lookbook/param.rb#72
  def input_config; end

  class << self
    # source://lookbook//lib/lookbook/param.rb#58
    def from_tag(tag, value: T.unsafe(nil)); end
  end
end

# source://lookbook//lib/lookbook/tags/param_tag.rb#2
class Lookbook::ParamTag < ::Lookbook::YardTag
  # @return [ParamTag] a new instance of ParamTag
  #
  # source://lookbook//lib/lookbook/tags/param_tag.rb#10
  def initialize(text); end

  # source://lookbook//lib/lookbook/tags/param_tag.rb#20
  def description; end

  # source://lookbook//lib/lookbook/tags/param_tag.rb#16
  def input; end

  # Returns the value of attribute tag_args.
  #
  # source://lookbook//lib/lookbook/tags/param_tag.rb#8
  def tag_args; end

  # source://lookbook//lib/lookbook/tags/param_tag.rb#28
  def value_default; end

  # source://lookbook//lib/lookbook/tags/param_tag.rb#24
  def value_type; end

  protected

  # source://lookbook//lib/lookbook/tags/param_tag.rb#39
  def extract_name(text); end

  # source://lookbook//lib/lookbook/tags/param_tag.rb#44
  def parse_tag_body(text); end
end

# source://lookbook//lib/lookbook/tags/param_tag.rb#4
Lookbook::ParamTag::DESCRIPTION_MATCHER = T.let(T.unsafe(nil), Regexp)

# source://lookbook//lib/lookbook/tags/param_tag.rb#3
Lookbook::ParamTag::VALUE_TYPE_MATCHER = T.let(T.unsafe(nil), Regexp)

module Lookbook::Params; end
module Lookbook::Params::Editor; end

class Lookbook::Params::Editor::Component < ::Lookbook::BaseComponent
  def initialize(**html_attrs); end

  def _call_fields(**attrs); end
  def before_render; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#179
  def fields; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#183
  def fields?; end

  def param_styles; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#158
  def with_field(*args, **_arg1, &block); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#163
  def with_field_content(content); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#169
  def with_fields(collection_args = T.unsafe(nil), &block); end

  protected

  def alpine_component; end

  class << self
    def add_styles(input, styles); end

    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

module Lookbook::Params::Field; end

class Lookbook::Params::Field::Component < ::Lookbook::BaseComponent
  def initialize(param:, index:, **html_attrs); end

  def before_render; end
  def param; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  def rendered_input; end

  protected

  def alpine_component; end
  def render_input; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

# source://lookbook//lib/lookbook/support/errors/parser_error.rb#2
class Lookbook::ParserError < ::Lookbook::Error
  # @return [ParserError] a new instance of ParserError
  #
  # source://lookbook//lib/lookbook/support/errors/parser_error.rb#3
  def initialize(msg = T.unsafe(nil), scope: T.unsafe(nil), **kwargs); end
end

# source://lookbook//lib/lookbook/support/utils/path_utils.rb#2
module Lookbook::PathUtils
  class << self
    # source://lookbook//lib/lookbook/support/utils/path_utils.rb#45
    def determine_full_path(rel_path, search_dirs = T.unsafe(nil)); end

    # source://lookbook//lib/lookbook/support/utils/path_utils.rb#28
    def normalize_paths(paths, allow_root: T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://lookbook//lib/lookbook/support/utils/path_utils.rb#37
    def root_path?(path); end

    # source://lookbook//lib/lookbook/support/utils/path_utils.rb#41
    def strip_slashes(path); end

    # source://lookbook//lib/lookbook/support/utils/path_utils.rb#4
    def to_absolute(path); end

    # source://lookbook//lib/lookbook/support/utils/path_utils.rb#8
    def to_lookup_path(file_path); end

    # source://lookbook//lib/lookbook/support/utils/path_utils.rb#24
    def to_path(*args); end
  end
end

# source://lookbook//lib/lookbook/preview.rb#2
class Lookbook::Preview
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::AssetTagHelper
  extend ::Lookbook::PreviewAfterRender

  # source://lookbook//lib/lookbook/preview.rb#7
  def render(component = T.unsafe(nil), **args, &block); end

  # source://lookbook//lib/lookbook/preview.rb#7
  def render_component(component = T.unsafe(nil), **args, &block); end

  # source://lookbook//lib/lookbook/preview.rb#29
  def render_with_template(template: T.unsafe(nil), locals: T.unsafe(nil)); end

  class << self
    # source://lookbook//lib/lookbook/preview.rb#56
    def layout(layout_name); end

    # source://lookbook//lib/lookbook/preview.rb#40
    def preview_name; end

    # Returns the arguments for rendering of the component in its layout
    #
    # source://lookbook//lib/lookbook/preview.rb#45
    def render_args(scenario, params: T.unsafe(nil)); end

    # Returns the relative path (from preview_path) to the scenario template if the template exists
    #
    # source://lookbook//lib/lookbook/preview.rb#62
    def scenario_template_path(scenario); end
  end
end

# Shared module that both Lookbook::Preview and ViewComponent::Preview are extended with
#
# source://lookbook//lib/lookbook/preview_after_render.rb#3
module Lookbook::PreviewAfterRender
  # source://lookbook//lib/lookbook/preview_after_render.rb#4
  def after_render(method:, html:, context:); end
end

# source://lookbook//lib/lookbook/entities/collections/preview_collection.rb#2
class Lookbook::PreviewCollection < ::Lookbook::EntityCollection
  include ::Lookbook::HierarchicalCollection

  # source://lookbook//lib/lookbook/entities/collections/preview_collection.rb#46
  def entities; end

  # source://lookbook//lib/lookbook/entities/collections/preview_collection.rb#11
  def find_by_preview_class(klass); end

  # source://lookbook//lib/lookbook/entities/collections/preview_collection.rb#7
  def find_scenario_by_path(lookup_path); end

  # source://lookbook//lib/lookbook/entities/collections/preview_collection.rb#15
  def load(code_objects, changes = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/entities/collections/preview_collection.rb#19
  def reload_all(code_objects); end

  # source://lookbook//lib/lookbook/entities/collections/preview_collection.rb#25
  def reload_changed(code_objects, changes); end

  # source://lookbook//lib/lookbook/entities/collections/preview_collection.rb#40
  def remove_by_file_path(paths); end

  # source://lookbook//lib/lookbook/entities/collections/concerns/hierarchical_collection.rb#12
  def to_tree(include_hidden: T.unsafe(nil)); end

  protected

  # source://lookbook//lib/lookbook/entities/collections/concerns/hierarchical_collection.rb#19
  def collect_ordered_entities(start_node); end

  # source://lookbook//lib/lookbook/entities/collections/preview_collection.rb#71
  def scenarios; end

  class << self
    # @return [Boolean]
    #
    # source://lookbook//lib/lookbook/entities/collections/preview_collection.rb#62
    def preview_class?(klass); end

    # source://lookbook//lib/lookbook/entities/collections/preview_collection.rb#51
    def preview_from_code_object(code_object); end
  end
end

# source://lookbook//lib/lookbook/entities/collections/preview_collection.rb#5
Lookbook::PreviewCollection::TREE_BUILDER = Lookbook::PreviewTreeBuilder

class Lookbook::PreviewController < ::Rails::ApplicationController
  private

  # source://actionview/7.2.1.1/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def default_preview_layout; end
  def determine_layout(layout_override = T.unsafe(nil), prepend_views: T.unsafe(nil)); end
  def prepend_application_view_paths; end
  def prepend_preview_examples_view_path; end
  def prepend_preview_scenarios_view_path; end
  def set_locale(&block); end

  class << self
    # source://activesupport/7.2.1.1/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://actionpack/7.2.1.1/lib/action_controller/metal.rb#288
    def middleware_stack; end
  end
end

module Lookbook::PreviewController::HelperMethods
  include ::ActionController::Base::HelperMethods
  include ::Lookbook::PreviewHelper
end

# source://lookbook//lib/lookbook/preview_controller_actions.rb#2
module Lookbook::PreviewControllerActions
  extend ::ActiveSupport::Concern
end

# Represents a preview class
#
# @api public
#
# source://lookbook//lib/lookbook/entities/preview_entity.rb#5
class Lookbook::PreviewEntity < ::Lookbook::Entity
  include ::Lookbook::AnnotatableEntity
  include ::Lookbook::LocatableEntity
  include ::Lookbook::NavigableEntity

  # @api private
  # @return [PreviewEntity] a new instance of PreviewEntity
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#16
  def initialize(code_object); end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#53
  def <=>(other); end

  # source://lookbook//lib/lookbook/entities/preview_entity.rb#10
  def after_render(*_arg0, **_arg1, &_arg2); end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#162
  def after_render_method; end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#14
  def base_directories; end

  # @api private
  # @api private
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#114
  def component; end

  # All 'render targets' (i.e. components or partials) that are known
  # to be rendered within the scenarios defined within this preview.
  #
  # Render targets are guessed where possible (based on the preview class name)
  # but can also be manually specified using the `@renders` tag.
  #
  # @api public
  # @example :ruby
  #   "This preview renders: #{preview.render_targets.map(&:label).join(", ")}"
  # @return [Array<RenderableEntity>] All known render targets used in the preview
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#107
  def components; end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#48
  def default_priority; end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#38
  def default_priority=(i); end

  # The scenario used when a preview is rendered
  # without explicity specifying a scenario.
  #
  # @api public
  # @example :ruby
  #   default_scenario_name = preview.default_scenario.name
  # @return [ScenarioEntity] The default scenario for this preview
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#89
  def default_scenario; end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#43
  def depth; end

  # source://activesupport/7.2.1.1/lib/active_support/deprecation/method_wrappers.rb#46
  def dir_path(*args, **_arg1, &block); end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#37
  def directory_path; end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#156
  def display_options; end

  # Find a specific scenario by (i.e. method) name
  #
  # @api public
  # @example :ruby
  #   default_scenario_preview_path = preview.scenario(:default).preview_path
  # @param scenario_name [Symbol, String] Name of the scenario
  # @return [ScenarioEntity] The matching scenario, if found
  # @return [nil] if no matching scenario was found
  #
  # source://activesupport/7.2.1.1/lib/active_support/deprecation/method_wrappers.rb#46
  def example(*args, **_arg1, &block); end

  # Get all scenarios defined in the preview class.
  #
  # @api public
  # @example :ruby
  #   scenario_names = preview.scenarios.map(&:name)
  # @return [Array<ScenarioEntity>] All scenarios for the preview
  #
  # source://activesupport/7.2.1.1/lib/active_support/deprecation/method_wrappers.rb#46
  def examples(*args, **_arg1, &block); end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#30
  def file_extension; end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#22
  def file_name(strip_ext = T.unsafe(nil)); end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#151
  def file_name_base; end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#11
  def file_path; end

  # source://activesupport/7.2.1.1/lib/active_support/deprecation/method_wrappers.rb#46
  def full_path(*args, **_arg1, &block); end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#172
  def guess_render_targets; end

  # source://lookbook//lib/lookbook/entities/concerns/annotatable_entity.rb#6
  def has_tag?(*_arg0, **_arg1, &_arg2); end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#11
  def hidden?; end

  # Get all scenarios defined in the preview class
  # that are hidden (using the `@hidden` tag) and so
  # will not show up in the navigation.
  #
  # @api public
  # @example :ruby
  #   hidden_scenario_names = preview.hidden_scenarios.map(&:name)
  # @return [Array<ScenarioEntity>] All hidden scenarios for the preview
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#78
  def hidden_scenarios; end

  # The inspector URL path for this preview
  #
  # @api public
  # @return [String] URL path
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#128
  def inspect_path; end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#64
  def last_modified; end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#167
  def layout; end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#75
  def logical_path; end

  # source://lookbook//lib/lookbook/entities/concerns/annotatable_entity.rb#14
  def notes; end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#13
  def preview_class; end

  # The name of the associated preview class
  #
  # @api public
  # @return [String] Class name
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#146
  def preview_class_name; end

  # The standalone preview URL path for this preview
  #
  # @api public
  # @return [String] URL path
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#137
  def preview_path; end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#25
  def priority; end

  # source://activesupport/7.2.1.1/lib/active_support/deprecation/method_wrappers.rb#46
  def rel_path(*args, **_arg1, &block); end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#57
  def relative_directory_path; end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#47
  def relative_file_path; end

  # source://lookbook//lib/lookbook/entities/preview_entity.rb#10
  def render_args(*_arg0, **_arg1, &_arg2); end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#114
  def render_target; end

  # All 'render targets' (i.e. components or partials) that are known
  # to be rendered within the scenarios defined within this preview.
  #
  # Render targets are guessed where possible (based on the preview class name)
  # but can also be manually specified using the `@renders` tag.
  #
  # @api public
  # @example :ruby
  #   "This preview renders: #{preview.render_targets.map(&:label).join(", ")}"
  # @return [Array<RenderableEntity>] All known render targets used in the preview
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#107
  def render_targets; end

  # Find a specific scenario by (i.e. method) name
  #
  # @api public
  # @example :ruby
  #   default_scenario_preview_path = preview.scenario(:default).preview_path
  # @param scenario_name [Symbol, String] Name of the scenario
  # @return [ScenarioEntity] The matching scenario, if found
  # @return [nil] if no matching scenario was found
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#52
  def scenario(scenario_name); end

  # Get all scenarios defined in the preview class.
  #
  # @api public
  # @example :ruby
  #   scenario_names = preview.scenarios.map(&:name)
  # @return [Array<ScenarioEntity>] All scenarios for the preview
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#37
  def scenarios; end

  # source://lookbook//lib/lookbook/entities/concerns/annotatable_entity.rb#40
  def tag(name = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/entities/concerns/annotatable_entity.rb#27
  def tags(name = T.unsafe(nil)); end

  # The inspector URL path for this preview
  #
  # @api public
  # @return [String] URL path
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#128
  def url_path; end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#18
  def visible?; end

  # Get all scenarios defined in the preview class that
  # have not been hidden (by using the `@hidden` tag).
  #
  # @api public
  # @example :ruby
  #   visible_scenario_names = preview.visible_scenarios.map(&:name)
  # @return [Array<ScenarioEntity>] All visible scenarios for the preview
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#66
  def visible_scenarios; end

  protected

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#108
  def base_directory; end

  # source://lookbook//lib/lookbook/entities/concerns/annotatable_entity.rb#48
  def code_object; end

  # source://lookbook//lib/lookbook/entities/concerns/annotatable_entity.rb#50
  def fetch_config(key, fallback = T.unsafe(nil), &block); end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#104
  def file_pathname; end

  # @api public
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#184
  def grouped_scenario_entities; end

  # @api public
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#180
  def load_scenarios; end

  # @api public
  #
  # source://lookbook//lib/lookbook/entities/preview_entity.rb#208
  def scenario_entities; end

  private

  # source://lookbook//lib/lookbook/entities/concerns/annotatable_entity.rb#71
  def display_options_config; end

  # source://lookbook//lib/lookbook/entities/concerns/annotatable_entity.rb#65
  def renders_config; end
end

# Set of helpers for preview layouts
#
# @api public
#
# source://lookbook//lib/lookbook/helpers/preview_helper.rb#5
module Lookbook::PreviewHelper
  # @api public
  #
  # source://lookbook//lib/lookbook/helpers/preview_helper.rb#10
  def lookbook_data(key, fallback = T.unsafe(nil)); end

  # @api public
  #
  # source://lookbook//lib/lookbook/helpers/preview_helper.rb#6
  def lookbook_display(key, fallback = T.unsafe(nil)); end
end

# source://lookbook//lib/lookbook/preview_parser.rb#4
class Lookbook::PreviewParser
  # @return [PreviewParser] a new instance of PreviewParser
  #
  # source://lookbook//lib/lookbook/preview_parser.rb#5
  def initialize(paths, tags = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/preview_parser.rb#26
  def after_parse(&block); end

  # source://lookbook//lib/lookbook/preview_parser.rb#15
  def parse(files = T.unsafe(nil), &block); end

  # source://lookbook//lib/lookbook/preview_parser.rb#30
  def paths; end

  protected

  # source://lookbook//lib/lookbook/preview_parser.rb#36
  def callbacks; end

  # source://lookbook//lib/lookbook/preview_parser.rb#49
  def define_tags(tags = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/preview_parser.rb#43
  def run_callbacks; end
end

# source://lookbook//lib/lookbook/support/errors/preview_template_error.rb#2
class Lookbook::PreviewTemplateError < ::Lookbook::Error
  # @return [PreviewTemplateError] a new instance of PreviewTemplateError
  #
  # source://lookbook//lib/lookbook/support/errors/preview_template_error.rb#3
  def initialize(msg = T.unsafe(nil), scope: T.unsafe(nil), **kwargs); end
end

# source://lookbook//lib/lookbook/services/entities/preview_tree_builder.rb#2
class Lookbook::PreviewTreeBuilder < ::Lookbook::Service
  # @return [PreviewTreeBuilder] a new instance of PreviewTreeBuilder
  #
  # source://lookbook//lib/lookbook/services/entities/preview_tree_builder.rb#5
  def initialize(previews, include_hidden: T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/services/entities/preview_tree_builder.rb#10
  def call; end

  # Returns the value of attribute include_hidden.
  #
  # source://lookbook//lib/lookbook/services/entities/preview_tree_builder.rb#3
  def include_hidden; end

  # source://lookbook//lib/lookbook/services/entities/preview_tree_builder.rb#30
  def previews; end
end

class Lookbook::PreviewsController < ::Lookbook::ApplicationController
  include ::Lookbook::TargetableConcern
  include ::Lookbook::WithPreviewControllerConcern

  def index; end
  def show; end

  private

  # source://actionview/7.2.1.1/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def embedded?; end
  def iframe_content_scripts; end
  def permit_framing; end
  def scenario_json(scenario); end

  class << self
    # source://activesupport/7.2.1.1/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://actionview/7.2.1.1/lib/action_view/layouts.rb#211
    def _layout; end

    # source://actionview/7.2.1.1/lib/action_view/layouts.rb#212
    def _layout_conditions; end

    def controller_path; end

    # source://actionpack/7.2.1.1/lib/action_controller/metal.rb#288
    def middleware_stack; end
  end
end

# source://lookbook//lib/lookbook/services/priority_prefix_parser.rb#2
class Lookbook::PriorityPrefixParser < ::Lookbook::Service
  # @return [PriorityPrefixParser] a new instance of PriorityPrefixParser
  #
  # source://lookbook//lib/lookbook/services/priority_prefix_parser.rb#7
  def initialize(input); end

  # source://lookbook//lib/lookbook/services/priority_prefix_parser.rb#11
  def call; end

  # Returns the value of attribute input.
  #
  # source://lookbook//lib/lookbook/services/priority_prefix_parser.rb#5
  def input; end
end

# source://lookbook//lib/lookbook/services/priority_prefix_parser.rb#3
Lookbook::PriorityPrefixParser::PRIORITY_PREFIX_REGEX = T.let(T.unsafe(nil), Regexp)

# source://lookbook//lib/lookbook/tags/priority_tag.rb#2
class Lookbook::PriorityTag < ::Lookbook::YardTag
  # source://lookbook//lib/lookbook/tags/priority_tag.rb#5
  def to_i; end

  # source://lookbook//lib/lookbook/tags/priority_tag.rb#5
  def value; end
end

# source://lookbook//lib/lookbook/tags/priority_tag.rb#3
Lookbook::PriorityTag::DEFAULT_PRIORITY = T.let(T.unsafe(nil), Integer)

module Lookbook::Prose; end

class Lookbook::Prose::Component < ::Lookbook::BaseComponent
  def initialize(size: T.unsafe(nil), markdown: T.unsafe(nil), **html_attrs); end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  def rendered_content; end
  def size_class; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

# source://lookbook//lib/lookbook/reloaders.rb#4
class Lookbook::Reloaders
  # @return [Reloaders] a new instance of Reloaders
  #
  # source://lookbook//lib/lookbook/reloaders.rb#7
  def initialize; end

  # source://lookbook//lib/lookbook/reloaders.rb#11
  def add(name, directories, extensions, &callback); end

  # source://lookbook//lib/lookbook/reloaders.rb#21
  def execute; end

  # source://lookbook//lib/lookbook/reloaders.rb#25
  def register_changes(changes); end

  # Returns the value of attribute reloaders.
  #
  # source://lookbook//lib/lookbook/reloaders.rb#5
  def reloaders; end
end

# source://lookbook//lib/lookbook/reloaders.rb#30
class Lookbook::Reloaders::Reloader
  # @return [Reloader] a new instance of Reloader
  #
  # source://lookbook//lib/lookbook/reloaders.rb#36
  def initialize(name, directories, extensions, &callback); end

  # Returns the value of attribute callback.
  #
  # source://lookbook//lib/lookbook/reloaders.rb#33
  def callback; end

  # Returns the value of attribute directories.
  #
  # source://lookbook//lib/lookbook/reloaders.rb#33
  def directories; end

  # source://lookbook//lib/lookbook/reloaders.rb#31
  def execute(*_arg0, **_arg1, &_arg2); end

  # source://lookbook//lib/lookbook/reloaders.rb#31
  def execute_if_updated(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute extensions.
  #
  # source://lookbook//lib/lookbook/reloaders.rb#33
  def extensions; end

  # Returns the value of attribute last_changes.
  #
  # source://lookbook//lib/lookbook/reloaders.rb#34
  def last_changes; end

  # Sets the attribute last_changes
  #
  # @param value the value to set the attribute last_changes to.
  #
  # source://lookbook//lib/lookbook/reloaders.rb#34
  def last_changes=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://lookbook//lib/lookbook/reloaders.rb#33
  def name; end

  # source://lookbook//lib/lookbook/reloaders.rb#31
  def updated?(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/reloaders.rb#44
  def watching?(changes); end

  protected

  # source://lookbook//lib/lookbook/reloaders.rb#57
  def file_watcher; end
end

# source://lookbook//lib/lookbook/entities/collections/render_target_collection.rb#2
class Lookbook::RenderTargetCollection < ::Lookbook::EntityCollection; end

# Represents the component or view template partial
# that is being rendered in a preview.
#
# @api public
#
# source://lookbook//lib/lookbook/entities/renderable_entity.rb#6
class Lookbook::RenderableEntity < ::Lookbook::Entity
  include ::Lookbook::LocatableEntity

  # @api private
  # @return [RenderableEntity] a new instance of RenderableEntity
  #
  # source://lookbook//lib/lookbook/entities/renderable_entity.rb#10
  def initialize(identifier); end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#14
  def base_directories; end

  # Whether or not the renderable is a component
  # (as opposed to a view template/partial).
  #
  # @api public
  # @return [Boolean] True if component
  #
  # source://lookbook//lib/lookbook/entities/renderable_entity.rb#73
  def component?; end

  # The associated component class (if the renderable is a component).
  #
  # @api public
  # @return [Class] The component class
  #
  # source://lookbook//lib/lookbook/entities/renderable_entity.rb#58
  def component_class; end

  # source://activesupport/7.2.1.1/lib/active_support/deprecation/method_wrappers.rb#46
  def dir_path(*args, **_arg1, &block); end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#37
  def directory_path; end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#30
  def file_extension; end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#22
  def file_name(strip_ext = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#90
  def file_name_base; end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#11
  def file_path; end

  # source://activesupport/7.2.1.1/lib/active_support/deprecation/method_wrappers.rb#46
  def full_path(*args, **_arg1, &block); end

  # Whether or not the renderable is a component without a template.
  #
  # @api public
  # @return [Boolean] True if no template is present
  #
  # source://lookbook//lib/lookbook/entities/renderable_entity.rb#65
  def inline?; end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#64
  def last_modified; end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#75
  def logical_path; end

  # Parameter-safe entity name.
  #
  # @api public
  # @return [String]
  #
  # source://lookbook//lib/lookbook/entities/renderable_entity.rb#38
  def name; end

  # source://activesupport/7.2.1.1/lib/active_support/deprecation/method_wrappers.rb#46
  def rel_path(*args, **_arg1, &block); end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#57
  def relative_directory_path; end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#47
  def relative_file_path; end

  # Whether or not the renderable is a view template/partial
  # (as opposed to a component).
  #
  # @api public
  # @return [Boolean] True if component
  #
  # source://lookbook//lib/lookbook/entities/renderable_entity.rb#83
  def template?; end

  # Full path to the component template (if present)
  # or view template/partial.
  #
  # @api public
  # @return [Class] The component class
  #
  # source://lookbook//lib/lookbook/entities/renderable_entity.rb#95
  def template_file_path; end

  # Entity type identifier.
  # Returns `:component` for components and
  # `:template` for view templates/partials.
  #
  # @api public
  # @return [Symbol] The entity type
  #
  # source://lookbook//lib/lookbook/entities/renderable_entity.rb#47
  def type; end

  protected

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#108
  def base_directory; end

  # source://lookbook//lib/lookbook/entities/concerns/locatable_entity.rb#104
  def file_pathname; end
end

# Represents a **rendered** preview scenario.
#
# Extends ScenarioEntity with an `output`
# method that returns the rendered HTML output.
#
# See the [ScenarioEntity](./scenario_entity) docs for other available methods.
#
# @api public
#
# source://lookbook//lib/lookbook/entities/rendered_scenario_entity.rb#10
class Lookbook::RenderedScenarioEntity
  # @api private
  # @return [RenderedScenarioEntity] a new instance of RenderedScenarioEntity
  #
  # source://lookbook//lib/lookbook/entities/rendered_scenario_entity.rb#17
  def initialize(scenario, output, params); end

  # 'Beautified' HTML output of the rendered scenario.
  #
  # @api public
  # @return [String] Rendered output
  #
  # source://lookbook//lib/lookbook/entities/rendered_scenario_entity.rb#31
  def beautified_output; end

  # source://activesupport/7.2.1.1/lib/active_support/delegation.rb#187
  def method_missing(method, *_arg1, **_arg2, &_arg3); end

  # HTML output of the rendered scenario.
  #
  # @api public
  # @return [String] Rendered output
  #
  # source://lookbook//lib/lookbook/entities/rendered_scenario_entity.rb#26
  def output; end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/rendered_scenario_entity.rb#14
  def scenario; end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/rendered_scenario_entity.rb#36
  def source; end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/rendered_scenario_entity.rb#41
  def source_lang; end

  protected

  # @api public
  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/entities/rendered_scenario_entity.rb#61
  def has_custom_template?; end

  # @api public
  #
  # source://lookbook//lib/lookbook/entities/rendered_scenario_entity.rb#47
  def params; end

  # @api public
  #
  # source://lookbook//lib/lookbook/entities/rendered_scenario_entity.rb#49
  def render_args; end

  # @api public
  #
  # source://lookbook//lib/lookbook/entities/rendered_scenario_entity.rb#65
  def system_templates; end

  # @api public
  #
  # source://lookbook//lib/lookbook/entities/rendered_scenario_entity.rb#53
  def template; end

  # @api public
  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/entities/rendered_scenario_entity.rb#57
  def view?; end

  private

  # source://activesupport/7.2.1.1/lib/active_support/delegation.rb#179
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

# source://lookbook//lib/lookbook/tags/renders_tag.rb#2
class Lookbook::RendersTag < ::Lookbook::YardTag; end

# source://lookbook//lib/lookbook/support/errors/routing_error.rb#2
class Lookbook::RoutingError < ::Lookbook::Error
  # @return [RoutingError] a new instance of RoutingError
  #
  # source://lookbook//lib/lookbook/support/errors/routing_error.rb#3
  def initialize(msg = T.unsafe(nil), scope: T.unsafe(nil), **kwargs); end
end

# source://lookbook//lib/lookbook/runtime_context.rb#2
class Lookbook::RuntimeContext
  # @return [RuntimeContext] a new instance of RuntimeContext
  #
  # source://lookbook//lib/lookbook/runtime_context.rb#5
  def initialize(env: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/runtime_context.rb#25
  def actioncable_installed?; end

  # source://lookbook//lib/lookbook/runtime_context.rb#9
  def app_name; end

  # Returns the value of attribute env.
  #
  # source://lookbook//lib/lookbook/runtime_context.rb#3
  def env; end

  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/runtime_context.rb#33
  def gem_installed?(name); end

  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/runtime_context.rb#29
  def listen_installed?; end

  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/runtime_context.rb#21
  def rails_newer_than?(version); end

  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/runtime_context.rb#17
  def rails_older_than?(version); end

  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/runtime_context.rb#41
  def rake_task?; end

  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/runtime_context.rb#37
  def web?; end
end

# source://lookbook//lib/lookbook/entities/collections/scenario_collection.rb#2
class Lookbook::ScenarioCollection < ::Lookbook::EntityCollection; end

# Represents a preview scenario method within a preview class
#
# @api public
#
# source://lookbook//lib/lookbook/entities/scenario_entity.rb#5
class Lookbook::ScenarioEntity < ::Lookbook::Entity
  include ::Lookbook::InspectableEntity
  include ::Lookbook::AnnotatableEntity
  include ::Lookbook::NavigableEntity

  # @api private
  # @return [ScenarioEntity] a new instance of ScenarioEntity
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#21
  def initialize(code_object, preview, priority: T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#53
  def <=>(other); end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#114
  def after_render_method; end

  # The item (component or partial) that the scenario renders.
  #
  # The render target is guessed where possible (based on the preview class name)
  # but can also be manually specified using the `@renders` tag.
  #
  # @api public
  # @example :ruby
  #   "This scenario renders: #{scenario.render_target.label}"
  # @return [RenderableEntity] The render target
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#87
  def component; end

  # @api private
  # @api private
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#71
  def components; end

  # source://lookbook//lib/lookbook/entities/concerns/inspectable_entity.rb#41
  def custom_source?; end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#48
  def default_priority; end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#38
  def default_priority=(i); end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#43
  def depth; end

  # Display options hash.
  #
  # Contains all display options defined via the `@display` tag
  # merged with any globally-defined options.
  #
  # @api public
  # @return [Hash] The resolved display options
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#62
  def display_options; end

  # @api private
  #
  # source://activesupport/7.2.1.1/lib/active_support/deprecation/method_wrappers.rb#46
  def examples(*args, **_arg1, &block); end

  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#10
  def group(*_arg0, **_arg1, &_arg2); end

  # source://lookbook//lib/lookbook/entities/concerns/annotatable_entity.rb#6
  def has_tag?(*_arg0, **_arg1, &_arg2); end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#11
  def hidden?; end

  # Human-readable unique scenario ID
  #
  # @api public
  # @return [String] The ID
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#33
  def id; end

  # The inspector URL path for this preview
  #
  # @api public
  # @return [String] URL path
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#100
  def inspect_path; end

  # @api public
  #
  # source://activesupport/7.2.1.1/lib/active_support/deprecation/method_wrappers.rb#46
  def lang(*args, **_arg1, &block); end

  # Parameter-safe scenario name.
  #
  # @api public
  # @return [String] The name
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#40
  def name; end

  # source://lookbook//lib/lookbook/entities/concerns/annotatable_entity.rb#14
  def notes; end

  # The preview that this scenario belongs to.
  #
  # @api public
  # @api private
  # @return [PreviewEntity] The parent preview entity
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#15
  def parent; end

  # The preview that this scenario belongs to.
  #
  # @api public
  # @return [PreviewEntity] The parent preview entity
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#15
  def preview; end

  # The standalone preview URL path for this preview
  #
  # @api public
  # @return [String] URL path
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#107
  def preview_path; end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#25
  def priority; end

  # The item (component or partial) that the scenario renders.
  #
  # The render target is guessed where possible (based on the preview class name)
  # but can also be manually specified using the `@renders` tag.
  #
  # @api public
  # @example :ruby
  #   "This scenario renders: #{scenario.render_target.label}"
  # @return [RenderableEntity] The render target
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#87
  def render_target; end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#71
  def render_targets; end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#119
  def scenarios; end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#136
  def search_terms; end

  # source://lookbook//lib/lookbook/entities/concerns/inspectable_entity.rb#11
  def source; end

  # source://lookbook//lib/lookbook/entities/concerns/inspectable_entity.rb#34
  def source_lang; end

  # source://lookbook//lib/lookbook/entities/concerns/annotatable_entity.rb#40
  def tag(name = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/entities/concerns/annotatable_entity.rb#27
  def tags(name = T.unsafe(nil)); end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#130
  def template_lang(template_path); end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#124
  def template_source(template_path); end

  # Entity type identifier.
  # Returns `:scenario` for scenarios.
  #
  # @api public
  # @return [Symbol] The entity type
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#48
  def type; end

  # The inspector URL path for this preview
  #
  # @api public
  # @return [String] URL path
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#100
  def url_path; end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#18
  def visible?; end

  protected

  # source://lookbook//lib/lookbook/entities/concerns/annotatable_entity.rb#48
  def code_object; end

  # source://lookbook//lib/lookbook/entities/concerns/annotatable_entity.rb#50
  def fetch_config(key, fallback = T.unsafe(nil), &block); end

  # @api public
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#157
  def format_source(source); end

  # @api public
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#169
  def load_render_targets; end

  # @api public
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#149
  def sort_handler(other_entity); end

  # source://lookbook//lib/lookbook/entities/concerns/inspectable_entity.rb#49
  def source_file_path; end

  # @api public
  #
  # source://lookbook//lib/lookbook/entities/scenario_entity.rb#161
  def template_file_path(template_path); end

  private

  # source://lookbook//lib/lookbook/entities/concerns/annotatable_entity.rb#71
  def display_options_config; end

  # source://lookbook//lib/lookbook/entities/concerns/annotatable_entity.rb#65
  def renders_config; end
end

# Represents a group of preview scenarios within a preview class
#
# @api public
#
# source://lookbook//lib/lookbook/entities/scenario_group_entity.rb#5
class Lookbook::ScenarioGroupEntity < ::Lookbook::Entity
  include ::Lookbook::NavigableEntity

  # @api private
  # @return [ScenarioGroupEntity] a new instance of ScenarioGroupEntity
  #
  # source://lookbook//lib/lookbook/entities/scenario_group_entity.rb#26
  def initialize(name, scenarios, preview); end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#53
  def <=>(other); end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/scenario_group_entity.rb#131
  def add_scenario(scenario); end

  # Collection of render targets (components or partials)
  # from each of the scenarios in the group.
  #
  # Render targets are guessed where possible (based on the preview class name)
  # but can also be manually specified using the `@renders` tag.
  #
  # @api public
  # @example :ruby
  #   "This group renders: #{group.render_targets.map(&:label).join(", ")}"
  # @return [Array<RenderableEntity>] Render target entities
  #
  # source://lookbook//lib/lookbook/entities/scenario_group_entity.rb#63
  def components; end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#48
  def default_priority; end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#38
  def default_priority=(i); end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#43
  def depth; end

  # Display options hash.
  #
  # Contains all display options defined via the `@display` tag
  # for each scenario in the group, merged with any globally-defined options.
  #
  # @api public
  # @return [Hash] The resolved display options
  #
  # source://lookbook//lib/lookbook/entities/scenario_group_entity.rb#41
  def display_options; end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#11
  def hidden?; end

  # The inspector URL path for this scenario group
  #
  # @api public
  # @return [String] URL path
  #
  # source://lookbook//lib/lookbook/entities/scenario_group_entity.rb#98
  def inspect_path; end

  # The preview that this scenario belongs to.
  #
  # @api public
  # @api private
  # @return [PreviewEntity] The parent preview entity
  #
  # source://lookbook//lib/lookbook/entities/scenario_group_entity.rb#20
  def parent; end

  # The preview that this scenario belongs to.
  #
  # @api public
  # @return [PreviewEntity] The parent preview entity
  #
  # source://lookbook//lib/lookbook/entities/scenario_group_entity.rb#20
  def preview; end

  # The standalone preview URL path for this scenario group
  #
  # @api public
  # @return [String] URL path
  #
  # source://lookbook//lib/lookbook/entities/scenario_group_entity.rb#105
  def preview_path; end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#25
  def priority; end

  # Collection of render targets (components or partials)
  # from each of the scenarios in the group.
  #
  # Render targets are guessed where possible (based on the preview class name)
  # but can also be manually specified using the `@renders` tag.
  #
  # @api public
  # @example :ruby
  #   "This group renders: #{group.render_targets.map(&:label).join(", ")}"
  # @return [Array<RenderableEntity>] Render target entities
  #
  # source://lookbook//lib/lookbook/entities/scenario_group_entity.rb#63
  def render_targets; end

  # Returns all scenarios within the group.
  #
  # @api public
  # @return [Array<ScenarioEntity>] All scenarios
  #
  # source://lookbook//lib/lookbook/entities/scenario_group_entity.rb#13
  def scenarios; end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/scenario_group_entity.rb#126
  def search_terms; end

  # @api private
  #
  # source://lookbook//lib/lookbook/entities/scenario_group_entity.rb#87
  def tag(tag_name = T.unsafe(nil)); end

  # Collection of tags from each of the scenarios in the group.
  # Can be filtered by tag name by providing the name as an argument.
  #
  # @api public
  # @example :ruby
  #   all_tags = group.tags
  #   display_tags = group.tags(:display)
  # @param tag_name [Symbol] Optional tag type to filter by
  # @return [Array<YardTag>] Array of tags
  #
  # source://lookbook//lib/lookbook/entities/scenario_group_entity.rb#82
  def tags(tag_name = T.unsafe(nil)); end

  # Entity type identifier.
  # Returns `:scenario_group` for scenario groups.
  #
  # @api public
  # @return [Symbol] The entity type
  #
  # source://lookbook//lib/lookbook/entities/scenario_group_entity.rb#119
  def type; end

  # The inspector URL path for this scenario group
  #
  # @api public
  # @return [String] URL path
  #
  # source://lookbook//lib/lookbook/entities/scenario_group_entity.rb#98
  def url_path; end

  # source://lookbook//lib/lookbook/entities/concerns/navigable_entity.rb#18
  def visible?; end
end

# source://lookbook//lib/lookbook/services/urls/search_param_encoder.rb#4
class Lookbook::SearchParamEncoder < ::Lookbook::Service
  # @return [SearchParamEncoder] a new instance of SearchParamEncoder
  #
  # source://lookbook//lib/lookbook/services/urls/search_param_encoder.rb#7
  def initialize(data); end

  # source://lookbook//lib/lookbook/services/urls/search_param_encoder.rb#11
  def call; end

  # Returns the value of attribute data.
  #
  # source://lookbook//lib/lookbook/services/urls/search_param_encoder.rb#5
  def data; end
end

# source://lookbook//lib/lookbook/services/urls/search_param_parser.rb#4
class Lookbook::SearchParamParser < ::Lookbook::Service
  # @return [SearchParamParser] a new instance of SearchParamParser
  #
  # source://lookbook//lib/lookbook/services/urls/search_param_parser.rb#7
  def initialize(str); end

  # source://lookbook//lib/lookbook/services/urls/search_param_parser.rb#11
  def call; end

  # Returns the value of attribute str.
  #
  # source://lookbook//lib/lookbook/services/urls/search_param_parser.rb#5
  def str; end
end

# source://lookbook//lib/lookbook/support/service.rb#2
class Lookbook::Service
  class << self
    # source://lookbook//lib/lookbook/support/service.rb#3
    def call(*args, **kwargs, &block); end
  end
end

# source://lookbook//lib/lookbook/tags/source_tag.rb#2
class Lookbook::SourceTag < ::Lookbook::YardTag
  # source://lookbook//lib/lookbook/tags/source_tag.rb#3
  def value; end
end

module Lookbook::SplitLayout; end

class Lookbook::SplitLayout::Component < ::Lookbook::BaseComponent
  # source://view_component/3.9.0/lib/view_component/slotable.rb#179
  def panes; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#183
  def panes?; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#158
  def with_pane(*args, **_arg1, &block); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#163
  def with_pane_content(content); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#169
  def with_panes(collection_args = T.unsafe(nil), &block); end

  protected

  def alpine_component; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

# Generic hash-like key/value store.
#
# Properties can be get/set using hash access syntax (`data[:key]`)
# or dot-notation syntax (`data.key`).
#
# Based on [ActiveSupport::OrderedOptions](https://api.rubyonrails.org/classes/ActiveSupport/OrderedOptions.html)
#
# @api public
#
# source://lookbook//lib/lookbook/support/store.rb#11
class Lookbook::Store < ::ActiveSupport::OrderedOptions
  # @api public
  # @return [Store] a new instance of Store
  #
  # source://lookbook//lib/lookbook/support/store.rb#12
  def initialize(initial_data = T.unsafe(nil), opts = T.unsafe(nil)); end

  # @api public
  #
  # source://lookbook//lib/lookbook/support/store.rb#18
  def []=(key, value); end

  # @api public
  #
  # source://lookbook//lib/lookbook/support/store.rb#22
  def fetch(name, *args); end

  # @api public
  #
  # source://lookbook//lib/lookbook/support/store.rb#26
  def method_missing(name, *args); end

  # @api public
  #
  # source://lookbook//lib/lookbook/support/store.rb#37
  def to_h; end

  # @api public
  #
  # source://lookbook//lib/lookbook/support/store.rb#43
  def to_hash; end

  protected

  # @api public
  #
  # source://lookbook//lib/lookbook/support/store.rb#49
  def normalize_value(value); end

  private

  # @api public
  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/support/store.rb#33
  def respond_to_missing?(name, include_private); end
end

# source://lookbook//lib/lookbook/services/string_value_caster.rb#4
class Lookbook::StringValueCaster < ::Lookbook::Service
  # @return [StringValueCaster] a new instance of StringValueCaster
  #
  # source://lookbook//lib/lookbook/services/string_value_caster.rb#5
  def initialize(value, type = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/services/string_value_caster.rb#51
  def active_model_cast; end

  # source://lookbook//lib/lookbook/services/string_value_caster.rb#15
  def call; end

  # source://lookbook//lib/lookbook/services/string_value_caster.rb#39
  def cast_to_array; end

  # source://lookbook//lib/lookbook/services/string_value_caster.rb#51
  def cast_to_boolean; end

  # source://lookbook//lib/lookbook/services/string_value_caster.rb#47
  def cast_to_datetime; end

  # source://lookbook//lib/lookbook/services/string_value_caster.rb#51
  def cast_to_float; end

  # source://lookbook//lib/lookbook/services/string_value_caster.rb#31
  def cast_to_hash; end

  # source://lookbook//lib/lookbook/services/string_value_caster.rb#51
  def cast_to_integer; end

  # source://lookbook//lib/lookbook/services/string_value_caster.rb#23
  def cast_to_string; end

  # source://lookbook//lib/lookbook/services/string_value_caster.rb#27
  def cast_to_symbol; end
end

# source://lookbook//lib/lookbook/services/templates/styles_extractor.rb#4
class Lookbook::StylesExtractor < ::Lookbook::Service
  # @return [StylesExtractor] a new instance of StylesExtractor
  #
  # source://lookbook//lib/lookbook/services/templates/styles_extractor.rb#9
  def initialize(content); end

  # source://lookbook//lib/lookbook/services/templates/styles_extractor.rb#13
  def call; end

  # Returns the value of attribute content.
  #
  # source://lookbook//lib/lookbook/services/templates/styles_extractor.rb#7
  def content; end

  protected

  # source://lookbook//lib/lookbook/services/templates/styles_extractor.rb#21
  def extract_styles(text); end

  # source://lookbook//lib/lookbook/services/templates/styles_extractor.rb#34
  def strip_styles(text); end
end

# source://lookbook//lib/lookbook/services/templates/styles_extractor.rb#5
Lookbook::StylesExtractor::STYLE_TAGS_REGEX = T.let(T.unsafe(nil), Regexp)

module Lookbook::TabPanels; end

class Lookbook::TabPanels::Component < ::Lookbook::BaseComponent
  def initialize(**html_attrs); end

  def _call_panels(**attrs); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#179
  def panels; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#183
  def panels?; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#158
  def with_panel(*args, **_arg1, &block); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#163
  def with_panel_content(content); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#169
  def with_panels(collection_args = T.unsafe(nil), &block); end

  protected

  def alpine_component; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

module Lookbook::TabPanels::Panel; end

class Lookbook::TabPanels::Panel::Component < ::Lookbook::BaseComponent
  def initialize(name:, **html_attrs); end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

module Lookbook::Tabs; end

class Lookbook::Tabs::Component < ::Lookbook::BaseComponent
  def initialize(theme: T.unsafe(nil), **html_attrs); end

  def _call_dropdown_tabs(name:, **attrs); end
  def _call_tabs(**attrs); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#179
  def dropdown_tabs; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#183
  def dropdown_tabs?; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#179
  def tabs; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#183
  def tabs?; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#158
  def with_dropdown_tab(*args, **_arg1, &block); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#163
  def with_dropdown_tab_content(content); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#169
  def with_dropdown_tabs(collection_args = T.unsafe(nil), &block); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#158
  def with_tab(*args, **_arg1, &block); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#163
  def with_tab_content(content); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#169
  def with_tabs(collection_args = T.unsafe(nil), &block); end

  protected

  def alpine_component; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

module Lookbook::Tabs::DropdownTab; end

class Lookbook::Tabs::DropdownTab::Component < ::Lookbook::BaseComponent
  def initialize(name:, label: T.unsafe(nil), hotkey: T.unsafe(nil), disabled: T.unsafe(nil), position: T.unsafe(nil), theme: T.unsafe(nil), **html_attrs); end

  def label; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

module Lookbook::Tabs::Tab; end

class Lookbook::Tabs::Tab::Component < ::Lookbook::BaseComponent
  def initialize(name:, label: T.unsafe(nil), hotkey: T.unsafe(nil), disabled: T.unsafe(nil), position: T.unsafe(nil), theme: T.unsafe(nil), **html_attrs); end

  def label; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

class Lookbook::TagComponent < ::ViewComponent::Base
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionView::RoutingUrlFor
  include ::Lookbook::UiElementsHelper

  def initialize(tag: T.unsafe(nil), name: T.unsafe(nil), cloak: T.unsafe(nil), **html_attrs); end

  def call; end

  # source://actionpack/7.2.1.1/lib/action_dispatch/routing/url_for.rb#100
  def default_url_options; end

  # source://actionpack/7.2.1.1/lib/action_dispatch/routing/url_for.rb#100
  def default_url_options=(_arg0); end

  # source://actionpack/7.2.1.1/lib/action_dispatch/routing/url_for.rb#100
  def default_url_options?; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  class << self
    # source://actionpack/7.2.1.1/lib/action_dispatch/routing/route_set.rb#600
    def _routes; end

    # source://actionpack/7.2.1.1/lib/action_dispatch/routing/url_for.rb#100
    def default_url_options; end

    # source://actionpack/7.2.1.1/lib/action_dispatch/routing/url_for.rb#100
    def default_url_options=(value); end

    # source://actionpack/7.2.1.1/lib/action_dispatch/routing/url_for.rb#100
    def default_url_options?; end

    def escape_attribute_key; end

    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

# source://lookbook//lib/lookbook/services/tags/tag_options_parser.rb#2
class Lookbook::TagOptionsParser < ::Lookbook::Service
  # @return [TagOptionsParser] a new instance of TagOptionsParser
  #
  # source://lookbook//lib/lookbook/services/tags/tag_options_parser.rb#10
  def initialize(input, resolver_opts = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/services/tags/tag_options_parser.rb#17
  def call; end

  protected

  # source://lookbook//lib/lookbook/services/tags/tag_options_parser.rb#48
  def fallback_resolver(*args); end

  # source://lookbook//lib/lookbook/services/tags/tag_options_parser.rb#62
  def matchers; end

  # source://lookbook//lib/lookbook/services/tags/tag_options_parser.rb#52
  def parse_input(input); end

  # source://lookbook//lib/lookbook/services/tags/tag_options_parser.rb#66
  def prepare_options(options); end

  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/services/tags/tag_options_parser.rb#30
  def resolve?; end

  # source://lookbook//lib/lookbook/services/tags/tag_options_parser.rb#34
  def resolver(options_string); end
end

# source://lookbook//lib/lookbook/services/tags/tag_options_parser.rb#3
Lookbook::TagOptionsParser::RESOLVERS = T.let(T.unsafe(nil), Array)

# source://lookbook//lib/lookbook/tags/tag_provider.rb#2
class Lookbook::TagProvider < ::YARD::Tags::Tag
  class << self
    # source://lookbook//lib/lookbook/tags/tag_provider.rb#3
    def new(tag_name, text, types = T.unsafe(nil), name = T.unsafe(nil)); end
  end
end

# source://lookbook//lib/lookbook/stores/tag_store.rb#2
class Lookbook::TagStore
  # @return [TagStore] a new instance of TagStore
  #
  # source://lookbook//lib/lookbook/stores/tag_store.rb#8
  def initialize(config = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/stores/tag_store.rb#13
  def add_tag(name, opts = T.unsafe(nil), is_system = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/stores/tag_store.rb#22
  def get_tag(name); end

  # Returns the value of attribute store.
  #
  # source://lookbook//lib/lookbook/stores/tag_store.rb#5
  def store; end

  # source://lookbook//lib/lookbook/stores/tag_store.rb#6
  def to_h(*_arg0, **_arg1, &_arg2); end

  protected

  # source://lookbook//lib/lookbook/stores/tag_store.rb#36
  def build_config(name, opts = T.unsafe(nil), is_system = T.unsafe(nil)); end

  class << self
    # source://lookbook//lib/lookbook/stores/tag_store.rb#30
    def default_config; end

    # source://lookbook//lib/lookbook/stores/tag_store.rb#26
    def init_from_config; end
  end
end

# source://lookbook//lib/lookbook/stores/tag_store.rb#3
Lookbook::TagStore::CONFIG_FILE = T.let(T.unsafe(nil), String)

module Lookbook::TargetableConcern
  extend ::ActiveSupport::Concern

  def inspector_data; end
  def lookup_entities; end
  def path_segments; end
  def set_display_options; end
  def set_params; end
  def set_title; end
end

# source://lookbook//lib/lookbook/support/errors/template_error.rb#2
class Lookbook::TemplateError < ::Lookbook::Error
  # @return [TemplateError] a new instance of TemplateError
  #
  # source://lookbook//lib/lookbook/support/errors/template_error.rb#3
  def initialize(msg = T.unsafe(nil), scope: T.unsafe(nil), **kwargs); end
end

module Lookbook::TextButton; end

class Lookbook::TextButton::Component < ::Lookbook::BaseComponent
  def initialize(id: T.unsafe(nil), icon: T.unsafe(nil), tooltip: T.unsafe(nil), disabled: T.unsafe(nil), size: T.unsafe(nil), href: T.unsafe(nil), **html_attrs); end

  def disabled; end
  def href; end
  def icon; end
  def icon_size; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#179
  def icons; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#183
  def icons?; end

  def id; end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  def size; end
  def tag_name; end
  def tooltip; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#158
  def with_icon(*args, **_arg1, &block); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#163
  def with_icon_content(content); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#169
  def with_icons(collection_args = T.unsafe(nil), &block); end

  protected

  def alpine_component; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

Lookbook::TextButton::Component::ICON_SIZES = T.let(T.unsafe(nil), Hash)

# source://lookbook//lib/lookbook/theme.rb#2
class Lookbook::Theme
  # @return [Theme] a new instance of Theme
  #
  # source://lookbook//lib/lookbook/theme.rb#26
  def initialize(base_theme, overrides = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/theme.rb#40
  def favicon_dark_mode; end

  # source://lookbook//lib/lookbook/theme.rb#32
  def favicon_light_mode; end

  # source://lookbook//lib/lookbook/theme.rb#48
  def to_css; end

  class << self
    # @return [Boolean]
    #
    # source://lookbook//lib/lookbook/theme.rb#62
    def valid_theme?(name); end
  end
end

# source://lookbook//lib/lookbook/theme.rb#3
Lookbook::Theme::BASE_THEMES = T.let(T.unsafe(nil), Hash)

module Lookbook::Toolbar; end

class Lookbook::Toolbar::Component < ::Lookbook::BaseComponent
  def _call_sections(align: T.unsafe(nil), divide: T.unsafe(nil), padded: T.unsafe(nil), **attrs, &block); end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#179
  def sections; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#183
  def sections?; end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#158
  def with_section(*args, **_arg1, &block); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#163
  def with_section_content(content); end

  # source://view_component/3.9.0/lib/view_component/slotable.rb#169
  def with_sections(collection_args = T.unsafe(nil), &block); end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

Lookbook::Toolbar::Component::ALIGN_CLASSES = T.let(T.unsafe(nil), Hash)
Lookbook::Toolbar::Component::DIVIDE_CLASSES = T.let(T.unsafe(nil), Hash)

# source://lookbook//lib/lookbook/support/tree_node.rb#2
class Lookbook::TreeNode
  include ::Enumerable
  include ::Comparable

  # @return [TreeNode] a new instance of TreeNode
  #
  # source://lookbook//lib/lookbook/support/tree_node.rb#11
  def initialize(path = T.unsafe(nil), content = T.unsafe(nil), priority: T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/support/tree_node.rb#68
  def <=>(other); end

  # source://lookbook//lib/lookbook/support/tree_node.rb#42
  def add_child(name, content = T.unsafe(nil), priority: T.unsafe(nil)); end

  # Returns the value of attribute children.
  #
  # source://lookbook//lib/lookbook/support/tree_node.rb#9
  def children; end

  # Returns the value of attribute content.
  #
  # source://lookbook//lib/lookbook/support/tree_node.rb#8
  def content; end

  # Sets the attribute content
  #
  # @param value the value to set the attribute content to.
  #
  # source://lookbook//lib/lookbook/support/tree_node.rb#8
  def content=(_arg0); end

  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/support/tree_node.rb#54
  def content?; end

  # source://lookbook//lib/lookbook/support/tree_node.rb#38
  def depth; end

  # source://lookbook//lib/lookbook/support/tree_node.rb#58
  def each(&block); end

  # source://lookbook//lib/lookbook/support/tree_node.rb#50
  def get_child(name); end

  # @return [Boolean]
  #
  # source://lookbook//lib/lookbook/support/tree_node.rb#46
  def has_child?(name); end

  # source://lookbook//lib/lookbook/support/tree_node.rb#18
  def id; end

  # source://lookbook//lib/lookbook/support/tree_node.rb#26
  def label; end

  # source://activesupport/7.2.1.1/lib/active_support/delegation.rb#187
  def method_missing(method, *_arg1, **_arg2, &_arg3); end

  # source://lookbook//lib/lookbook/support/tree_node.rb#22
  def name; end

  # Returns the value of attribute path.
  #
  # source://lookbook//lib/lookbook/support/tree_node.rb#8
  def path; end

  # Sets the attribute path
  #
  # @param value the value to set the attribute path to.
  #
  # source://lookbook//lib/lookbook/support/tree_node.rb#8
  def path=(_arg0); end

  # source://lookbook//lib/lookbook/support/tree_node.rb#30
  def priority; end

  # source://lookbook//lib/lookbook/support/tree_node.rb#34
  def type; end

  protected

  # source://lookbook//lib/lookbook/support/tree_node.rb#78
  def content_value(method_name, fallback = T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/support/tree_node.rb#83
  def segments; end

  private

  # source://activesupport/7.2.1.1/lib/active_support/delegation.rb#179
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

# source://lookbook//lib/lookbook/tags/type_tag.rb#2
class Lookbook::TypeTag < ::Lookbook::YardTag
  # source://lookbook//lib/lookbook/tags/type_tag.rb#3
  def value; end
end

# Helpers for rendering UI elements.
#
# These are available for use in documentation page templates
# and custom preview inspector panel templates.
#
# @api public
#
# source://lookbook//lib/lookbook/helpers/ui_elements_helper.rb#8
module Lookbook::UiElementsHelper
  # Display a syntax-highlighted block of code.
  #
  # An alternative to using markdown code blocks for templates that have
  # markdown parsing disabled, or for when more control is required.
  #
  # @api public
  # @param language [Symbol] Which language the code is written in
  # @param opts [Hash] Options hash
  # @param block [Proc] Code block
  #
  # source://lookbook//lib/lookbook/helpers/ui_elements_helper.rb#32
  def code(language = T.unsafe(nil), **opts, &block); end

  # Render an icon.
  #
  # Lookbook uses icons from the [Lucide Icons](https://lucide.dev/) set and
  # a full list of available icon names can be found on that site.
  #
  # @api public
  # @example
  #   <%= icon :trash %>
  #   <%= icon :camera, size: 6, style: "color: red;" %>
  # @param name [Symbol, String] Name of the icon
  # @param opts [Hash] Options hash
  #
  # source://lookbook//lib/lookbook/helpers/ui_elements_helper.rb#20
  def icon(name, **opts); end

  # @api private
  #
  # source://lookbook//lib/lookbook/helpers/ui_elements_helper.rb#48
  def lookbook_render(ref, **attrs, &block); end

  # @api private
  #
  # source://lookbook//lib/lookbook/helpers/ui_elements_helper.rb#43
  def lookbook_tag(tag = T.unsafe(nil), **attrs, &block); end

  # @api private
  #
  # source://lookbook//lib/lookbook/helpers/ui_elements_helper.rb#38
  def prose(**opts, &block); end

  private

  # @api private
  #
  # source://lookbook//lib/lookbook/helpers/ui_elements_helper.rb#76
  def component_class(ref); end

  # @api private
  #
  # source://lookbook//lib/lookbook/helpers/ui_elements_helper.rb#67
  def render_method_name; end
end

# cache for constantized references
#
# @api public
#
# source://lookbook//lib/lookbook/helpers/ui_elements_helper.rb#64
Lookbook::UiElementsHelper::COMPONENT_CLASSES = T.let(T.unsafe(nil), Hash)

# source://lookbook//lib/lookbook/support/utils/utils.rb#2
module Lookbook::Utils
  class << self
    # source://lookbook//lib/lookbook/support/utils/utils.rb#4
    def id(*args); end

    # source://lookbook//lib/lookbook/support/utils/utils.rb#14
    def name(str); end

    # source://lookbook//lib/lookbook/support/utils/utils.rb#18
    def symbolize_name(str); end

    # source://lookbook//lib/lookbook/support/utils/utils.rb#10
    def temp_id(prefix: T.unsafe(nil)); end

    # source://lookbook//lib/lookbook/support/utils/utils.rb#22
    def value_or_fallback(value, fallback = T.unsafe(nil), &block); end
  end
end

# source://lookbook//lib/lookbook/version.rb#2
Lookbook::VERSION = T.let(T.unsafe(nil), String)

module Lookbook::Viewport; end

class Lookbook::Viewport::Component < ::Lookbook::BaseComponent
  def initialize(src:, resize_height: T.unsafe(nil), resize_width: T.unsafe(nil), max_height: T.unsafe(nil), iframe_id: T.unsafe(nil), **html_attrs); end

  # source://view_component/3.9.0/lib/view_component/base.rb#505
  def render_template_for(variant = T.unsafe(nil)); end

  protected

  def alpine_component; end

  class << self
    # source://view_component/3.9.0/lib/view_component/slotable.rb#19
    def registered_slots; end
  end
end

# source://lookbook//lib/lookbook/websocket.rb#2
class Lookbook::Websocket
  class << self
    # source://lookbook//lib/lookbook/websocket.rb#4
    def new(mount_path, **kwargs); end
  end
end

# source://lookbook//lib/lookbook/support/utils/where.rb#2
module Lookbook::Where
  class << self
    # Returns the value of attribute editor.
    #
    # source://lookbook//lib/lookbook/support/utils/where.rb#4
    def editor; end

    # Sets the attribute editor
    #
    # @param value the value to set the attribute editor to.
    #
    # source://lookbook//lib/lookbook/support/utils/where.rb#4
    def editor=(_arg0); end

    # source://lookbook//lib/lookbook/support/utils/where.rb#18
    def is_class(klass); end

    # source://lookbook//lib/lookbook/support/utils/where.rb#14
    def is_instance_method(klass, method_name); end

    # source://lookbook//lib/lookbook/support/utils/where.rb#10
    def is_method(klass, method_name); end

    # source://lookbook//lib/lookbook/support/utils/where.rb#6
    def is_proc(proc); end

    private

    # source://lookbook//lib/lookbook/support/utils/where.rb#40
    def defined_methods(klass); end

    # source://lookbook//lib/lookbook/support/utils/where.rb#33
    def source_location(method); end
  end
end

module Lookbook::WithPanelsConcern
  extend ::ActiveSupport::Concern
end

module Lookbook::WithPreviewControllerConcern
  extend ::ActiveSupport::Concern

  def preview_controller; end
end

# source://lookbook//lib/lookbook/services/data/parsers/yaml_parser.rb#2
class Lookbook::YamlParser < ::Lookbook::DataParser
  # source://lookbook//lib/lookbook/services/data/parsers/yaml_parser.rb#3
  def parse(input); end
end

# source://lookbook//lib/lookbook/services/data/resolvers/yaml_resolver.rb#2
class Lookbook::YamlResolver < ::Lookbook::DataResolver
  protected

  # source://lookbook//lib/lookbook/services/data/resolvers/yaml_resolver.rb#12
  def resolve(input); end

  class << self
    # @return [Boolean]
    #
    # source://lookbook//lib/lookbook/services/data/resolvers/yaml_resolver.rb#6
    def resolveable?(input); end
  end
end

# source://lookbook//lib/lookbook/services/data/resolvers/yaml_resolver.rb#3
Lookbook::YamlResolver::MATCHER = T.let(T.unsafe(nil), Regexp)

# source://lookbook//lib/lookbook/services/data/resolvers/yaml_resolver.rb#4
Lookbook::YamlResolver::MATCH_INDEX = T.let(T.unsafe(nil), Integer)

# source://lookbook//lib/lookbook/tags/yard_tag.rb#2
class Lookbook::YardTag < ::YARD::Tags::Tag
  # @return [YardTag] a new instance of YardTag
  #
  # source://lookbook//lib/lookbook/tags/yard_tag.rb#3
  def initialize(*args); end

  # source://lookbook//lib/lookbook/tags/yard_tag.rb#16
  def options; end

  # source://lookbook//lib/lookbook/tags/yard_tag.rb#12
  def text; end

  # source://lookbook//lib/lookbook/tags/yard_tag.rb#20
  def to_s; end

  # The `value` attribute should be overriden in child classes
  # to return the resolved value of the tag, where appropriate.
  # i.e. for the @hidden tag this would return boolean true/false.
  #
  # source://lookbook//lib/lookbook/tags/yard_tag.rb#12
  def value; end

  protected

  # source://lookbook//lib/lookbook/tags/yard_tag.rb#67
  def host_class_instance; end

  # source://lookbook//lib/lookbook/tags/yard_tag.rb#55
  def host_file; end

  # source://lookbook//lib/lookbook/tags/yard_tag.rb#60
  def host_file_base_directory; end

  # source://lookbook//lib/lookbook/tags/yard_tag.rb#72
  def lookup_host_class; end

  # source://lookbook//lib/lookbook/tags/yard_tag.rb#81
  def parse_options(input, resolve: T.unsafe(nil)); end

  # source://lookbook//lib/lookbook/tags/yard_tag.rb#48
  def resolve_path(path); end

  # source://lookbook//lib/lookbook/tags/yard_tag.rb#41
  def tag_parts; end

  class << self
    # source://lookbook//lib/lookbook/tags/yard_tag.rb#29
    def supports_options(value = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://lookbook//lib/lookbook/tags/yard_tag.rb#33
    def supports_options?; end
  end
end

class Redcarpet::Render::Base
  def initialize; end
end

class Redcarpet::Render::HTML < ::Redcarpet::Render::Base
  def initialize(*_arg0); end
end
