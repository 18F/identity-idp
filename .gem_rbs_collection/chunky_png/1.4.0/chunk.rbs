module ChunkyPNG
  module Chunk
    # Reads a chunk from an IO stream.
    #
    # @param io [IO, #read] The IO stream to read from.
    # @return [ChunkyPNG::Chunk::Base] The loaded chunk instance.
    def self.read: (IO io) -> ChunkyPNG::Chunk::Base

    # Reads an exact number of bytes from an IO stream.
    # @param io [IO, #read] The IO stream to read from.
    # @param length [Integer] The IO exact number of bytes to read.
    # @return [String] A binary string of exactly length bytes.
    # @raise [ChunkyPNG::ExpectationFailed] If not exactly length
    #   bytes could be read from the IO stream.
    def self.read_bytes: (IO io, Integer length) -> String

    # Verifies the CRC of a chunk.
    # @param type [String] The chunk's type.
    # @param content [String] The chunk's content.
    # @param found_crc [Integer] The chunk's found CRC value.
    # @raise [ChunkyPNG::CRCMismatch] An exception is raised if
    #   the found CRC value is not equal to the expected CRC value.
    def self.verify_crc!: (String `type`, String content, Integer found_crc) -> untyped

    # The base chunk class is the superclass for every chunk type. It contains
    # methods to write the chunk to an output stream.
    #
    # A subclass should implement the +content+ method, which gets called when
    # the chunk gets written to a PNG datastream
    #
    # @abstract
    class Base
      # The four-character type indicator for the chunk. This field is used to
      # find the correct class for a chunk when it is loaded from a PNG stream.
      # @return [String]
      attr_accessor type: untyped

      # Initializes the chunk instance.
      # @param type [String] The four character chunk type indicator.
      # @param attributes [Hash] A hash of attributes to set on this chunk.
      def initialize: (String `type`, ?Hash[untyped, untyped] attributes) -> instance

      # Writes the chunk to the IO stream, using the provided content.
      # The checksum will be calculated and appended to the stream.
      # @param io [IO] The IO stream to write to.
      # @param content [String] The content for this chunk.
      def write_with_crc: (IO io, String content) -> void

      # Writes the chunk to the IO stream.
      #
      # It will call the +content+ method to get the content for this chunk,
      # and will calculate and append the checksum automatically.
      # @param io [IO] The IO stream to write to.
      def write: (IO io) -> void
    end

    # The Generic chunk type will read the content from the chunk as it,
    # and will write it back as it was read.
    class Generic < Base
      # The attribute to store the content from the chunk, which gets
      # written by the +write+ method.
      attr_accessor content: String

      def initialize: (String `type`, ?String content) -> instance

      # Creates an instance, given the chunk's type and content.
      # @param type [String] The four character chunk type indicator.
      # @param content [String] The content read from the chunk.
      # @return [ChunkyPNG::Chunk::Generic] The new chunk instance.
      def self.read: (String `type`, String content) -> instance
    end

    # The header (IHDR) chunk is the first chunk of every PNG image, and
    # contains information about the image: i.e. its width, height, color
    # depth, color mode, compression method, filtering method and interlace
    # method.
    #
    # ChunkyPNG supports all values for these variables that are defined in the
    # PNG spec, except for color depth: Only 8-bit depth images are supported.
    # Note that it is still possible to access the chunk for such an image, but
    # ChunkyPNG will raise an exception if you try to access the pixel data.
    #
    # @see https://www.w3.org/TR/PNG/#11IHDR
    class Header < Base
      attr_accessor width: Integer

      attr_accessor height: Integer

      attr_accessor depth: Integer

      attr_accessor color: untyped

      attr_accessor compression: untyped

      attr_accessor filtering: untyped

      attr_accessor interlace: untyped

      def initialize: (?Hash[untyped, untyped] attrs) -> untyped

      # Reads the 13 bytes of content from the header chunk to set the image
      # attributes.
      # @param type [String] The four character chunk type indicator (= "IHDR").
      # @param content [String] The 13 bytes of content read from the chunk.
      # @return [ChunkyPNG::Chunk::End] The new Header chunk instance with the
      #   variables set to the values according to the content.
      def self.read: (String `type`, String content) -> ChunkyPNG::Chunk::End

      # Returns the content for this chunk when it gets written to a file, by
      # packing the image information variables into the correct format.
      # @return [String] The 13-byte content for the header chunk.
      def content: () -> String
    end

    # The End (IEND) chunk indicates the last chunk of a PNG stream. It does
    # not contain any data.
    #
    # @see https://www.w3.org/TR/PNG/#11IEND
    class End < Base
      def initialize: () -> void

      # Reads the END chunk. It will check if the content is empty.
      # @param type [String] The four character chunk type indicator (=
      #   "IEND").
      # @param content [String] The content read from the chunk. Should be
      #   empty.
      # @return [ChunkyPNG::Chunk::End] The new End chunk instance.
      # @raise [ChunkyPNG::ExpectationFailed] Raises an exception if the content was not empty.
      def self.read: (String `type`, String content) -> instance

      # Returns an empty string, because this chunk should always be empty.
      # @return [""] An empty string.
      def content: () -> ""
    end

    # The Palette (PLTE) chunk contains the image's palette, i.e. the
    # 8-bit RGB colors this image is using.
    #
    # @see https://www.w3.org/TR/PNG/#11PLTE
    # @see ChunkyPNG::Chunk::Transparency
    # @see ChunkyPNG::Palette
    class Palette < Generic
    end

    # A transparency (tRNS) chunk defines the transparency for an image.
    #
    # * For indexed images, it contains the alpha channel for the colors
    #   defined in the Palette (PLTE) chunk.
    # * For grayscale images, it contains the grayscale teint that should be
    #   considered fully transparent.
    # * For truecolor images, it contains the color that should be considered
    #   fully transparent.
    #
    # Images having a color mode that already includes an alpha channel, this
    # chunk should not be included.
    #
    # @see https://www.w3.org/TR/PNG/#11tRNS
    # @see ChunkyPNG::Chunk::Palette
    # @see ChunkyPNG::Palette
    class Transparency < Generic
      # Returns the alpha channel for the palette of an indexed image.
      #
      # This method should only be used for images having color mode
      # ChunkyPNG::COLOR_INDEXED (3).
      #
      # @return [Array<Integer>] Returns an array of alpha channel values
      #   [0-255].
      def palette_alpha_channel: () -> Array[Integer]

      # Returns the truecolor entry to be replaced by transparent pixels,
      #
      # This method should only be used for images having color mode
      # ChunkyPNG::COLOR_TRUECOLOR (2).
      #
      # @return [Integer] The color to replace with fully transparent pixels.
      def truecolor_entry: (Integer bit_depth) -> Integer

      # Returns the grayscale entry to be replaced by transparent pixels.
      #
      # This method should only be used for images having color mode
      # ChunkyPNG::COLOR_GRAYSCALE (0).
      #
      # @return [Integer] The (grayscale) color to replace with fully
      #   transparent pixels.
      def grayscale_entry: (Integer bit_depth) -> Integer
    end

    # An image data (IDAT) chunk holds (part of) the compressed image pixel data.
    #
    # The data of an image can be split over multiple chunks, which will have to be combined
    # and inflated in order to decode an image. See {{.combine_chunks}} to combine chunks
    # to decode, and {{.split_in_chunks}} for encoding a pixeldata stream into IDAT chunks.
    #
    # @see https://www.w3.org/TR/PNG/#11IDAT
    class ImageData < Generic
      # Combines the list of IDAT chunks and inflates their contents to produce the
      # pixeldata stream for the image.
      #
      # @return [String] The combined, inflated pixeldata as binary string
      def self.combine_chunks: (untyped data_chunks) -> String

      # Splits and compresses a pixeldata stream into a list of IDAT chunks.
      #
      # @param data [String] The binary string of pixeldata
      # @param level [Integer] The compression level to use.
      # @param chunk_size [Integer] The maximum size of a chunk.
      # @return Array<ChunkyPNG::Chunk::ImageData> The list of IDAT chunks.
      def self.split_in_chunks: (String data, ?Integer level, ?Integer chunk_size) -> Array[ChunkyPNG::Chunk::ImageData]
    end

    # The Text (tEXt) chunk contains keyword/value metadata about the PNG
    # stream. In this chunk, the value is stored uncompressed.
    #
    # The tEXt chunk only supports Latin-1 encoded textual data. If you need
    # UTF-8 support, check out the InternationalText chunk type.
    #
    # @see https://www.w3.org/TR/PNG/#11tEXt
    # @see ChunkyPNG::Chunk::CompressedText
    # @see ChunkyPNG::Chunk::InternationalText
    class Text < Base
      attr_accessor keyword: String

      attr_accessor value: String

      def initialize: (String keyword, String value) -> instance

      def self.read: (String `type`, String content) -> instance

      # Creates the content to write to the stream, by concatenating the
      # keyword with the value, joined by a null character.
      #
      # @return The content that should be written to the datastream.
      def content: () -> String
    end

    # The CompressedText (zTXt) chunk contains keyword/value metadata about the
    # PNG stream. In this chunk, the value is compressed using Deflate
    # compression.
    #
    # @see https://www.w3.org/TR/PNG/#11zTXt
    # @see ChunkyPNG::Chunk::CompressedText
    # @see ChunkyPNG::Chunk::InternationalText
    class CompressedText < Base
      attr_accessor keyword: String

      attr_accessor value: String

      def initialize: (String keyword, String value) -> void

      def self.read: (String `type`, String content) -> instance

      # Creates the content to write to the stream, by concatenating the
      # keyword with the deflated value, joined by a null character.
      #
      # @return The content that should be written to the datastream.
      def content: () -> String
    end

    # The Physical (pHYs) chunk specifies the intended pixel size or aspect
    # ratio for display of the image.
    #
    # @see https://www.w3.org/TR/PNG/#11pHYs
    class Physical < Base
      attr_accessor ppux: Float

      attr_accessor ppuy: Float

      attr_accessor unit: Symbol

      def initialize: (Float ppux, Float ppuy, ?Symbol unit) -> instance

      def dpix: () -> Float

      def dpiy: () -> Float

      def self.read: (String `type`, String content) -> instance

      # Assembles the content to write to the stream for this chunk.
      # @return [String] The binary content that should be written to the datastream.
      def content: () -> String

      INCHES_PER_METER: Float
    end

    # The InternationalText (iTXt) chunk contains keyword/value metadata about the PNG
    # stream, translated to a given locale.
    #
    # The metadata in this chunk can be encoded using UTF-8 characters.
    # Moreover, it is possible to define the language of the metadata, and give
    # a translation of the keyword name. Finally, it supports bot compressed
    # and uncompressed values.
    #
    # @see https://www.w3.org/TR/PNG/#11iTXt
    # @see ChunkyPNG::Chunk::Text
    # @see ChunkyPNG::Chunk::CompressedText
    class InternationalText < Base
      attr_accessor keyword: untyped

      attr_accessor text: untyped

      attr_accessor language_tag: untyped

      attr_accessor translated_keyword: untyped

      attr_accessor compressed: untyped

      attr_accessor compression: untyped

      def initialize: (String keyword, String text, ?String language_tag, ?String translated_keyword, ?untyped compressed, ?untyped compression) -> untyped

      # Reads the iTXt chunk.
      # @param type [String] The four character chunk type indicator (= "iTXt").
      # @param content [String] The content read from the chunk.
      # @return [ChunkyPNG::Chunk::InternationalText] The new End chunk instance.
      # @raise [ChunkyPNG::InvalidUTF8] If the chunk contains data that is not UTF8-encoded text.
      # @raise [ChunkyPNG::NotSupported] If the chunk refers to an unsupported compression method.
      #  Currently uncompressed data and deflate are supported.
      def self.read: (String `type`, String content) -> instance

      # Assembles the content to write to the stream for this chunk.
      # @return [String] The binary content that should be written to the datastream.
      def content: () -> String
    end

    # Maps chunk types to classes, based on the four byte chunk type indicator
    # at the beginning of a chunk.
    #
    # If a chunk type is not specified in this hash, the Generic chunk type
    # will be used.
    #
    # @see ChunkyPNG::Chunk.read
    CHUNK_TYPES: Hash[untyped, untyped]
  end
end
