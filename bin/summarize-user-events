#!/usr/bin/env ruby
# frozen_string_literal: true

Dir.chdir(__dir__) { require 'bundler/setup' }

require 'active_support'
require 'active_support/core_ext/integer/time'
require 'active_support/core_ext/object/blank'
require 'active_support/time'
require 'aws-sdk-cloudwatchlogs'
require 'concurrent-ruby'
require 'optparse'

$LOAD_PATH.unshift(File.expand_path(File.join(__dir__, '../lib')))
require 'reporting/cloudwatch_client'
require 'reporting/cloudwatch_query_quoting'

# Require all *_matcher.rb files in lib/event_summarizer
Dir[File.expand_path(
  File.join(__dir__, '../lib/event_summarizer', '**', '*_matcher.rb'),
)].sort.each do |f|
  require f
end

class SummarizeUserEvents
  attr_reader :file_name, :uuid, :from_date, :to_date, :zone

  NICE_DATE_AND_TIME_FORMAT = '%B %d, %Y at %I:%M %p %Z'
  TIME_ONLY_FORMAT = '%I:%M %p'

  def initialize(file_name: nil, user_uuid: nil, start_time: nil, end_time: nil, zone: 'UTC')
    @file_name = file_name
    Time.zone = zone
    @uuid = user_uuid
    @from_date = parse_time(start_time) || 1.week.ago
    @to_date = parse_time(end_time) || (start_time.present? ? from_date + 1.week : Time.zone.now)
  end

  def parse_time(time_str)
    Time.zone.parse(time_str)
  rescue StandardError
    nil
  end

  def matchers
    @matchers ||= [
      EventSummarizer::ExampleMatcher.new,
      EventSummarizer::IdvMatcher.new,
    ]
  end

  def run
    find_cloudwatch_events do |event|
      Time.zone ||= zone

      # Timestamps coming from cloudwatch are in UTC but don't include any zone
      # information. Here we parse them as UTC.
      if event['@timestamp'].is_a?(String)
        event['@timestamp'] = Time.zone.parse("#{event['@timestamp']} UTC")
      end
      event['@message'] = JSON.parse(event['@message']) if event['@message'].is_a?(String)

      matchers.each do |matcher|
        matcher.handle_cloudwatch_event(event)
      end
    end

    overall_results = []

    matchers.each do |matcher|
      results_for_matcher = matcher.finish
      overall_results.append(*results_for_matcher)
    end

    puts format_results(overall_results)
  end

  def format_results(results)
    # Each Hash in results should have _at least_ a :title key defined

    results.
      sort_by { |r| r[:timestamp] || r[:started_at] || Time.zone.at(0) }.
      map do |r|
        timestamp = r[:timestamp] || r[:started_at]

        heading = r[:title]

        if timestamp
          heading = "#{heading} (#{timestamp.strftime(NICE_DATE_AND_TIME_FORMAT)})"
        end

        prev_timestamp = timestamp

        list_items = r[:attributes]&.
          sort_by { |attr| attr[:timestamp] || Time.zone.at(0) }&.
          map do |attr|
            text = attr[:description]

            formatted_timestamp = format_time(attr[:timestamp], prev_timestamp)
            prev_timestamp = attr[:timestamp]

            text = "(#{formatted_timestamp}) #{text}" if formatted_timestamp

            "* #{text}"
          end

        [
          "## #{heading}",
          *list_items,
          '',
        ]
      end.join("\n")
  end

  def format_time(timestamp, prev_timestamp = nil)
    return if timestamp.blank?

    same_date = timestamp.to_date == prev_timestamp&.to_date

    if same_date
      timestamp.strftime(TIME_ONLY_FORMAT)
    else
      timestamp.strftime(NICE_DATE_AND_TIME_FORMAT)
    end
  end

  def query
    format(<<~QUERY)
      fields
          name
        , properties.event_properties.success as success
        , @message
        , @timestamp
      | filter properties.user_id = '#{uuid}'
      | sort @timestamp asc
      | limit 10000
    QUERY
  end

  def cloudwatch_client
    @cloudwatch_client ||= Reporting::CloudwatchClient.new(
      num_threads: 5,
      ensure_complete_logs: true,
      log_group_name: 'prod_/srv/idp/shared/log/events.log',
    )
  end

  def find_cloudwatch_events(&block)
    unless file_name.nil?
      warn 'Reading Cloudwatch events as newline-delimited JSON (ndjson) a file'
      file_source(&block)
    else 
      cloudwatch_source(&block)
    end
  end

  def file_source(&block)
    events = []

    File.read(file_name).each_line do |line|
      next if line.blank?
      events << JSON.parse(line)
    end

    events.sort_by! { |e| e['@timestamp'] }

    events.each do |e|
      block.call(e)
    end
  end

  def cloudwatch_source(&block)
    cloudwatch_client.fetch(
      query: query,
      from: from_date,
      to: to_date,
      &block
    )
  end
end

def main
  options = {}
  basename = File.basename($0)

  # rubocop:disable Metrics/LineLength
  optparse = OptionParser.new do |opts|
    opts.banner = <<-EOM

    Summarize user events in a human-readable format

    Cloudwatch logs can be read from stdin as newline-delimited JSON (ndjson),
    or fetched directly via aws-vault.

    usage: #{basename} [OPTIONS]

    Examples:
      #{basename} << events.ndjson
      aws-vault exec prod-power -- #{basename} -u 1234-5678-90ab-cdef -s 2024-12-09T10:00:00 -e 2024-12-09T14:30:00 -z America/New_York

    EOM

    opts.on('-f', '--file_name FILE_NAME', 'filename from which to read the events') do |val|
      options[:file_name] = val
    end

    opts.on('-h', '--help', 'Display this message') do
      warn opts
      exit
    end

    opts.on('-u', '--user-uuid USER_UUID', 'UUID of the protagonist of the story') do |val|
      options[:user_uuid] = val
    end

    opts.on('-s', '--start-time START_TIME', 'Time of the start of the query period (e.g. 2024-12-09T10:00:00Z), default: 1 week ago') do |val|
      options[:start_time] = val
    end

    opts.on('-e', '--end-time END_TIME', 'Time of the end of the query period (e.g. 2024-12-09T14:30:00Z), default: 1 week from start') do |val|
      options[:end_time] = val
    end

    opts.on('-z', '--timezone TIMEZONE', 'Timezone to use (e.g. America/New_York), default: UTC') do |val|
      options[:zone] = val
    end
  end
  # rubocop:enable Metrics/LineLength

  optparse.parse!

  SummarizeUserEvents.new(**options).run
end

if $PROGRAM_NAME == __FILE__
  main
end
