# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `zxcvbn` gem.
# Please instead update this file by running `bin/tapioca gem zxcvbn`.


# generated by scripts/build_keyboard_adjacency_graphs.py
#
# source://zxcvbn//lib/zxcvbn/adjacency_graphs.rb#4
module Zxcvbn
  class << self
    # source://zxcvbn//lib/zxcvbn/frequency_lists.rb#10
    def file_enumerator(filename); end

    # source://zxcvbn//lib/zxcvbn/frequency_lists.rb#4
    def frequency_lists; end

    # source://zxcvbn//lib/zxcvbn.rb#39
    def test(password, user_inputs = T.unsafe(nil)); end

    # source://zxcvbn//lib/zxcvbn.rb#26
    def zxcvbn(password, user_inputs = T.unsafe(nil)); end
  end
end

# source://zxcvbn//lib/zxcvbn/adjacency_graphs.rb#7
Zxcvbn::ADJACENCY_GRAPHS = T.let(T.unsafe(nil), Hash)

# source://zxcvbn//lib/zxcvbn.rb#12
class Zxcvbn::Error < ::StandardError; end

# source://zxcvbn//lib/zxcvbn/feedback.rb#4
module Zxcvbn::Feedback
  class << self
    # source://zxcvbn//lib/zxcvbn/feedback.rb#84
    def get_dictionary_match_feedback(match, is_sole_match); end

    # source://zxcvbn//lib/zxcvbn/feedback.rb#10
    def get_feedback(score, sequence); end

    # source://zxcvbn//lib/zxcvbn/feedback.rb#39
    def get_match_feedback(match, is_sole_match); end
  end
end

# source://zxcvbn//lib/zxcvbn/feedback.rb#5
Zxcvbn::Feedback::DEFAULT_FEEDBACK = T.let(T.unsafe(nil), Hash)

# source://zxcvbn//lib/zxcvbn/matching.rb#4
module Zxcvbn::Matching
  class << self
    # source://zxcvbn//lib/zxcvbn/matching.rb#5
    def build_ranked_dict(ordered_list); end

    # source://zxcvbn//lib/zxcvbn/matching.rb#199
    def build_user_input_dictionary(user_inputs_or_dict); end

    # source://zxcvbn//lib/zxcvbn/matching.rb#158
    def check_dictionary(matches, password, dictionary_name, ranked_dict); end

    # -------------------------------------------------------------------------------
    # date matching ----------------------------------------------------------------
    # -------------------------------------------------------------------------------
    #
    # source://zxcvbn//lib/zxcvbn/matching.rb#559
    def date_match(password); end

    # -------------------------------------------------------------------------------
    # dictionary match (common passwords, english, last names, etc) ----------------
    # -------------------------------------------------------------------------------
    #
    # source://zxcvbn//lib/zxcvbn/matching.rb#148
    def dictionary_match(password, user_dict, _ranked_dictionaries = T.unsafe(nil)); end

    # returns the list of possible 1337 replacement dictionaries for a given password
    #
    # source://zxcvbn//lib/zxcvbn/matching.rb#231
    def enumerate_l33t_subs(table); end

    # source://zxcvbn//lib/zxcvbn/matching.rb#296
    def l33t_match(password, user_dict, _ranked_dictionaries = T.unsafe(nil), _l33t_table = T.unsafe(nil)); end

    # source://zxcvbn//lib/zxcvbn/matching.rb#725
    def map_ints_to_dm(ints); end

    # source://zxcvbn//lib/zxcvbn/matching.rb#665
    def map_ints_to_dmy(ints); end

    # ------------------------------------------------------------------------------
    # omnimatch -- combine everything ----------------------------------------------
    # ------------------------------------------------------------------------------
    #
    # source://zxcvbn//lib/zxcvbn/matching.rb#131
    def omnimatch(password, user_inputs = T.unsafe(nil)); end

    # -------------------------------------------------------------------------------
    # regex matching ---------------------------------------------------------------
    # -------------------------------------------------------------------------------
    #
    # source://zxcvbn//lib/zxcvbn/matching.rb#535
    def regex_match(password, _regexen = T.unsafe(nil)); end

    # -------------------------------------------------------------------------------
    # dictionary match with common l33t substitutions ------------------------------
    # -------------------------------------------------------------------------------
    # makes a pruned copy of l33t_table that only includes password's possible substitutions
    #
    # source://zxcvbn//lib/zxcvbn/matching.rb#214
    def relevant_l33t_subtable(password, table); end

    # -------------------------------------------------------------------------------
    # repeats (aaa, abcabcabc) and sequences (abcdef) ------------------------------
    # -------------------------------------------------------------------------------
    #
    # source://zxcvbn//lib/zxcvbn/matching.rb#412
    def repeat_match(password, user_dict); end

    # source://zxcvbn//lib/zxcvbn/matching.rb#187
    def reverse_dictionary_match(password, user_dict, _ranked_dictionaries = T.unsafe(nil)); end

    # source://zxcvbn//lib/zxcvbn/matching.rb#465
    def sequence_match(password); end

    # source://zxcvbn//lib/zxcvbn/matching.rb#123
    def sorted(matches); end

    # ------------------------------------------------------------------------------
    # spatial match (qwerty/dvorak/keypad) -----------------------------------------
    # ------------------------------------------------------------------------------
    #
    # source://zxcvbn//lib/zxcvbn/matching.rb#330
    def spatial_match(password, _graphs = T.unsafe(nil)); end

    # source://zxcvbn//lib/zxcvbn/matching.rb#340
    def spatial_match_helper(password, graph, graph_name); end

    # source://zxcvbn//lib/zxcvbn/matching.rb#119
    def translate(string, chr_map); end

    # source://zxcvbn//lib/zxcvbn/matching.rb#737
    def two_to_four_digit_year(year); end
  end
end

# source://zxcvbn//lib/zxcvbn/matching.rb#50
Zxcvbn::Matching::DATE_MAX_YEAR = T.let(T.unsafe(nil), Integer)

# source://zxcvbn//lib/zxcvbn/matching.rb#52
Zxcvbn::Matching::DATE_MIN_YEAR = T.let(T.unsafe(nil), Integer)

# source://zxcvbn//lib/zxcvbn/matching.rb#54
Zxcvbn::Matching::DATE_SPLITS = T.let(T.unsafe(nil), Hash)

# source://zxcvbn//lib/zxcvbn/matching.rb#22
Zxcvbn::Matching::GRAPHS = T.let(T.unsafe(nil), Hash)

# source://zxcvbn//lib/zxcvbn/matching.rb#29
Zxcvbn::Matching::L33T_TABLE = T.let(T.unsafe(nil), Hash)

# source://zxcvbn//lib/zxcvbn/matching.rb#463
Zxcvbn::Matching::MAX_DELTA = T.let(T.unsafe(nil), Integer)

# source://zxcvbn//lib/zxcvbn/matching.rb#14
Zxcvbn::Matching::RANKED_DICTIONARIES = T.let(T.unsafe(nil), Hash)

# source://zxcvbn//lib/zxcvbn/matching.rb#18
Zxcvbn::Matching::RANKED_DICTIONARIES_MAX_WORD_SIZE = T.let(T.unsafe(nil), Hash)

# source://zxcvbn//lib/zxcvbn/matching.rb#44
Zxcvbn::Matching::REGEXEN = T.let(T.unsafe(nil), Hash)

# source://zxcvbn//lib/zxcvbn/matching.rb#338
Zxcvbn::Matching::SHIFTED_RX = T.let(T.unsafe(nil), Regexp)

# source://zxcvbn//lib/zxcvbn.rb#13
class Zxcvbn::Result < ::Struct
  # Returns the value of attribute calc_time
  #
  # @return [Object] the current value of calc_time
  def calc_time; end

  # Sets the attribute calc_time
  #
  # @param value [Object] the value to set the attribute calc_time to.
  # @return [Object] the newly set value
  def calc_time=(_); end

  # Returns the value of attribute crack_times_display
  #
  # @return [Object] the current value of crack_times_display
  def crack_times_display; end

  # Sets the attribute crack_times_display
  #
  # @param value [Object] the value to set the attribute crack_times_display to.
  # @return [Object] the newly set value
  def crack_times_display=(_); end

  # Returns the value of attribute crack_times_seconds
  #
  # @return [Object] the current value of crack_times_seconds
  def crack_times_seconds; end

  # Sets the attribute crack_times_seconds
  #
  # @param value [Object] the value to set the attribute crack_times_seconds to.
  # @return [Object] the newly set value
  def crack_times_seconds=(_); end

  # Returns the value of attribute feedback
  #
  # @return [Object] the current value of feedback
  def feedback; end

  # Sets the attribute feedback
  #
  # @param value [Object] the value to set the attribute feedback to.
  # @return [Object] the newly set value
  def feedback=(_); end

  # Returns the value of attribute guesses
  #
  # @return [Object] the current value of guesses
  def guesses; end

  # Sets the attribute guesses
  #
  # @param value [Object] the value to set the attribute guesses to.
  # @return [Object] the newly set value
  def guesses=(_); end

  # Returns the value of attribute guesses_log10
  #
  # @return [Object] the current value of guesses_log10
  def guesses_log10; end

  # Sets the attribute guesses_log10
  #
  # @param value [Object] the value to set the attribute guesses_log10 to.
  # @return [Object] the newly set value
  def guesses_log10=(_); end

  # Returns the value of attribute password
  #
  # @return [Object] the current value of password
  def password; end

  # Sets the attribute password
  #
  # @param value [Object] the value to set the attribute password to.
  # @return [Object] the newly set value
  def password=(_); end

  # Returns the value of attribute score
  #
  # @return [Object] the current value of score
  def score; end

  # Sets the attribute score
  #
  # @param value [Object] the value to set the attribute score to.
  # @return [Object] the newly set value
  def score=(_); end

  # Returns the value of attribute sequence
  #
  # @return [Object] the current value of sequence
  def sequence; end

  # Sets the attribute sequence
  #
  # @param value [Object] the value to set the attribute sequence to.
  # @return [Object] the newly set value
  def sequence=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://zxcvbn//lib/zxcvbn/scoring.rb#4
module Zxcvbn::Scoring
  class << self
    # source://zxcvbn//lib/zxcvbn/scoring.rb#248
    def bruteforce_guesses(match); end

    # on qwerty, 'g' has degree 6, being adjacent to 'ftyhbv'. '\' has degree 1.
    # this calculates the average over all keys.
    #
    # source://zxcvbn//lib/zxcvbn/scoring.rb#7
    def calc_average_degree(graph); end

    # source://zxcvbn//lib/zxcvbn/scoring.rb#311
    def date_guesses(match); end

    # source://zxcvbn//lib/zxcvbn/scoring.rb#366
    def dictionary_guesses(match); end

    # ------------------------------------------------------------------------------
    # guess estimation -- one function per match pattern ---------------------------
    # ------------------------------------------------------------------------------
    #
    # source://zxcvbn//lib/zxcvbn/scoring.rb#218
    def estimate_guesses(match, password); end

    # source://zxcvbn//lib/zxcvbn/scoring.rb#38
    def factorial(n); end

    # source://zxcvbn//lib/zxcvbn/scoring.rb#401
    def l33t_variations(match); end

    # ------------------------------------------------------------------------------
    #
    # source://zxcvbn//lib/zxcvbn/scoring.rb#77
    def most_guessable_match_sequence(password, matches, _exclude_additive: T.unsafe(nil)); end

    # source://zxcvbn//lib/zxcvbn/scoring.rb#24
    def nck(n, k); end

    # source://zxcvbn//lib/zxcvbn/scoring.rb#291
    def regex_guesses(match); end

    # source://zxcvbn//lib/zxcvbn/scoring.rb#264
    def repeat_guesses(match); end

    # source://zxcvbn//lib/zxcvbn/scoring.rb#268
    def sequence_guesses(match); end

    # source://zxcvbn//lib/zxcvbn/scoring.rb#330
    def spatial_guesses(match); end

    # source://zxcvbn//lib/zxcvbn/scoring.rb#379
    def uppercase_variations(match); end
  end
end

# source://zxcvbn//lib/zxcvbn/scoring.rb#377
Zxcvbn::Scoring::ALL_LOWER = T.let(T.unsafe(nil), Regexp)

# source://zxcvbn//lib/zxcvbn/scoring.rb#376
Zxcvbn::Scoring::ALL_UPPER = T.let(T.unsafe(nil), Regexp)

# source://zxcvbn//lib/zxcvbn/scoring.rb#16
Zxcvbn::Scoring::BRUTEFORCE_CARDINALITY = T.let(T.unsafe(nil), Integer)

# source://zxcvbn//lib/zxcvbn/scoring.rb#375
Zxcvbn::Scoring::END_UPPER = T.let(T.unsafe(nil), Regexp)

# source://zxcvbn//lib/zxcvbn/scoring.rb#323
Zxcvbn::Scoring::KEYBOARD_AVERAGE_DEGREE = T.let(T.unsafe(nil), Float)

# source://zxcvbn//lib/zxcvbn/scoring.rb#327
Zxcvbn::Scoring::KEYBOARD_STARTING_POSITIONS = T.let(T.unsafe(nil), Integer)

# slightly different for keypad/mac keypad, but close enough
#
# source://zxcvbn//lib/zxcvbn/scoring.rb#325
Zxcvbn::Scoring::KEYPAD_AVERAGE_DEGREE = T.let(T.unsafe(nil), Float)

# source://zxcvbn//lib/zxcvbn/scoring.rb#328
Zxcvbn::Scoring::KEYPAD_STARTING_POSITIONS = T.let(T.unsafe(nil), Integer)

# source://zxcvbn//lib/zxcvbn/scoring.rb#246
Zxcvbn::Scoring::MAX_VALUE = T.let(T.unsafe(nil), Integer)

# source://zxcvbn//lib/zxcvbn/scoring.rb#18
Zxcvbn::Scoring::MIN_GUESSES_BEFORE_GROWING_SEQUENCE = T.let(T.unsafe(nil), Integer)

# source://zxcvbn//lib/zxcvbn/scoring.rb#22
Zxcvbn::Scoring::MIN_SUBMATCH_GUESSES_MULTI_CHAR = T.let(T.unsafe(nil), Integer)

# source://zxcvbn//lib/zxcvbn/scoring.rb#20
Zxcvbn::Scoring::MIN_SUBMATCH_GUESSES_SINGLE_CHAR = T.let(T.unsafe(nil), Integer)

# source://zxcvbn//lib/zxcvbn/scoring.rb#288
Zxcvbn::Scoring::MIN_YEAR_SPACE = T.let(T.unsafe(nil), Integer)

# source://zxcvbn//lib/zxcvbn/scoring.rb#289
Zxcvbn::Scoring::REFERENCE_YEAR = T.let(T.unsafe(nil), Integer)

# source://zxcvbn//lib/zxcvbn/scoring.rb#374
Zxcvbn::Scoring::START_UPPER = T.let(T.unsafe(nil), Regexp)

# source://zxcvbn//lib/zxcvbn.rb#43
class Zxcvbn::Tester
  # source://zxcvbn//lib/zxcvbn.rb#44
  def test(password, user_inputs = T.unsafe(nil)); end
end

# source://zxcvbn//lib/zxcvbn/time_estimates.rb#4
module Zxcvbn::TimeEstimates
  class << self
    # source://zxcvbn//lib/zxcvbn/time_estimates.rb#45
    def display_time(seconds); end

    # source://zxcvbn//lib/zxcvbn/time_estimates.rb#5
    def estimate_attack_times(guesses); end

    # source://zxcvbn//lib/zxcvbn/time_estimates.rb#24
    def guesses_to_score(guesses); end
  end
end

# source://zxcvbn//lib/zxcvbn/version.rb#4
Zxcvbn::VERSION = T.let(T.unsafe(nil), String)
