# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `ServiceProvider`.
# Please instead update this file by running `bin/tapioca dsl ServiceProvider`.


class ServiceProvider
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ServiceProvider).void)
      ).returns(::ServiceProvider)
    end
    def new(attributes = nil, &block); end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::ServiceProvider).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::ServiceProvider).void)).returns(::ServiceProvider) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::ServiceProvider).void)
      ).returns(T::Array[::ServiceProvider])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ServiceProvider).void)
      ).returns(::ServiceProvider)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::ServiceProvider).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::ServiceProvider).void)).returns(::ServiceProvider) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::ServiceProvider).void)
      ).returns(T::Array[::ServiceProvider])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ServiceProvider).void)
      ).returns(::ServiceProvider)
    end
    def create(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::ServiceProvider).void)).returns(::ServiceProvider) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::ServiceProvider).void)
      ).returns(T::Array[::ServiceProvider])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ServiceProvider).void)
      ).returns(::ServiceProvider)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::ServiceProvider).void)
      ).returns(T::Array[::ServiceProvider])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ServiceProvider).void)
      ).returns(::ServiceProvider)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::ServiceProvider).void)
      ).returns(T::Array[::ServiceProvider])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ServiceProvider).void)
      ).returns(::ServiceProvider)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::ServiceProvider]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::ServiceProvider)) }
    def fifth; end

    sig { returns(::ServiceProvider) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::ServiceProvider)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::ServiceProvider])
    end
    sig do
      params(
        args: NilClass,
        block: T.proc.params(object: ::ServiceProvider).void
      ).returns(T.nilable(::ServiceProvider))
    end
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::ServiceProvider)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::ServiceProvider) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::ServiceProvider).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::ServiceProvider])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::ServiceProvider]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::ServiceProvider]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::ServiceProvider).void)
      ).returns(T::Array[::ServiceProvider])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ServiceProvider).void)
      ).returns(::ServiceProvider)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::ServiceProvider).void)
      ).returns(T::Array[::ServiceProvider])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ServiceProvider).void)
      ).returns(::ServiceProvider)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::ServiceProvider).void)
      ).returns(T::Array[::ServiceProvider])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ServiceProvider).void)
      ).returns(::ServiceProvider)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::ServiceProvider)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::ServiceProvider) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::ServiceProvider) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::ServiceProvider)) }
    sig { params(limit: Integer).returns(T::Array[::ServiceProvider]) }
    def first(limit = nil); end

    sig { returns(::ServiceProvider) }
    def first!; end

    sig { returns(T.nilable(::ServiceProvider)) }
    def forty_two; end

    sig { returns(::ServiceProvider) }
    def forty_two!; end

    sig { returns(T.nilable(::ServiceProvider)) }
    def fourth; end

    sig { returns(::ServiceProvider) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::ServiceProvider)) }
    sig { params(limit: Integer).returns(T::Array[::ServiceProvider]) }
    def last(limit = nil); end

    sig { returns(::ServiceProvider) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::ServiceProvider).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::ServiceProvider).void)).returns(::ServiceProvider) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::ServiceProvider).void)
      ).returns(T::Array[::ServiceProvider])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ServiceProvider).void)
      ).returns(::ServiceProvider)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::ServiceProvider).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::ServiceProvider).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::ServiceProvider)) }
    def second; end

    sig { returns(::ServiceProvider) }
    def second!; end

    sig { returns(T.nilable(::ServiceProvider)) }
    def second_to_last; end

    sig { returns(::ServiceProvider) }
    def second_to_last!; end

    sig { returns(::ServiceProvider) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::ServiceProvider).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::ServiceProvider)) }
    sig { params(limit: Integer).returns(T::Array[::ServiceProvider]) }
    def take(limit = nil); end

    sig { returns(::ServiceProvider) }
    def take!; end

    sig { returns(T.nilable(::ServiceProvider)) }
    def third; end

    sig { returns(::ServiceProvider) }
    def third!; end

    sig { returns(T.nilable(::ServiceProvider)) }
    def third_to_last; end

    sig { returns(::ServiceProvider) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::Agency)) }
    def agency; end

    sig { params(value: T.nilable(::Agency)).void }
    def agency=(value); end

    sig { returns(T::Boolean) }
    def agency_changed?; end

    sig { returns(T::Boolean) }
    def agency_previously_changed?; end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Agency) }
    def build_agency(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Agreements::Integration) }
    def build_integration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Agency) }
    def create_agency(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Agency) }
    def create_agency!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Agreements::Integration) }
    def create_integration(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Agreements::Integration) }
    def create_integration!(*args, &blk); end

    # This method is created by ActiveRecord on the `ServiceProvider` class because it declared `has_many :identities`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ServiceProviderIdentity::PrivateCollectionProxy) }
    def identities; end

    sig { params(value: T::Enumerable[::ServiceProviderIdentity]).void }
    def identities=(value); end

    sig { returns(T::Array[T.untyped]) }
    def identity_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def identity_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def in_person_enrollment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def in_person_enrollment_ids=(ids); end

    # This method is created by ActiveRecord on the `ServiceProvider` class because it declared `has_many :in_person_enrollments`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::InPersonEnrollment::PrivateCollectionProxy) }
    def in_person_enrollments; end

    sig { params(value: T::Enumerable[::InPersonEnrollment]).void }
    def in_person_enrollments=(value); end

    sig { returns(T.nilable(::Agreements::Integration)) }
    def integration; end

    sig { params(value: T.nilable(::Agreements::Integration)).void }
    def integration=(value); end

    sig { returns(T.nilable(::Agency)) }
    def reload_agency; end

    sig { returns(T.nilable(::Agreements::Integration)) }
    def reload_integration; end

    sig { void }
    def reset_agency; end

    sig { void }
    def reset_integration; end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def external(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def internal(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_push_notification_urls(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::String)) }
    def acs_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def acs_url=(value); end

    sig { returns(T::Boolean) }
    def acs_url?; end

    sig { returns(T.nilable(::String)) }
    def acs_url_before_last_save; end

    sig { returns(T.untyped) }
    def acs_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def acs_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def acs_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def acs_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def acs_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def acs_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def acs_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def acs_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def acs_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def acs_url_was; end

    sig { void }
    def acs_url_will_change!; end

    sig { returns(T::Boolean) }
    def active; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def active=(value); end

    sig { returns(T::Boolean) }
    def active?; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_before_last_save; end

    sig { returns(T.untyped) }
    def active_before_type_cast; end

    sig { returns(T::Boolean) }
    def active_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def active_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def active_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def active_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def active_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def active_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def active_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def active_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_was; end

    sig { void }
    def active_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def agency_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def agency_id=(value); end

    sig { returns(T::Boolean) }
    def agency_id?; end

    sig { returns(T.nilable(::Integer)) }
    def agency_id_before_last_save; end

    sig { returns(T.untyped) }
    def agency_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def agency_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def agency_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def agency_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def agency_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def agency_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def agency_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def agency_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def agency_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def agency_id_was; end

    sig { void }
    def agency_id_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def allow_prompt_login; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def allow_prompt_login=(value); end

    sig { returns(T::Boolean) }
    def allow_prompt_login?; end

    sig { returns(T.nilable(T::Boolean)) }
    def allow_prompt_login_before_last_save; end

    sig { returns(T.untyped) }
    def allow_prompt_login_before_type_cast; end

    sig { returns(T::Boolean) }
    def allow_prompt_login_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def allow_prompt_login_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def allow_prompt_login_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def allow_prompt_login_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def allow_prompt_login_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def allow_prompt_login_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def allow_prompt_login_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def allow_prompt_login_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def allow_prompt_login_was; end

    sig { void }
    def allow_prompt_login_will_change!; end

    sig { returns(T.nilable(::String)) }
    def app_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def app_id=(value); end

    sig { returns(T::Boolean) }
    def app_id?; end

    sig { returns(T.nilable(::String)) }
    def app_id_before_last_save; end

    sig { returns(T.untyped) }
    def app_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def app_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def app_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def app_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def app_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def app_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def app_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def app_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def app_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def app_id_was; end

    sig { void }
    def app_id_will_change!; end

    sig { returns(T::Boolean) }
    def approved; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def approved=(value); end

    sig { returns(T::Boolean) }
    def approved?; end

    sig { returns(T.nilable(T::Boolean)) }
    def approved_before_last_save; end

    sig { returns(T.untyped) }
    def approved_before_type_cast; end

    sig { returns(T::Boolean) }
    def approved_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def approved_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def approved_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def approved_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def approved_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def approved_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def approved_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def approved_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def approved_was; end

    sig { void }
    def approved_will_change!; end

    sig { returns(T.nilable(::String)) }
    def assertion_consumer_logout_service_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def assertion_consumer_logout_service_url=(value); end

    sig { returns(T::Boolean) }
    def assertion_consumer_logout_service_url?; end

    sig { returns(T.nilable(::String)) }
    def assertion_consumer_logout_service_url_before_last_save; end

    sig { returns(T.untyped) }
    def assertion_consumer_logout_service_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def assertion_consumer_logout_service_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def assertion_consumer_logout_service_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def assertion_consumer_logout_service_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def assertion_consumer_logout_service_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def assertion_consumer_logout_service_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def assertion_consumer_logout_service_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def assertion_consumer_logout_service_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def assertion_consumer_logout_service_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def assertion_consumer_logout_service_url_was; end

    sig { void }
    def assertion_consumer_logout_service_url_will_change!; end

    sig { returns(T.untyped) }
    def attribute_bundle; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def attribute_bundle=(value); end

    sig { returns(T::Boolean) }
    def attribute_bundle?; end

    sig { returns(T.untyped) }
    def attribute_bundle_before_last_save; end

    sig { returns(T.untyped) }
    def attribute_bundle_before_type_cast; end

    sig { returns(T::Boolean) }
    def attribute_bundle_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def attribute_bundle_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def attribute_bundle_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def attribute_bundle_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def attribute_bundle_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def attribute_bundle_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def attribute_bundle_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def attribute_bundle_previously_was; end

    sig { returns(T.untyped) }
    def attribute_bundle_was; end

    sig { void }
    def attribute_bundle_will_change!; end

    sig { returns(::String) }
    def block_encryption; end

    sig { params(value: ::String).returns(::String) }
    def block_encryption=(value); end

    sig { returns(T::Boolean) }
    def block_encryption?; end

    sig { returns(T.nilable(::String)) }
    def block_encryption_before_last_save; end

    sig { returns(T.untyped) }
    def block_encryption_before_type_cast; end

    sig { returns(T::Boolean) }
    def block_encryption_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def block_encryption_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def block_encryption_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def block_encryption_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def block_encryption_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def block_encryption_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def block_encryption_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def block_encryption_previously_was; end

    sig { returns(T.nilable(::String)) }
    def block_encryption_was; end

    sig { void }
    def block_encryption_will_change!; end

    sig { returns(T.nilable(T::Array[::String])) }
    def certs; end

    sig { params(value: T.nilable(T::Array[::String])).returns(T.nilable(T::Array[::String])) }
    def certs=(value); end

    sig { returns(T::Boolean) }
    def certs?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def certs_before_last_save; end

    sig { returns(T.untyped) }
    def certs_before_type_cast; end

    sig { returns(T::Boolean) }
    def certs_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Array[::String]), T.nilable(T::Array[::String])])) }
    def certs_change; end

    sig { returns(T.nilable([T.nilable(T::Array[::String]), T.nilable(T::Array[::String])])) }
    def certs_change_to_be_saved; end

    sig { params(from: T.nilable(T::Array[::String]), to: T.nilable(T::Array[::String])).returns(T::Boolean) }
    def certs_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Array[::String])) }
    def certs_in_database; end

    sig { returns(T.nilable([T.nilable(T::Array[::String]), T.nilable(T::Array[::String])])) }
    def certs_previous_change; end

    sig { params(from: T.nilable(T::Array[::String]), to: T.nilable(T::Array[::String])).returns(T::Boolean) }
    def certs_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Array[::String])) }
    def certs_previously_was; end

    sig { returns(T.nilable(T::Array[::String])) }
    def certs_was; end

    sig { void }
    def certs_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def default_aal; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def default_aal=(value); end

    sig { returns(T::Boolean) }
    def default_aal?; end

    sig { returns(T.nilable(::Integer)) }
    def default_aal_before_last_save; end

    sig { returns(T.untyped) }
    def default_aal_before_type_cast; end

    sig { returns(T::Boolean) }
    def default_aal_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def default_aal_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def default_aal_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def default_aal_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def default_aal_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def default_aal_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def default_aal_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def default_aal_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def default_aal_was; end

    sig { void }
    def default_aal_will_change!; end

    sig { returns(T.nilable(::String)) }
    def description; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def description=(value); end

    sig { returns(T::Boolean) }
    def description?; end

    sig { returns(T.nilable(::String)) }
    def description_before_last_save; end

    sig { returns(T.untyped) }
    def description_before_type_cast; end

    sig { returns(T::Boolean) }
    def description_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def description_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def description_previously_was; end

    sig { returns(T.nilable(::String)) }
    def description_was; end

    sig { void }
    def description_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def email_nameid_format_allowed; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def email_nameid_format_allowed=(value); end

    sig { returns(T::Boolean) }
    def email_nameid_format_allowed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def email_nameid_format_allowed_before_last_save; end

    sig { returns(T.untyped) }
    def email_nameid_format_allowed_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_nameid_format_allowed_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def email_nameid_format_allowed_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def email_nameid_format_allowed_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def email_nameid_format_allowed_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def email_nameid_format_allowed_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def email_nameid_format_allowed_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def email_nameid_format_allowed_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def email_nameid_format_allowed_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def email_nameid_format_allowed_was; end

    sig { void }
    def email_nameid_format_allowed_will_change!; end

    sig { returns(T.nilable(::String)) }
    def failure_to_proof_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def failure_to_proof_url=(value); end

    sig { returns(T::Boolean) }
    def failure_to_proof_url?; end

    sig { returns(T.nilable(::String)) }
    def failure_to_proof_url_before_last_save; end

    sig { returns(T.untyped) }
    def failure_to_proof_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def failure_to_proof_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def failure_to_proof_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def failure_to_proof_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def failure_to_proof_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def failure_to_proof_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def failure_to_proof_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def failure_to_proof_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def failure_to_proof_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def failure_to_proof_url_was; end

    sig { void }
    def failure_to_proof_url_will_change!; end

    sig { returns(T.nilable(::String)) }
    def friendly_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def friendly_name=(value); end

    sig { returns(T::Boolean) }
    def friendly_name?; end

    sig { returns(T.nilable(::String)) }
    def friendly_name_before_last_save; end

    sig { returns(T.untyped) }
    def friendly_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def friendly_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def friendly_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def friendly_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def friendly_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def friendly_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def friendly_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def friendly_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def friendly_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def friendly_name_was; end

    sig { void }
    def friendly_name_will_change!; end

    sig { returns(T.untyped) }
    def help_text; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def help_text=(value); end

    sig { returns(T::Boolean) }
    def help_text?; end

    sig { returns(T.untyped) }
    def help_text_before_last_save; end

    sig { returns(T.untyped) }
    def help_text_before_type_cast; end

    sig { returns(T::Boolean) }
    def help_text_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def help_text_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def help_text_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def help_text_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def help_text_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def help_text_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def help_text_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def help_text_previously_was; end

    sig { returns(T.untyped) }
    def help_text_was; end

    sig { void }
    def help_text_will_change!; end

    sig { returns(T.nilable(::String)) }
    def iaa; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def iaa=(value); end

    sig { returns(T::Boolean) }
    def iaa?; end

    sig { returns(T.nilable(::String)) }
    def iaa_before_last_save; end

    sig { returns(T.untyped) }
    def iaa_before_type_cast; end

    sig { returns(T::Boolean) }
    def iaa_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def iaa_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def iaa_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def iaa_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def iaa_end_date; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def iaa_end_date=(value); end

    sig { returns(T::Boolean) }
    def iaa_end_date?; end

    sig { returns(T.nilable(::Date)) }
    def iaa_end_date_before_last_save; end

    sig { returns(T.untyped) }
    def iaa_end_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def iaa_end_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def iaa_end_date_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def iaa_end_date_change_to_be_saved; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def iaa_end_date_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def iaa_end_date_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def iaa_end_date_previous_change; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def iaa_end_date_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def iaa_end_date_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def iaa_end_date_was; end

    sig { void }
    def iaa_end_date_will_change!; end

    sig { returns(T.nilable(::String)) }
    def iaa_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def iaa_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def iaa_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def iaa_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def iaa_start_date; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def iaa_start_date=(value); end

    sig { returns(T::Boolean) }
    def iaa_start_date?; end

    sig { returns(T.nilable(::Date)) }
    def iaa_start_date_before_last_save; end

    sig { returns(T.untyped) }
    def iaa_start_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def iaa_start_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def iaa_start_date_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def iaa_start_date_change_to_be_saved; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def iaa_start_date_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def iaa_start_date_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def iaa_start_date_previous_change; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def iaa_start_date_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def iaa_start_date_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def iaa_start_date_was; end

    sig { void }
    def iaa_start_date_will_change!; end

    sig { returns(T.nilable(::String)) }
    def iaa_was; end

    sig { void }
    def iaa_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def ial; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def ial=(value); end

    sig { returns(T::Boolean) }
    def ial?; end

    sig { returns(T.nilable(::Integer)) }
    def ial_before_last_save; end

    sig { returns(T.untyped) }
    def ial_before_type_cast; end

    sig { returns(T::Boolean) }
    def ial_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def ial_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def ial_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def ial_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def ial_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def ial_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def ial_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def ial_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def ial_was; end

    sig { void }
    def ial_will_change!; end

    sig { returns(::Integer) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(::Integer) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def in_person_proofing_enabled; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def in_person_proofing_enabled=(value); end

    sig { returns(T::Boolean) }
    def in_person_proofing_enabled?; end

    sig { returns(T.nilable(T::Boolean)) }
    def in_person_proofing_enabled_before_last_save; end

    sig { returns(T.untyped) }
    def in_person_proofing_enabled_before_type_cast; end

    sig { returns(T::Boolean) }
    def in_person_proofing_enabled_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def in_person_proofing_enabled_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def in_person_proofing_enabled_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def in_person_proofing_enabled_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def in_person_proofing_enabled_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def in_person_proofing_enabled_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def in_person_proofing_enabled_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def in_person_proofing_enabled_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def in_person_proofing_enabled_was; end

    sig { void }
    def in_person_proofing_enabled_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def irs_attempts_api_enabled; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def irs_attempts_api_enabled=(value); end

    sig { returns(T::Boolean) }
    def irs_attempts_api_enabled?; end

    sig { returns(T.nilable(T::Boolean)) }
    def irs_attempts_api_enabled_before_last_save; end

    sig { returns(T.untyped) }
    def irs_attempts_api_enabled_before_type_cast; end

    sig { returns(T::Boolean) }
    def irs_attempts_api_enabled_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def irs_attempts_api_enabled_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def irs_attempts_api_enabled_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def irs_attempts_api_enabled_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def irs_attempts_api_enabled_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def irs_attempts_api_enabled_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def irs_attempts_api_enabled_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def irs_attempts_api_enabled_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def irs_attempts_api_enabled_was; end

    sig { void }
    def irs_attempts_api_enabled_will_change!; end

    sig { returns(::String) }
    def issuer; end

    sig { params(value: ::String).returns(::String) }
    def issuer=(value); end

    sig { returns(T::Boolean) }
    def issuer?; end

    sig { returns(T.nilable(::String)) }
    def issuer_before_last_save; end

    sig { returns(T.untyped) }
    def issuer_before_type_cast; end

    sig { returns(T::Boolean) }
    def issuer_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def issuer_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def issuer_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def issuer_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def issuer_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def issuer_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def issuer_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def issuer_previously_was; end

    sig { returns(T.nilable(::String)) }
    def issuer_was; end

    sig { void }
    def issuer_will_change!; end

    sig { returns(T.nilable(::Date)) }
    def launch_date; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def launch_date=(value); end

    sig { returns(T::Boolean) }
    def launch_date?; end

    sig { returns(T.nilable(::Date)) }
    def launch_date_before_last_save; end

    sig { returns(T.untyped) }
    def launch_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def launch_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def launch_date_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def launch_date_change_to_be_saved; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def launch_date_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def launch_date_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def launch_date_previous_change; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def launch_date_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def launch_date_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def launch_date_was; end

    sig { void }
    def launch_date_will_change!; end

    sig { returns(T.nilable(::String)) }
    def logo; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def logo=(value); end

    sig { returns(T::Boolean) }
    def logo?; end

    sig { returns(T.nilable(::String)) }
    def logo_before_last_save; end

    sig { returns(T.untyped) }
    def logo_before_type_cast; end

    sig { returns(T::Boolean) }
    def logo_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def logo_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def logo_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def logo_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def logo_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def logo_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def logo_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def logo_previously_was; end

    sig { returns(T.nilable(::String)) }
    def logo_was; end

    sig { void }
    def logo_will_change!; end

    sig { returns(T.nilable(::String)) }
    def metadata_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def metadata_url=(value); end

    sig { returns(T::Boolean) }
    def metadata_url?; end

    sig { returns(T.nilable(::String)) }
    def metadata_url_before_last_save; end

    sig { returns(T.untyped) }
    def metadata_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def metadata_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def metadata_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def metadata_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def metadata_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def metadata_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def metadata_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def metadata_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def metadata_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def metadata_url_was; end

    sig { void }
    def metadata_url_will_change!; end

    sig { returns(T::Boolean) }
    def native; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def native=(value); end

    sig { returns(T::Boolean) }
    def native?; end

    sig { returns(T.nilable(T::Boolean)) }
    def native_before_last_save; end

    sig { returns(T.untyped) }
    def native_before_type_cast; end

    sig { returns(T::Boolean) }
    def native_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def native_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def native_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def native_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def native_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def native_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def native_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def native_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def native_was; end

    sig { void }
    def native_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def piv_cac; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def piv_cac=(value); end

    sig { returns(T::Boolean) }
    def piv_cac?; end

    sig { returns(T.nilable(T::Boolean)) }
    def piv_cac_before_last_save; end

    sig { returns(T.untyped) }
    def piv_cac_before_type_cast; end

    sig { returns(T::Boolean) }
    def piv_cac_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def piv_cac_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def piv_cac_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def piv_cac_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def piv_cac_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def piv_cac_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def piv_cac_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def piv_cac_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def piv_cac_scoped_by_email; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def piv_cac_scoped_by_email=(value); end

    sig { returns(T::Boolean) }
    def piv_cac_scoped_by_email?; end

    sig { returns(T.nilable(T::Boolean)) }
    def piv_cac_scoped_by_email_before_last_save; end

    sig { returns(T.untyped) }
    def piv_cac_scoped_by_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def piv_cac_scoped_by_email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def piv_cac_scoped_by_email_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def piv_cac_scoped_by_email_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def piv_cac_scoped_by_email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def piv_cac_scoped_by_email_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def piv_cac_scoped_by_email_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def piv_cac_scoped_by_email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def piv_cac_scoped_by_email_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def piv_cac_scoped_by_email_was; end

    sig { void }
    def piv_cac_scoped_by_email_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def piv_cac_was; end

    sig { void }
    def piv_cac_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def pkce; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def pkce=(value); end

    sig { returns(T::Boolean) }
    def pkce?; end

    sig { returns(T.nilable(T::Boolean)) }
    def pkce_before_last_save; end

    sig { returns(T.untyped) }
    def pkce_before_type_cast; end

    sig { returns(T::Boolean) }
    def pkce_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def pkce_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def pkce_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def pkce_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def pkce_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def pkce_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def pkce_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def pkce_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def pkce_was; end

    sig { void }
    def pkce_will_change!; end

    sig { returns(T.nilable(::String)) }
    def post_idv_follow_up_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def post_idv_follow_up_url=(value); end

    sig { returns(T::Boolean) }
    def post_idv_follow_up_url?; end

    sig { returns(T.nilable(::String)) }
    def post_idv_follow_up_url_before_last_save; end

    sig { returns(T.untyped) }
    def post_idv_follow_up_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def post_idv_follow_up_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def post_idv_follow_up_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def post_idv_follow_up_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def post_idv_follow_up_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def post_idv_follow_up_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def post_idv_follow_up_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def post_idv_follow_up_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def post_idv_follow_up_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def post_idv_follow_up_url_was; end

    sig { void }
    def post_idv_follow_up_url_will_change!; end

    sig { returns(T.nilable(::String)) }
    def push_notification_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def push_notification_url=(value); end

    sig { returns(T::Boolean) }
    def push_notification_url?; end

    sig { returns(T.nilable(::String)) }
    def push_notification_url_before_last_save; end

    sig { returns(T.untyped) }
    def push_notification_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def push_notification_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def push_notification_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def push_notification_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def push_notification_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def push_notification_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def push_notification_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def push_notification_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def push_notification_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def push_notification_url_was; end

    sig { void }
    def push_notification_url_will_change!; end

    sig { returns(T.nilable(T::Array[::String])) }
    def redirect_uris; end

    sig { params(value: T.nilable(T::Array[::String])).returns(T.nilable(T::Array[::String])) }
    def redirect_uris=(value); end

    sig { returns(T::Boolean) }
    def redirect_uris?; end

    sig { returns(T.nilable(T::Array[::String])) }
    def redirect_uris_before_last_save; end

    sig { returns(T.untyped) }
    def redirect_uris_before_type_cast; end

    sig { returns(T::Boolean) }
    def redirect_uris_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Array[::String]), T.nilable(T::Array[::String])])) }
    def redirect_uris_change; end

    sig { returns(T.nilable([T.nilable(T::Array[::String]), T.nilable(T::Array[::String])])) }
    def redirect_uris_change_to_be_saved; end

    sig { params(from: T.nilable(T::Array[::String]), to: T.nilable(T::Array[::String])).returns(T::Boolean) }
    def redirect_uris_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Array[::String])) }
    def redirect_uris_in_database; end

    sig { returns(T.nilable([T.nilable(T::Array[::String]), T.nilable(T::Array[::String])])) }
    def redirect_uris_previous_change; end

    sig { params(from: T.nilable(T::Array[::String]), to: T.nilable(T::Array[::String])).returns(T::Boolean) }
    def redirect_uris_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Array[::String])) }
    def redirect_uris_previously_was; end

    sig { returns(T.nilable(T::Array[::String])) }
    def redirect_uris_was; end

    sig { void }
    def redirect_uris_will_change!; end

    sig { returns(T.nilable(::String)) }
    def remote_logo_key; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def remote_logo_key=(value); end

    sig { returns(T::Boolean) }
    def remote_logo_key?; end

    sig { returns(T.nilable(::String)) }
    def remote_logo_key_before_last_save; end

    sig { returns(T.untyped) }
    def remote_logo_key_before_type_cast; end

    sig { returns(T::Boolean) }
    def remote_logo_key_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remote_logo_key_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remote_logo_key_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def remote_logo_key_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def remote_logo_key_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remote_logo_key_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def remote_logo_key_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def remote_logo_key_previously_was; end

    sig { returns(T.nilable(::String)) }
    def remote_logo_key_was; end

    sig { void }
    def remote_logo_key_will_change!; end

    sig { void }
    def restore_acs_url!; end

    sig { void }
    def restore_active!; end

    sig { void }
    def restore_agency_id!; end

    sig { void }
    def restore_allow_prompt_login!; end

    sig { void }
    def restore_app_id!; end

    sig { void }
    def restore_approved!; end

    sig { void }
    def restore_assertion_consumer_logout_service_url!; end

    sig { void }
    def restore_attribute_bundle!; end

    sig { void }
    def restore_block_encryption!; end

    sig { void }
    def restore_certs!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_default_aal!; end

    sig { void }
    def restore_description!; end

    sig { void }
    def restore_email_nameid_format_allowed!; end

    sig { void }
    def restore_failure_to_proof_url!; end

    sig { void }
    def restore_friendly_name!; end

    sig { void }
    def restore_help_text!; end

    sig { void }
    def restore_iaa!; end

    sig { void }
    def restore_iaa_end_date!; end

    sig { void }
    def restore_iaa_start_date!; end

    sig { void }
    def restore_ial!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_in_person_proofing_enabled!; end

    sig { void }
    def restore_irs_attempts_api_enabled!; end

    sig { void }
    def restore_issuer!; end

    sig { void }
    def restore_launch_date!; end

    sig { void }
    def restore_logo!; end

    sig { void }
    def restore_metadata_url!; end

    sig { void }
    def restore_native!; end

    sig { void }
    def restore_piv_cac!; end

    sig { void }
    def restore_piv_cac_scoped_by_email!; end

    sig { void }
    def restore_pkce!; end

    sig { void }
    def restore_post_idv_follow_up_url!; end

    sig { void }
    def restore_push_notification_url!; end

    sig { void }
    def restore_redirect_uris!; end

    sig { void }
    def restore_remote_logo_key!; end

    sig { void }
    def restore_return_to_sp_url!; end

    sig { void }
    def restore_signature!; end

    sig { void }
    def restore_signed_response_message_requested!; end

    sig { void }
    def restore_sp_initiated_login_url!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_use_legacy_name_id_behavior!; end

    sig { returns(T.nilable(::String)) }
    def return_to_sp_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def return_to_sp_url=(value); end

    sig { returns(T::Boolean) }
    def return_to_sp_url?; end

    sig { returns(T.nilable(::String)) }
    def return_to_sp_url_before_last_save; end

    sig { returns(T.untyped) }
    def return_to_sp_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def return_to_sp_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def return_to_sp_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def return_to_sp_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def return_to_sp_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def return_to_sp_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def return_to_sp_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def return_to_sp_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def return_to_sp_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def return_to_sp_url_was; end

    sig { void }
    def return_to_sp_url_will_change!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_acs_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_acs_url?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_active; end

    sig { returns(T::Boolean) }
    def saved_change_to_active?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_agency_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_agency_id?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_allow_prompt_login; end

    sig { returns(T::Boolean) }
    def saved_change_to_allow_prompt_login?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_app_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_app_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_approved; end

    sig { returns(T::Boolean) }
    def saved_change_to_approved?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_assertion_consumer_logout_service_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_assertion_consumer_logout_service_url?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_attribute_bundle; end

    sig { returns(T::Boolean) }
    def saved_change_to_attribute_bundle?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_block_encryption; end

    sig { returns(T::Boolean) }
    def saved_change_to_block_encryption?; end

    sig { returns(T.nilable([T.nilable(T::Array[::String]), T.nilable(T::Array[::String])])) }
    def saved_change_to_certs; end

    sig { returns(T::Boolean) }
    def saved_change_to_certs?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_default_aal; end

    sig { returns(T::Boolean) }
    def saved_change_to_default_aal?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_description?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_email_nameid_format_allowed; end

    sig { returns(T::Boolean) }
    def saved_change_to_email_nameid_format_allowed?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_failure_to_proof_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_failure_to_proof_url?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_friendly_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_friendly_name?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_help_text; end

    sig { returns(T::Boolean) }
    def saved_change_to_help_text?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_iaa; end

    sig { returns(T::Boolean) }
    def saved_change_to_iaa?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_iaa_end_date; end

    sig { returns(T::Boolean) }
    def saved_change_to_iaa_end_date?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_iaa_start_date; end

    sig { returns(T::Boolean) }
    def saved_change_to_iaa_start_date?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_ial; end

    sig { returns(T::Boolean) }
    def saved_change_to_ial?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_in_person_proofing_enabled; end

    sig { returns(T::Boolean) }
    def saved_change_to_in_person_proofing_enabled?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_irs_attempts_api_enabled; end

    sig { returns(T::Boolean) }
    def saved_change_to_irs_attempts_api_enabled?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_issuer; end

    sig { returns(T::Boolean) }
    def saved_change_to_issuer?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_launch_date; end

    sig { returns(T::Boolean) }
    def saved_change_to_launch_date?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_logo; end

    sig { returns(T::Boolean) }
    def saved_change_to_logo?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_metadata_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_metadata_url?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_native; end

    sig { returns(T::Boolean) }
    def saved_change_to_native?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_piv_cac; end

    sig { returns(T::Boolean) }
    def saved_change_to_piv_cac?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_piv_cac_scoped_by_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_piv_cac_scoped_by_email?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_pkce; end

    sig { returns(T::Boolean) }
    def saved_change_to_pkce?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_post_idv_follow_up_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_post_idv_follow_up_url?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_push_notification_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_push_notification_url?; end

    sig { returns(T.nilable([T.nilable(T::Array[::String]), T.nilable(T::Array[::String])])) }
    def saved_change_to_redirect_uris; end

    sig { returns(T::Boolean) }
    def saved_change_to_redirect_uris?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_remote_logo_key; end

    sig { returns(T::Boolean) }
    def saved_change_to_remote_logo_key?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_return_to_sp_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_return_to_sp_url?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_signature; end

    sig { returns(T::Boolean) }
    def saved_change_to_signature?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_signed_response_message_requested; end

    sig { returns(T::Boolean) }
    def saved_change_to_signed_response_message_requested?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_sp_initiated_login_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_sp_initiated_login_url?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_use_legacy_name_id_behavior; end

    sig { returns(T::Boolean) }
    def saved_change_to_use_legacy_name_id_behavior?; end

    sig { returns(T.nilable(::String)) }
    def signature; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def signature=(value); end

    sig { returns(T::Boolean) }
    def signature?; end

    sig { returns(T.nilable(::String)) }
    def signature_before_last_save; end

    sig { returns(T.untyped) }
    def signature_before_type_cast; end

    sig { returns(T::Boolean) }
    def signature_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def signature_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def signature_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def signature_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def signature_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def signature_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def signature_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def signature_previously_was; end

    sig { returns(T.nilable(::String)) }
    def signature_was; end

    sig { void }
    def signature_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def signed_response_message_requested; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def signed_response_message_requested=(value); end

    sig { returns(T::Boolean) }
    def signed_response_message_requested?; end

    sig { returns(T.nilable(T::Boolean)) }
    def signed_response_message_requested_before_last_save; end

    sig { returns(T.untyped) }
    def signed_response_message_requested_before_type_cast; end

    sig { returns(T::Boolean) }
    def signed_response_message_requested_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def signed_response_message_requested_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def signed_response_message_requested_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def signed_response_message_requested_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def signed_response_message_requested_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def signed_response_message_requested_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def signed_response_message_requested_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def signed_response_message_requested_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def signed_response_message_requested_was; end

    sig { void }
    def signed_response_message_requested_will_change!; end

    sig { returns(T.nilable(::String)) }
    def sp_initiated_login_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def sp_initiated_login_url=(value); end

    sig { returns(T::Boolean) }
    def sp_initiated_login_url?; end

    sig { returns(T.nilable(::String)) }
    def sp_initiated_login_url_before_last_save; end

    sig { returns(T.untyped) }
    def sp_initiated_login_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def sp_initiated_login_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def sp_initiated_login_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def sp_initiated_login_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def sp_initiated_login_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def sp_initiated_login_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def sp_initiated_login_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def sp_initiated_login_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def sp_initiated_login_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def sp_initiated_login_url_was; end

    sig { void }
    def sp_initiated_login_url_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def use_legacy_name_id_behavior; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def use_legacy_name_id_behavior=(value); end

    sig { returns(T::Boolean) }
    def use_legacy_name_id_behavior?; end

    sig { returns(T.nilable(T::Boolean)) }
    def use_legacy_name_id_behavior_before_last_save; end

    sig { returns(T.untyped) }
    def use_legacy_name_id_behavior_before_type_cast; end

    sig { returns(T::Boolean) }
    def use_legacy_name_id_behavior_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def use_legacy_name_id_behavior_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def use_legacy_name_id_behavior_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def use_legacy_name_id_behavior_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def use_legacy_name_id_behavior_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def use_legacy_name_id_behavior_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def use_legacy_name_id_behavior_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def use_legacy_name_id_behavior_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def use_legacy_name_id_behavior_was; end

    sig { void }
    def use_legacy_name_id_behavior_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_acs_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_active?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_agency_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_allow_prompt_login?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_app_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_approved?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_assertion_consumer_logout_service_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_attribute_bundle?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_block_encryption?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_certs?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_default_aal?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email_nameid_format_allowed?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_failure_to_proof_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_friendly_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_help_text?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_iaa?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_iaa_end_date?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_iaa_start_date?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ial?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_in_person_proofing_enabled?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_irs_attempts_api_enabled?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_issuer?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_launch_date?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_logo?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_metadata_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_native?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_piv_cac?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_piv_cac_scoped_by_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pkce?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_post_idv_follow_up_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_push_notification_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_redirect_uris?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_remote_logo_key?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_return_to_sp_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_signature?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_signed_response_message_requested?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sp_initiated_login_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_use_legacy_name_id_behavior?; end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def external(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def internal(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_push_notification_urls(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::ServiceProvider } }

    sig { returns(T::Array[::ServiceProvider]) }
    def to_a; end

    sig { returns(T::Array[::ServiceProvider]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::ServiceProvider } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::ServiceProvider } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::ServiceProvider } }

    sig do
      params(
        records: T.any(::ServiceProvider, T::Enumerable[T.any(::ServiceProvider, T::Enumerable[::ServiceProvider])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::ServiceProvider, T::Enumerable[T.any(::ServiceProvider, T::Enumerable[::ServiceProvider])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::ServiceProvider, T::Enumerable[T.any(::ServiceProvider, T::Enumerable[::ServiceProvider])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::ServiceProvider]) }
    def load_target; end

    sig do
      params(
        records: T.any(::ServiceProvider, T::Enumerable[T.any(::ServiceProvider, T::Enumerable[::ServiceProvider])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::ServiceProvider, T::Enumerable[T.any(::ServiceProvider, T::Enumerable[::ServiceProvider])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::ServiceProvider, T::Enumerable[T.any(::ServiceProvider, T::Enumerable[::ServiceProvider])])
      ).returns(T::Array[::ServiceProvider])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::ServiceProvider]) }
    def target; end

    sig { returns(T::Array[::ServiceProvider]) }
    def to_a; end

    sig { returns(T::Array[::ServiceProvider]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::ServiceProvider } }

    sig { returns(T::Array[::ServiceProvider]) }
    def to_a; end

    sig { returns(T::Array[::ServiceProvider]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::ServiceProvider } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::ServiceProvider } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
