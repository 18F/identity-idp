# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `UserMailer`.
# Please instead update this file by running `bin/tapioca dsl UserMailer`.


class UserMailer
  include GeneratedUrlHelpersModule

  class << self
    sig do
      params(
        from_time: T.untyped,
        to_time: T.untyped,
        options: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def _distance_of_time_in_words(from_time, to_time = T.unsafe(nil), options = T.unsafe(nil)); end

    sig { params(from_time: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def _time_ago_in_words(from_time, options = T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def account_delete_submitted; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def account_reinstated; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def account_rejected; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def account_reset_cancel; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def account_reset_complete; end

    sig { params(user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def account_reset_deletion_period_interval(user); end

    sig { params(account_reset: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def account_reset_granted(account_reset); end

    sig { params(account_reset: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def account_reset_request(account_reset); end

    sig { params(user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def account_reset_wait_period_days(user); end

    sig { params(profile: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def account_verified(profile:); end

    sig do
      params(
        token: T.untyped,
        request_id: T.untyped,
        from_select_email_flow: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def add_email(token:, request_id:, from_select_email_flow: T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def add_email_associated_with_another_account; end

    sig do
      params(
        object_name: T.untyped,
        method: T.untyped,
        options: T.untyped,
        html_options: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def date_select(object_name, method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

    sig do
      params(
        object_name: T.untyped,
        method: T.untyped,
        options: T.untyped,
        html_options: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def datetime_select(object_name, method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

    sig { params(seconds: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def distance_of_time(seconds, options = T.unsafe(nil)); end

    sig do
      params(
        from_time: T.untyped,
        current_time: T.untyped,
        to_time: T.untyped,
        options: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def distance_of_time_in_percent(from_time, current_time, to_time, options = T.unsafe(nil)); end

    sig do
      params(
        from_time: T.untyped,
        to_time: T.untyped,
        include_seconds_or_options: T.untyped,
        options: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def distance_of_time_in_words(from_time, to_time = T.unsafe(nil), include_seconds_or_options = T.unsafe(nil), options = T.unsafe(nil)); end

    sig do
      params(
        from_time: T.untyped,
        to_time: T.untyped,
        options: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def distance_of_time_in_words_hash(from_time, to_time, options = T.unsafe(nil)); end

    sig do
      params(
        to_time: T.untyped,
        include_seconds_or_options: T.untyped,
        options: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def distance_of_time_in_words_to_now(to_time = T.unsafe(nil), include_seconds_or_options = T.unsafe(nil), options = T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def email_added; end

    sig { params(token: T.untyped, request_id: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def email_confirmation_instructions(token, request_id:); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def email_deleted; end

    sig { params(user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def fraud_state?(user); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def in_person_completion_survey; end

    sig { params(enrollment: T.untyped, visited_location_name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def in_person_deadline_passed(enrollment:, visited_location_name: T.unsafe(nil)); end

    sig { params(enrollment: T.untyped, visited_location_name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def in_person_failed(enrollment:, visited_location_name: T.unsafe(nil)); end

    sig { params(enrollment: T.untyped, visited_location_name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def in_person_failed_fraud(enrollment:, visited_location_name: T.unsafe(nil)); end

    sig { params(enrollment: T.untyped, visited_location_name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def in_person_please_call(enrollment:, visited_location_name: T.unsafe(nil)); end

    sig { params(enrollment: T.untyped, is_enhanced_ipp: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def in_person_ready_to_verify(enrollment:, is_enhanced_ipp:); end

    sig { params(enrollment: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def in_person_ready_to_verify_reminder(enrollment:); end

    sig { params(enrollment: T.untyped, visited_location_name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def in_person_verified(enrollment:, visited_location_name: T.unsafe(nil)); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def locale_url_param; end

    sig { params(events: T.untyped, disavowal_token: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def new_device_sign_in_after_2fa(events:, disavowal_token:); end

    sig { params(events: T.untyped, disavowal_token: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def new_device_sign_in_before_2fa(events:, disavowal_token:); end

    sig { params(disavowal_token: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def password_changed(disavowal_token:); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def personal_key_regenerated; end

    sig { params(disavowal_token: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def personal_key_sign_in(disavowal_token:); end

    sig { params(disavowal_token: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def phone_added(disavowal_token:); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def please_reset_password; end

    sig { params(user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def reset_accumulation_type(user); end

    sig { params(token: T.untyped, request_id: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def reset_password_instructions(token:, request_id:); end

    sig do
      params(
        date: T.untyped,
        options: T.untyped,
        html_options: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def select_date(date = T.unsafe(nil), options = T.unsafe(nil), html_options = T.unsafe(nil)); end

    sig do
      params(
        datetime: T.untyped,
        options: T.untyped,
        html_options: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def select_datetime(datetime = T.unsafe(nil), options = T.unsafe(nil), html_options = T.unsafe(nil)); end

    sig do
      params(
        date: T.untyped,
        options: T.untyped,
        html_options: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def select_day(date, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

    sig do
      params(
        datetime: T.untyped,
        options: T.untyped,
        html_options: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def select_hour(datetime, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

    sig do
      params(
        datetime: T.untyped,
        options: T.untyped,
        html_options: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def select_minute(datetime, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

    sig do
      params(
        date: T.untyped,
        options: T.untyped,
        html_options: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def select_month(date, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

    sig do
      params(
        datetime: T.untyped,
        options: T.untyped,
        html_options: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def select_second(datetime, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

    sig do
      params(
        datetime: T.untyped,
        options: T.untyped,
        html_options: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def select_time(datetime = T.unsafe(nil), options = T.unsafe(nil), html_options = T.unsafe(nil)); end

    sig do
      params(
        date: T.untyped,
        options: T.untyped,
        html_options: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def select_year(date, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

    sig { params(request_id: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def signup_with_your_email(request_id:); end

    sig { params(user: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def supports_fraud_account_reset?(user); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def suspended_create_account; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def suspended_reset_password; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def suspension_confirmed; end

    sig { params(from_time: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def time_ago_in_words(from_time, options = T.unsafe(nil)); end

    sig do
      params(
        object_name: T.untyped,
        method: T.untyped,
        options: T.untyped,
        html_options: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def time_select(object_name, method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

    sig { params(date_or_time: T.untyped, args: T.untyped, block: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def time_tag(date_or_time, *args, &block); end

    sig { returns(::ActionMailer::MessageDelivery) }
    def verify_by_mail_letter_requested; end

    sig { returns(::ActionMailer::MessageDelivery) }
    def verify_by_mail_reminder; end

    sig { params(user: T.untyped, block: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def with_user_locale(user, &block); end
  end
end
