#!/usr/bin/env bash

set -euo pipefail

ORIGIN=origin
DEPLOY_BRANCH=stages/prod

if [ "${CI:-}" == "" ]; then
    echo "This script is meant to be run in a continuous integration environment."
    exit 1
fi

SHA=$(curl --silent https://idp.staging.login.gov/api/deploy.json | jq -r .git_sha)
echo "Preparing deploy PR for ${SHA}"

LAST_RC=$(gh release list --exclude-drafts --exclude-pre-releases --limit 1 | grep -E --only-matching 'RC [0-9]+(\.[0-9]+)?' | sed 's/RC //')
if [ "$LAST_RC" == "" ]; then
    LAST_RC=0
fi

# TODO: Patch support
LAST_RC_MAJOR=$(bc <<< "scale=0; ${LAST_RC} / 1")
NEXT_RC=$((LAST_RC_MAJOR + 1))
echo "Last RC was ${LAST_RC}. The next RC will be ${NEXT_RC}."

RC_BRANCH=stages/rc-$(date +'%Y-%m-%d')

if git rev-parse $RC_BRANCH > /dev/null 2>&1; then
    echo "RC branch $RC_BRANCH already exists."
    exit 1
fi

git checkout -b $RC_BRANCH
git reset --hard $SHA

scripts/changelog_check.rb -b "${ORIGIN}/${DEPLOY_BRANCH}" > rc_changelog.md

git push -u $ORIGIN HEAD

if [ "${DRY_RUN:-}" == "" ]; then
    # Create PR
    gh pr create \
        --title "Deploy RC ${NEXT_RC} to Production" \
        --label 'status - promotion' \
        --base $DEPLOY_BRANCH \
        --head $RC_BRANCH \
        --body-file rc_changelog.md

    TAG="rc-${NEXT_RC}-$(date -u +"%Y-%m-%dT%H%M%S")"

    # Create a draft release based on $DEPLOY_BRANCH
    gh release create \
        "$TAG" \
        --draft \
        --title "RC ${NEXT_RC}" \
        --target $DEPLOY_BRANCH \
        --latest \
        --notes-file rc_changelog.md
else
    echo "Dry run. Not creating PR or release"
fi

