# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `caxlsx` gem.
# Please instead update this file by running `bin/tapioca gem caxlsx`.


# xlsx generation with charts, images, automated column width, customizable styles
# and full schema validation. Axlsx excels at helping you generate beautiful
# Office Open XML Spreadsheet documents without having to understand the entire
# ECMA specification. Check out the README for some examples of how easy it is.
# Best of all, you can validate your xlsx file before serialization so you know
# for sure that anything generated is going to load on your client's machine.
#
# source://caxlsx//lib/axlsx/version.rb#1
module Axlsx
  class << self
    # If value is boolean return 1 or 0
    # else return the value
    #
    # @param value [Object] The value to process
    # @return [Object]
    #
    # source://caxlsx//lib/axlsx.rb#169
    def booleanize(value); end

    # performs the increadible feat of changing snake_case to CamelCase
    #
    # @param s [String] The snake case string to camelize
    # @return [String]
    #
    # source://caxlsx//lib/axlsx.rb#146
    def camel(s = T.unsafe(nil), all_caps = T.unsafe(nil)); end

    # @example Relative Cell Reference
    #   ws.rows.first.cells.first.r #=> "A1"
    # @return [String] The alpha(column)numeric(row) reference for this sell.
    #
    # source://caxlsx//lib/axlsx.rb#125
    def cell_r(c_index, r_index); end

    # determines the cell range for the items provided
    #
    # source://caxlsx//lib/axlsx.rb#57
    def cell_range(cells, absolute = T.unsafe(nil)); end

    # global reference html entity encoding
    #
    # @return [HtmlEntities]
    #
    # source://caxlsx//lib/axlsx.rb#80
    def coder; end

    # converts the column index into alphabetical values.
    #
    # @note This follows the standard spreadsheet convention of naming columns A to Z, followed by AA to AZ etc.
    # @return [String]
    #
    # source://caxlsx//lib/axlsx.rb#111
    def col_ref(index); end

    # Whether to treat values starting with an equals sign as formulas or as literal strings.
    # Allowing user-generated data to be interpreted as formulas is a security risk.
    # See https://www.owasp.org/index.php/CSV_Injection for details.
    #
    # @return [Boolean]
    #
    # source://caxlsx//lib/axlsx.rb#208
    def escape_formulas; end

    # Sets whether to treat values starting with an equals sign as formulas or as literal strings.
    #
    # @param value [Boolean] The value to set.
    #
    # source://caxlsx//lib/axlsx.rb#214
    def escape_formulas=(value); end

    # utility method for performing a deep merge on a Hash
    #
    # @param Hash [Hash] to merge into
    # @param Hash [Hash] to be added
    #
    # source://caxlsx//lib/axlsx.rb#180
    def hash_deep_merge(first_hash, second_hash); end

    # I am a very big fan of activesupports instance_values method, but do not want to require nor include the entire
    # library just for this one method.
    #
    # Defining as a class method on Axlsx to refrain from monkeypatching Object for all users of this gem.
    #
    # source://caxlsx//lib/axlsx.rb#52
    def instance_values_for(object); end

    # returns the x, y position of a cell
    #
    # @raise [ArgumentError]
    #
    # source://caxlsx//lib/axlsx.rb#85
    def name_to_indices(name); end

    # Creates an array of individual cell references based on an excel reference range.
    #
    # @param range [String] A cell range, for example A1:D5
    # @return [Array]
    #
    # source://caxlsx//lib/axlsx.rb#132
    def range_to_a(range); end

    # returns the provided string with all invalid control charaters
    # removed.
    #
    # @param str [String] The string to process
    # @return [String]
    #
    # source://caxlsx//lib/axlsx.rb#156
    def sanitize(str); end

    # sorts the array of cells provided to start from the minimum x,y to
    # the maximum x.y#
    #
    # @param cells [Array]
    # @return [Array]
    #
    # source://caxlsx//lib/axlsx.rb#74
    def sort_cells(cells); end

    # Instructs the serializer to not try to escape cell value input.
    # This will give you a huge speed bonus, but if you content has <, > or other xml character data
    # the workbook will be invalid and excel will complain.
    #
    # source://caxlsx//lib/axlsx.rb#193
    def trust_input; end

    # @param[Boolean] trust_me A boolean value indicating if the cell value content is to be trusted
    #
    # @return [Boolean]
    # @see Axlsx::trust_input
    #
    # source://caxlsx//lib/axlsx.rb#200
    def trust_input=(trust_me); end

    # Requires that the value is between -54000000 and 54000000
    #
    # @param v [Any] The value validated
    # @raise [ArgumentError] raised if the value cannot be converted to an integer between the allowed angle values for chart label rotation.
    # @return [Boolean] true if the data is valid
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#78
    def validate_angle(v); end

    # Requires that the value is a form that can be evaluated as a boolean in an xml document.
    # The value must be an instance of String, Integer, Symbol, TrueClass or FalseClass and
    # it must be one of 0, 1, "true", "false", :true, :false, true, false, "0", or "1"
    #
    # @param v [Any] The value validated
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#111
    def validate_boolean(v); end

    # Requires that the value is one of :none, :single, :double, :singleAccounting, :doubleAccounting
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#149
    def validate_cell_u(v); end

    # Requires that the value is valid conditional formatting operator.
    # valid operators must be one of lessThan, lessThanOrEqual, equal,
    # notEqual, greaterThanOrEqual, greaterThan, between, notBetween,
    # containsText, notContains, beginsWith, endsWith
    #
    # @param v [Any] The value validated
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#202
    def validate_conditional_formatting_operator(v); end

    # Requires that the value is valid conditional formatting type.
    # valid types must be one of expression, cellIs, colorScale,
    # dataBar, iconSet, top10, uniqueValues, duplicateValues,
    # containsText, notContainsText, beginsWith, endsWith,
    # containsBlanks, notContainsBlanks, containsErrors,
    # notContainsErrors, timePeriod, aboveAverage
    #
    # @param v [Any] The value validated
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#187
    def validate_conditional_formatting_type(v); end

    # Requires thatt he value is a valid conditional formatting value object type.
    # valid types must be one of num, percent, max, min, formula and percentile
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#193
    def validate_conditional_formatting_value_object_type(v); end

    # Requires that the value is a valid content_type
    # TABLE_CT, WORKBOOK_CT, APP_CT, RELS_CT, STYLES_CT, XML_CT, WORKSHEET_CT, SHARED_STRINGS_CT, CORE_CT, CHART_CT, DRAWING_CT, COMMENT_CT are allowed
    #
    # @param v [Any] The value validated
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#238
    def validate_content_type(v); end

    # Requires that the value is a valid data_validation_error_style
    # :information, :stop, :warning
    #
    # @param v [Any] The value validated
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#259
    def validate_data_validation_error_style(v); end

    # Requires that the value is valid data validation operator.
    # valid operators must be one of lessThan, lessThanOrEqual, equal,
    # notEqual, greaterThanOrEqual, greaterThan, between, notBetween
    #
    # @param v [Any] The value validated
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#267
    def validate_data_validation_operator(v); end

    # Requires that the value is valid data validation type.
    # valid types must be one of custom, data, decimal, list, none, textLength, time, whole
    #
    # @param v [Any] The value validated
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#274
    def validate_data_validation_type(v); end

    # Requires that the value is a valid "display blanks as" type.
    # valid types must be one of gap, span, zero
    #
    # @param v [Any] The value validated
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#302
    def validate_display_blanks_as(v); end

    # validates cell style family which must be between 1 and 5
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#154
    def validate_family(v); end

    # Requires that the value is a Float
    #
    # @param v [Any] The value validated
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#123
    def validate_float(v); end

    # Requires that the value is a gradient_type.
    # valid types are :linear and :path
    #
    # @param v [Any] The value validated
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#209
    def validate_gradient_type(v); end

    # Requires that the value is a valid horizontal_alignment
    # :general, :left, :center, :right, :fill, :justify, :centerContinuous, :distributed are allowed
    #
    # @param v [Any] The value validated
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#224
    def validate_horizontal_alignment(v); end

    # Requires that the value is one of the valid ST_IconSet types
    # Allowed values are: 3Arrows, 3ArrowsGray, 3Flags, 3TrafficLights1, 3TrafficLights2, 3Signs, 3Symbols, 3Symbols2, 4Arrows, 4ArrowsGray, 4RedToBlack, 4Rating, 4TrafficLights, 5Arrows, 5ArrowsGray, 5Rating, 5Quarters
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#176
    def validate_icon_set(v); end

    # Requires that the value is a Integer
    #
    # @param v [Any] The value validated
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#103
    def validate_int(v); end

    # Requires that the value can be converted to an integer
    # @para, [Any] v the value to validate
    #
    # @raise [ArgumentError] raised if the value cannot be converted to an integer
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#70
    def validate_integerish(v); end

    # Requires that the value is one of :default, :circle, :dash, :diamond, :dot, :picture, :plus, :square, :star, :triangle, :x
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#312
    def validate_marker_symbol(v); end

    # Requires that the value is a string containing a positive decimal number followed by one of the following units:
    # "mm", "cm", "in", "pt", "pc", "pi"
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#129
    def validate_number_with_unit(v); end

    # Requires that the value is one of :default, :landscape, or :portrait.
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#144
    def validate_page_orientation(v); end

    # Requires that the value is a valid active pane type.
    # valid types must be one of bottom_left, bottom_right, top_left, top_right
    #
    # @param v [Any] The value validated
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#288
    def validate_pane_type(v); end

    # Requires that the value is valid pattern type.
    # valid pattern types must be one of :none, :solid, :mediumGray, :darkGray, :lightGray, :darkHorizontal, :darkVertical, :darkDown,
    # :darkUp, :darkGrid, :darkTrellis, :lightHorizontal, :lightVertical, :lightDown, :lightUp, :lightGrid, :lightTrellis, :gray125, or :gray0625.
    #
    # @param v [Any] The value validated
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#162
    def validate_pattern_type(v); end

    # Requires that the value is a valid relationship_type
    # XML_NS_R, TABLE_R, WORKBOOK_R, WORKSHEET_R, APP_R, RELS_R, CORE_R, STYLES_R, CHART_R, DRAWING_R, IMAGE_R, HYPERLINK_R, SHARED_STRINGS_R are allowed
    #
    # @param v [Any] The value validated
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#245
    def validate_relationship_type(v); end

    # Requires that the value is an integer ranging from 10 to 400 or 0.
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#139
    def validate_scale_0_10_400(v); end

    # Requires that the value is an integer ranging from 10 to 400.
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#134
    def validate_scale_10_400(v); end

    # Requires that the value is a valid scatterStyle
    # must be one of :none | :line | :lineMarker | :marker | :smooth | :smoothMarker
    # must be one of "none" | "line" | "lineMarker" | "marker" | "smooth" | "smoothMarker"
    #
    # @param v [Symbol|String] the value to validate
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#217
    def validate_scatter_style(v); end

    # Requires that the value is a valid sheet view type.
    # valid types must be one of normal, page_break_preview, page_layout
    #
    # @param v [Any] The value validated
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#281
    def validate_sheet_view_type(v); end

    # Requires that the value is a valid split state type.
    # valid types must be one of frozen, frozen_split, split
    #
    # @param v [Any] The value validated
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#295
    def validate_split_state_type(v); end

    # Requires that the value is a String
    #
    # @param v [Any] The value validated
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#117
    def validate_string(v); end

    # Requires that the value is a valid table element type
    # :wholeTable, :headerRow, :totalRow, :firstColumn, :lastColumn, :firstRowStripe, :secondRowStripe, :firstColumnStripe, :secondColumnStripe, :firstHeaderCell, :lastHeaderCell, :firstTotalCell, :lastTotalCell, :firstSubtotalColumn, :secondSubtotalColumn, :thirdSubtotalColumn, :firstSubtotalRow, :secondSubtotalRow, :thirdSubtotalRow, :blankRow, :firstColumnSubheading, :secondColumnSubheading, :thirdColumnSubheading, :firstRowSubheading, :secondRowSubheading, :thirdRowSubheading, :pageFieldLabels, :pageFieldValues are allowed
    #
    # @param v [Any] The value validated
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#252
    def validate_table_element_type(v); end

    # Requires that the value is one of the ST_TimePeriod types
    # valid time period types are today, yesterday, tomorrow, last7Days,
    # thisMonth, lastMonth, nextMonth, thisWeek, lastWeek, nextWeek
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#170
    def validate_time_period_type(v); end

    # Requires that the value is a Integer and is greater or equal to 0
    #
    # @param v [Any] The value validated
    # @raise [ArgumentError] raised if the value is not a Integer value greater or equal to 0
    # @return [Boolean] true if the data is valid
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#89
    def validate_unsigned_int(v); end

    # Requires that the value is a Integer or Float and is greater or equal to 0
    #
    # @param v [Any] The value validated
    # @raise [ArgumentError] raised if the value is not a Integer, Float value greater or equal to 0
    # @return [Boolean] true if the data is valid
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#97
    def validate_unsigned_numeric(v); end

    # Requires that the value is a valid vertical_alignment
    # :top, :center, :bottom, :justify, :distributed are allowed
    #
    # @param v [Any] The value validated
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#231
    def validate_vertical_alignment(v); end

    # Requires that the value is one of :visible, :hidden, :very_hidden
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#307
    def validate_view_visibility(v); end
  end
end

# app content type
#
# source://caxlsx//lib/axlsx/util/constants.rb#117
Axlsx::APP_CT = T.let(T.unsafe(nil), String)

# extended-properties namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#12
Axlsx::APP_NS = T.let(T.unsafe(nil), String)

# doc props namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#15
Axlsx::APP_NS_VT = T.let(T.unsafe(nil), String)

# app part
#
# source://caxlsx//lib/axlsx/util/constants.rb#189
Axlsx::APP_PN = T.let(T.unsafe(nil), String)

# app rels namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#66
Axlsx::APP_R = T.let(T.unsafe(nil), String)

# App validation schema
#
# source://caxlsx//lib/axlsx/util/constants.rb#243
Axlsx::APP_XSD = T.let(T.unsafe(nil), String)

# This class extracts the common parts from Default and Override
#
# source://caxlsx//lib/axlsx/content_type/abstract_content_type.rb#3
class Axlsx::AbstractContentType
  include ::Axlsx::OptionsParser

  # Initializes an abstract content type
  #
  # @return [AbstractContentType] a new instance of AbstractContentType
  # @see Default, Override
  #
  # source://caxlsx//lib/axlsx/content_type/abstract_content_type.rb#8
  def initialize(options = T.unsafe(nil)); end

  # The type of content.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/content_type/abstract_content_type.rb#14
  def ContentType; end

  # The content type.
  #
  # @see Axlsx#validate_content_type
  #
  # source://caxlsx//lib/axlsx/content_type/abstract_content_type.rb#19
  def ContentType=(v); end

  # The type of content.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/content_type/abstract_content_type.rb#14
  def content_type; end

  # The content type.
  #
  # @see Axlsx#validate_content_type
  #
  # source://caxlsx//lib/axlsx/content_type/abstract_content_type.rb#19
  def content_type=(v); end

  # Serialize the contenty type to xml
  #
  # source://caxlsx//lib/axlsx/content_type/abstract_content_type.rb#23
  def to_xml_string(node_name = T.unsafe(nil), str = T.unsafe(nil)); end
end

# This module defines some of the more common validating attribute
# accessors that we use in Axlsx
#
# When this module is included in your class you can simply call
#
# string_attr_access :foo
#
# To generate a new, validating set of accessors for foo.
#
# source://caxlsx//lib/axlsx/util/accessors.rb#10
module Axlsx::Accessors
  mixes_in_class_methods ::Axlsx::Accessors::ClassMethods

  class << self
    # @private
    #
    # source://caxlsx//lib/axlsx/util/accessors.rb#11
    def included(base); end
  end
end

# Defines the class level xxx_attr_accessor methods
#
# source://caxlsx//lib/axlsx/util/accessors.rb#16
module Axlsx::Accessors::ClassMethods
  # Creates on or more boolean validated attr_accessors
  # names of the attributes you will add to your class.
  #
  # @param symbols [Array] An array of symbols representing the
  #
  # source://caxlsx//lib/axlsx/util/accessors.rb#41
  def boolean_attr_accessor(*symbols); end

  # Creates one or more float (double?) attr_accessors
  # names of the attributes you will add to your class
  #
  # @param symbols [Array] An array of symbols representing the
  #
  # source://caxlsx//lib/axlsx/util/accessors.rb#34
  def float_attr_accessor(*symbols); end

  # Creates one or more string validated attr_accessors
  # names of the attributes you will add to your class.
  #
  # @param symbols [Array] An array of symbols representing the
  #
  # source://caxlsx//lib/axlsx/util/accessors.rb#20
  def string_attr_accessor(*symbols); end

  # Creates one or more usigned integer attr_accessors
  # names of the attributes you will add to your class
  #
  # @param symbols [Array] An array of symbols representing the
  #
  # source://caxlsx//lib/axlsx/util/accessors.rb#27
  def unsigned_int_attr_accessor(*symbols); end

  # Creates the reader and writer access methods
  # validating assignation.
  #
  # @param symbols [Array] The names of the attributes to create
  # @param validator [String] The axlsx validation method to use when
  # @see lib/axlsx/util/validators.rb
  #
  # source://caxlsx//lib/axlsx/util/accessors.rb#53
  def validated_attr_accessor(symbols, validator); end
end

# Template for defining validated write accessors
#
# source://caxlsx//lib/axlsx/util/accessors.rb#46
Axlsx::Accessors::ClassMethods::SETTER = T.let(T.unsafe(nil), String)

# App represents the app.xml document. The attributes for this object are primarily managed by the application the end user uses to edit the document. None of the attributes are required to serialize a valid xlsx object.
#
# @note Support is not implemented for the following complex types:
#
#   HeadingPairs (VectorVariant),
#   TitlesOfParts (VectorLpstr),
#   HLinks (VectorVariant),
#   DigSig (DigSigBlob)
# @see shared-documentPropertiesExtended.xsd
#
# source://caxlsx//lib/axlsx/doc_props/app.rb#10
class Axlsx::App
  include ::Axlsx::OptionsParser

  # Creates an App object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [App] a new instance of App
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#36
  def initialize(options = T.unsafe(nil)); end

  # @return [String] The version of the application.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#125
  def AppVersion; end

  # Sets the app_version property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#211
  def AppVersion=(v); end

  # @return [String] The name of the application
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#121
  def Applicatoin; end

  # @return [Integer] The number of characters in the document.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#61
  def Characters; end

  # Sets the characters property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#151
  def Characters=(v); end

  # @return [Integer] The number of characters in the document including spaces.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#105
  def CharactersWithSpaces; end

  # Sets the characters_with_spaces property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#195
  def CharactersWithSpaces=(v); end

  # @return [String] The name of the company generating the document.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#49
  def Company; end

  # Sets the company property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#141
  def Company=(v); end

  # @return [Integer] Document security
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#129
  def DocSecurity; end

  # Sets the doc_security property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#215
  def DocSecurity=(v); end

  # @return [Integer] The number of hidden slides.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#89
  def HiddenSlides; end

  # Sets the hidden_slides property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#179
  def HiddenSlides=(v); end

  # Sets the HyperLinksChanged property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#207
  def HyperLinksChanged=(v); end

  # @return [String] The base for hyper links in the document.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#113
  def HyperlinkBase; end

  # Sets the hyperlink_base property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#203
  def HyperlinkBase=(v); end

  # @return [Boolean] Indicates that the hyper links in the document have been changed.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#117
  def HyperlinksChanged; end

  # @return [Integer] The number of lines in the document.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#69
  def Lines; end

  # Sets the lines property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#159
  def Lines=(v); end

  # @return [Boolean] The links in the document are up to date.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#101
  def LinksUpToDate; end

  # Sets the links_up_to_date property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#191
  def LinksUpToDate=(v); end

  # @return [Integer] The total number multimedia clips
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#93
  def MMClips; end

  # Sets the m_m_clips property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#183
  def MMClips=(v); end

  # @return [String] The name of the manager for the document.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#45
  def Manager; end

  # Sets the manager property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#137
  def Manager=(v); end

  # @return [Integer] The number of slides that have notes.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#81
  def Notes; end

  # sets the notes property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#171
  def Notes=(v); end

  # @return [Integer] The number of pages in the document.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#53
  def Pages; end

  # @return [Integer] The number of paragraphs in the document
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#73
  def Paragraphs; end

  # Sets the paragraphs property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#163
  def Paragraphs=(v); end

  # @return [String] The intended format of the presentation.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#65
  def PresentationFormat; end

  # Sets the presentation_format property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#155
  def PresentationFormat=(v); end

  # @return [Boolean] The display mode for the document thumbnail.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#97
  def ScaleCrop; end

  # Sets the scale_crop property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#187
  def ScaleCrop=(v); end

  # @return [Boolean] Indicates if the document is shared.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#109
  def SharedDoc; end

  # Sets the share_doc property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#199
  def SharedDoc=(v); end

  # @return [Intger] The number of slides in the document.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#77
  def Slides; end

  # sets the slides property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#167
  def Slides=(v); end

  # @return [String] The name of the document template.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#41
  def Template; end

  # Sets the template property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#133
  def Template=(v); end

  # @return [Integer] The total amount of time spent editing.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#85
  def TotalTime; end

  # Sets the total_time property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#175
  def TotalTime=(v); end

  # @return [Integer] The number of words in the document.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#57
  def Words; end

  # Sets the words property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#147
  def Words=(v); end

  # @return [String] The version of the application.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#125
  def app_version; end

  # Sets the app_version property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#211
  def app_version=(v); end

  # @return [String] The name of the application
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#121
  def application; end

  # @return [Integer] The number of characters in the document.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#61
  def characters; end

  # Sets the characters property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#151
  def characters=(v); end

  # @return [Integer] The number of characters in the document including spaces.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#105
  def characters_with_spaces; end

  # Sets the characters_with_spaces property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#195
  def characters_with_spaces=(v); end

  # @return [String] The name of the company generating the document.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#49
  def company; end

  # Sets the company property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#141
  def company=(v); end

  # @return [Integer] Document security
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#129
  def doc_security; end

  # Sets the doc_security property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#215
  def doc_security=(v); end

  # @return [Integer] The number of hidden slides.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#89
  def hidden_slides; end

  # Sets the hidden_slides property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#179
  def hidden_slides=(v); end

  # @return [String] The base for hyper links in the document.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#113
  def hyperlink_base; end

  # Sets the hyperlink_base property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#203
  def hyperlink_base=(v); end

  # @return [Boolean] Indicates that the hyper links in the document have been changed.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#117
  def hyperlinks_changed; end

  # Sets the HyperLinksChanged property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#207
  def hyperlinks_changed=(v); end

  # @return [Integer] The number of lines in the document.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#69
  def lines; end

  # Sets the lines property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#159
  def lines=(v); end

  # @return [Boolean] The links in the document are up to date.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#101
  def links_up_to_date; end

  # Sets the links_up_to_date property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#191
  def links_up_to_date=(v); end

  # @return [Integer] The total number multimedia clips
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#93
  def m_m_clips; end

  # Sets the m_m_clips property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#183
  def m_m_clips=(v); end

  # @return [String] The name of the manager for the document.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#45
  def manager; end

  # Sets the manager property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#137
  def manager=(v); end

  # @return [Integer] The number of slides that have notes.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#81
  def notes; end

  # sets the notes property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#171
  def notes=(v); end

  # @return [Integer] The number of pages in the document.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#53
  def pages; end

  # Sets the pages property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#144
  def pages=(v); end

  # @return [Integer] The number of paragraphs in the document
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#73
  def paragraphs; end

  # Sets the paragraphs property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#163
  def paragraphs=(v); end

  # @return [String] The intended format of the presentation.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#65
  def presentation_format; end

  # Sets the presentation_format property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#155
  def presentation_format=(v); end

  # @return [Boolean] The display mode for the document thumbnail.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#97
  def scale_crop; end

  # Sets the scale_crop property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#187
  def scale_crop=(v); end

  # @return [Boolean] Indicates if the document is shared.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#109
  def shared_doc; end

  # Sets the share_doc property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#199
  def shared_doc=(v); end

  # @return [Intger] The number of slides in the document.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#77
  def slides; end

  # sets the slides property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#167
  def slides=(v); end

  # @return [String] The name of the document template.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#41
  def template; end

  # Sets the template property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#133
  def template=(v); end

  # Serialize the app.xml document
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#220
  def to_xml_string(str = T.unsafe(nil)); end

  # @return [Integer] The total amount of time spent editing.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#85
  def total_time; end

  # Sets the total_time property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#175
  def total_time=(v); end

  # @return [Integer] The number of words in the document.
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#57
  def words; end

  # Sets the words property of your app.xml file
  #
  # source://caxlsx//lib/axlsx/doc_props/app.rb#147
  def words=(v); end
end

# The AreaChart is a two dimentional line chart (who would have guessed?) that you can add to your worksheet.
#
# @example Creating a chart
#   # This example creates a line in a single sheet.
#   require "rubygems" # if that is your preferred way to manage gems!
#   require "axlsx"
#
#   p = Axlsx::Package.new
#   ws = p.workbook.add_worksheet
#   ws.add_row ["This is a chart with no data in the sheet"]
#
#   chart = ws.add_chart(Axlsx::AreaChart, :start_at=> [0,1], :end_at=>[0,6], :title=>"Most Popular Pets")
#   chart.add_series :data => [1, 9, 10], :labels => ["Slimy Reptiles", "Fuzzy Bunnies", "Rottweiler"]
# @see Worksheet#add_chart
# @see Worksheet#add_row
# @see Chart#add_series
# @see Series
# @see Package#serialize
#
# source://caxlsx//lib/axlsx/drawing/area_chart.rb#20
class Axlsx::AreaChart < ::Axlsx::Chart
  # Creates a new line chart object
  #
  # @option options
  # @option options
  # @option options
  # @param frame [GraphicFrame] The workbook that owns this chart.
  # @param options [Hash] a customizable set of options
  # @return [AreaChart] a new instance of AreaChart
  # @see Chart
  #
  # source://caxlsx//lib/axlsx/drawing/area_chart.rb#45
  def initialize(frame, options = T.unsafe(nil)); end

  # The axes for this chart. AreaCharts have a category and value
  # axis.
  #
  # @return [Axes]
  #
  # source://caxlsx//lib/axlsx/drawing/area_chart.rb#92
  def axes; end

  # the category axis
  #
  # @return [CatAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/area_chart.rb#23
  def catAxis; end

  # the category axis
  #
  # @return [CatAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/area_chart.rb#23
  def cat_axis; end

  # must be one of  [:percentStacked, :clustered, :standard, :stacked]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/area_chart.rb#37
  def grouping; end

  # @see grouping
  #
  # source://caxlsx//lib/axlsx/drawing/area_chart.rb#54
  def grouping=(v); end

  # The node name to use in serialization. As AreaChart is used as the
  # base class for Liine3DChart we need to be sure to serialize the
  # chart based on the actual class type and not a fixed node name.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/area_chart.rb#63
  def node_name; end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/area_chart.rb#75
  def to_xml_string(str = T.unsafe(nil)); end

  # the category axis
  #
  # @return [ValAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/area_chart.rb#30
  def valAxis; end

  # the category axis
  #
  # @return [ValAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/area_chart.rb#30
  def val_axis; end
end

# A AreaSeries defines the title, data and labels for line charts
#
# @note The recommended way to manage series is to use Chart#add_series
# @see Worksheet#add_chart
# @see Chart#add_series
#
# source://caxlsx//lib/axlsx/drawing/area_series.rb#6
class Axlsx::AreaSeries < ::Axlsx::Series
  # Creates a new series
  #
  # @option options
  # @option options
  # @param chart [Chart]
  # @param options [Hash] a customizable set of options
  # @return [AreaSeries] a new instance of AreaSeries
  #
  # source://caxlsx//lib/axlsx/drawing/area_series.rb#36
  def initialize(chart, options = T.unsafe(nil)); end

  # The fill color for this series.
  # Red, green, and blue is expressed as sequence of hex digits, RRGGBB. A perceptual gamma of 2.2 is used.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/area_series.rb#18
  def color; end

  # @see color
  #
  # source://caxlsx//lib/axlsx/drawing/area_series.rb#47
  def color=(v); end

  # The data for this series.
  #
  # @return [ValAxisData]
  #
  # source://caxlsx//lib/axlsx/drawing/area_series.rb#9
  def data; end

  # The labels for this series.
  #
  # @return [CatAxisData]
  #
  # source://caxlsx//lib/axlsx/drawing/area_series.rb#13
  def labels; end

  # custom marker symbol
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/area_series.rb#26
  def marker_symbol; end

  # @see marker_symbol
  #
  # source://caxlsx//lib/axlsx/drawing/area_series.rb#58
  def marker_symbol=(v); end

  # show markers on values
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/area_series.rb#22
  def show_marker; end

  # @see show_marker
  #
  # source://caxlsx//lib/axlsx/drawing/area_series.rb#52
  def show_marker=(v); end

  # line smoothing on values
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/area_series.rb#30
  def smooth; end

  # @see smooth
  #
  # source://caxlsx//lib/axlsx/drawing/area_series.rb#64
  def smooth=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/area_series.rb#72
  def to_xml_string(str = T.unsafe(nil)); end

  private

  # assigns the data for this series
  #
  # source://caxlsx//lib/axlsx/drawing/area_series.rb#102
  def data=(v); end

  # assigns the labels for this series
  #
  # source://caxlsx//lib/axlsx/drawing/area_series.rb#105
  def labels=(v); end
end

# This class represents an auto filter range in a worksheet
#
# source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/auto_filter.rb#6
class Axlsx::AutoFilter
  # creates a new Autofilter object
  #
  # @param worksheet [Worksheet]
  # @raise [ArgumentError]
  # @return [AutoFilter] a new instance of AutoFilter
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/auto_filter.rb#9
  def initialize(worksheet); end

  # Adds a filter column. This is the recommended way to create and manage filter columns for your autofilter.
  # In addition to the require id and type parameters, options will be passed to the filter column during instantiation.
  #
  # @param col_id [String] Zero-based index indicating the AutoFilter column to which this filter information applies.
  # @param filter_type [Symbol] A symbol representing one of the supported filter types.
  # @param options [Hash] a hash of options to pass into the generated filter
  # @return [FilterColumn]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/auto_filter.rb#44
  def add_column(col_id, filter_type, options = T.unsafe(nil)); end

  # actually performs the filtering of rows who's cells do not
  # match the filter.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/auto_filter.rb#51
  def apply; end

  # A collection of filterColumns for this auto_filter
  #
  # @return [SimpleTypedList]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/auto_filter.rb#34
  def columns; end

  # the formula for the defined name required for this auto filter
  # This prepends the worksheet name to the absolute cell reference
  # e.g. A1:B2 -> 'Sheet1'!$A$1:$B$2
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/auto_filter.rb#26
  def defined_name; end

  # The range the autofilter should be applied to.
  # This should be a string like 'A1:B8'
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/auto_filter.rb#20
  def range; end

  # The range the autofilter should be applied to.
  # This should be a string like 'A1:B8'
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/auto_filter.rb#20
  def range=(_arg0); end

  # serialize the object
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/auto_filter.rb#70
  def to_xml_string(str = T.unsafe(nil)); end

  # Returns the value of attribute worksheet.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/auto_filter.rb#15
  def worksheet; end
end

# An axis data source that can contain referenced or literal strings or numbers
#
# @note only string data types are supported - mainly because we have not implemented a chart type that requires a numerical axis value
#
# source://caxlsx//lib/axlsx/drawing/ax_data_source.rb#4
class Axlsx::AxDataSource < ::Axlsx::NumDataSource
  # creates a new NumDataSource object
  #
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [AxDataSource] a new instance of AxDataSource
  #
  # source://caxlsx//lib/axlsx/drawing/ax_data_source.rb#8
  def initialize(options = T.unsafe(nil)); end

  class << self
    # allowed element tag names for serialization
    #
    # @return [Array]
    #
    # source://caxlsx//lib/axlsx/drawing/ax_data_source.rb#17
    def allowed_tag_names; end
  end
end

# The Axes class creates and manages axis information and
# serialization for charts.
#
# source://caxlsx//lib/axlsx/drawing/axes.rb#4
class Axlsx::Axes
  # should be an axis name like :val_axis and its value should be the
  # class of the axis type to construct. The :cat_axis, if there is one,
  # must come first (we assume a Ruby 1.9+ Hash or an OrderedHash).
  #
  # @param options [Hash] options used to generate axis each key
  # @raise [ArgumentError]
  # @return [Axes] a new instance of Axes
  #
  # source://caxlsx//lib/axlsx/drawing/axes.rb#9
  def initialize(options = T.unsafe(nil)); end

  # [] provides assiciative access to a specic axis store in an axes
  # instance.
  #
  # @return [Axis]
  #
  # source://caxlsx//lib/axlsx/drawing/axes.rb#20
  def [](name); end

  # Adds an axis to the collection
  #
  # @param name [Symbol] The name of the axis
  # @param axis_class [Axis] The axis class to generate
  #
  # source://caxlsx//lib/axlsx/drawing/axes.rb#43
  def add_axis(name, axis_class); end

  # Serializes the object
  # If the ids option is specified only the axis identifier is
  # serialized. Otherwise, each axis is serialized in full.
  #
  # @option options
  # @param str [String]
  # @param options [Hash]
  #
  # source://caxlsx//lib/axlsx/drawing/axes.rb#30
  def to_xml_string(str = T.unsafe(nil), options = T.unsafe(nil)); end

  private

  # source://caxlsx//lib/axlsx/drawing/axes.rb#51
  def axes; end

  # source://caxlsx//lib/axlsx/drawing/axes.rb#55
  def set_cross_axis(axis); end
end

# the access class defines common properties and values for a chart axis.
#
# source://caxlsx//lib/axlsx/drawing/axis.rb#3
class Axlsx::Axis
  include ::Axlsx::OptionsParser

  # Creates an Axis object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @raise [ArgumentError] If axi_id or cross_ax are not unsigned integers
  # @return [Axis] a new instance of Axis
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#12
  def initialize(options = T.unsafe(nil)); end

  # the id of the axis.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#33
  def axID; end

  # The position of the axis
  # must be one of [:l, :r, :t, :b]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#49
  def axPos; end

  # The position of the axis
  # must be one of [:l, :r, :t, :b]
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#100
  def axPos=(v); end

  # The position of the axis
  # must be one of [:l, :r, :t, :b]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#49
  def ax_pos; end

  # The position of the axis
  # must be one of [:l, :r, :t, :b]
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#100
  def ax_pos=(v); end

  # the fill color to use in the axis shape properties. This should be a 6 character long hex string
  # e.g. FF0000 for red
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#29
  def color; end

  # The color for this axis. This value is used when rendering the axis line in the chart.
  # colors should be in 6 character rbg format
  #
  # @return [String] the rbg color assinged.
  # @see color
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#87
  def color=(color_rgb); end

  # The perpendicular axis
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#38
  def crossAx; end

  # The perpendicular axis
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#38
  def cross_axis; end

  # The crossing axis for this axis
  #
  # @param axis [Axis]
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#93
  def cross_axis=(axis); end

  # specifies how the perpendicular axis is crossed
  # must be one of [:autoZero, :min, :max]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#66
  def crosses; end

  # specifies how the perpendicular axis is crossed
  # must be one of [:autoZero, :min, :max]
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#122
  def crosses=(v); end

  # specifies if gridlines should be shown in the chart
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#78
  def delete; end

  # Specify if axis should be removed from the chart
  # default false
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#118
  def delete=(v); end

  # The number format format code for this axis
  # default :General
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#61
  def format_code; end

  # The number format format code for this axis
  # default :General
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#110
  def format_code=(v); end

  # specifies if gridlines should be shown in the chart
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#74
  def gridlines; end

  # Specify if gridlines should be shown for this axis
  # default true
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#114
  def gridlines=(v); end

  # the id of the axis.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#33
  def id; end

  # specifies how the degree of label rotation
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#70
  def label_rotation; end

  # Specify the degree of label rotation to apply to labels
  # default true
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#126
  def label_rotation=(v); end

  # The scaling of the axis
  #
  # @return [Scaling]
  # @see Scaling
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#44
  def scaling; end

  # the position of the tick labels
  # must be one of [:nextTo, :high, :low]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#55
  def tickLblPos; end

  # the position of the tick labels
  # must be one of [:nextTo, :high, :low1]
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#105
  def tickLblPos=(v); end

  # the position of the tick labels
  # must be one of [:nextTo, :high, :low]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#55
  def tick_lbl_pos; end

  # the position of the tick labels
  # must be one of [:nextTo, :high, :low1]
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#105
  def tick_lbl_pos=(v); end

  # the title for the axis. This can be a cell or a fixed string.
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#81
  def title; end

  # The title object for the chart.
  #
  # @param v [String, Cell]
  # @return [Title]
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#136
  def title=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/axis.rb#149
  def to_xml_string(str = T.unsafe(nil)); end
end

# The Bar3DChart is a three dimentional barchart (who would have guessed?) that you can add to your worksheet.
#
# @see Worksheet#add_chart
# @see Chart#add_series
# @see Package#serialize
# @see README for an example
#
# source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#7
class Axlsx::Bar3DChart < ::Axlsx::Chart
  # Creates a new bar chart object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param frame [GraphicFrame] The workbook that owns this chart.
  # @param options [Hash] a customizable set of options
  # @return [Bar3DChart] a new instance of Bar3DChart
  # @see Chart
  # @see View3D
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#73
  def initialize(frame, options = T.unsafe(nil)); end

  # A hash of axes used by this chart. Bar charts have a value and
  # category axes specified via axes[:val_axes] and axes[:cat_axis]
  #
  # @return [Axes]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#141
  def axes; end

  # The direction of the bars in the chart
  # must be one of [:bar, :col]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#25
  def barDir; end

  # The direction of the bars in the chart
  # must be one of [:bar, :col]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#84
  def barDir=(v); end

  # The direction of the bars in the chart
  # must be one of [:bar, :col]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#25
  def bar_dir; end

  # The direction of the bars in the chart
  # must be one of [:bar, :col]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#84
  def bar_dir=(v); end

  # the category axis
  #
  # @return [CatAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#10
  def catAxis; end

  # the category axis
  #
  # @return [CatAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#10
  def cat_axis; end

  # space between bar or column clusters, as a percentage of the bar or column width.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#32
  def gapDepth; end

  # space between bar or column clusters, as a percentage of the bar or column width.
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#105
  def gapDepth=(v); end

  # space between bar or column clusters, as a percentage of the bar or column width.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#37
  def gapWidth; end

  # space between bar or column clusters, as a percentage of the bar or column width.
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#98
  def gapWidth=(v); end

  # space between bar or column clusters, as a percentage of the bar or column width.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#32
  def gap_depth; end

  # space between bar or column clusters, as a percentage of the bar or column width.
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#105
  def gap_depth=(v); end

  # space between bar or column clusters, as a percentage of the bar or column width.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#37
  def gap_width; end

  # space between bar or column clusters, as a percentage of the bar or column width.
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#98
  def gap_width=(v); end

  # grouping for a column, line, or area chart.
  # must be one of  [:percentStacked, :clustered, :standard, :stacked]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#45
  def grouping; end

  # grouping for a column, line, or area chart.
  # must be one of  [:percentStacked, :clustered, :standard, :stacked]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#92
  def grouping=(v); end

  # The shabe of the bars or columns
  # must be one of  [:cone, :coneToMax, :box, :cylinder, :pyramid, :pyramidToMax]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#52
  def shape; end

  # The shabe of the bars or columns
  # must be one of  [:cone, :coneToMax, :box, :cylinder, :pyramid, :pyramidToMax]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#113
  def shape=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#121
  def to_xml_string(str = T.unsafe(nil)); end

  # the value axis
  #
  # @return [ValAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#17
  def valAxis; end

  # the value axis
  #
  # @return [ValAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_3D_chart.rb#17
  def val_axis; end
end

# The BarChart is a two dimentional barchart that you can add to your worksheet.
#
# @see Worksheet#add_chart
# @see Chart#add_series
# @see Package#serialize
# @see README for an example
#
# source://caxlsx//lib/axlsx/drawing/bar_chart.rb#7
class Axlsx::BarChart < ::Axlsx::Chart
  # Creates a new bar chart object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param frame [GraphicFrame] The workbook that owns this chart.
  # @param options [Hash] a customizable set of options
  # @return [BarChart] a new instance of BarChart
  # @see Chart
  #
  # source://caxlsx//lib/axlsx/drawing/bar_chart.rb#66
  def initialize(frame, options = T.unsafe(nil)); end

  # A hash of axes used by this chart. Bar charts have a value and
  # category axes specified via axes[:val_axes] and axes[:cat_axis]
  #
  # @return [Axes]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_chart.rb#131
  def axes; end

  # The direction of the bars in the chart
  # must be one of [:bar, :col]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_chart.rb#25
  def barDir; end

  # The direction of the bars in the chart
  # must be one of [:bar, :col]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_chart.rb#76
  def barDir=(v); end

  # The direction of the bars in the chart
  # must be one of [:bar, :col]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_chart.rb#25
  def bar_dir; end

  # The direction of the bars in the chart
  # must be one of [:bar, :col]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_chart.rb#76
  def bar_dir=(v); end

  # the category axis
  #
  # @return [CatAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_chart.rb#10
  def catAxis; end

  # the category axis
  #
  # @return [CatAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_chart.rb#10
  def cat_axis; end

  # space between bar or column clusters, as a percentage of the bar or column width.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_chart.rb#32
  def gapWidth; end

  # space between bar or column clusters, as a percentage of the bar or column width.
  #
  # source://caxlsx//lib/axlsx/drawing/bar_chart.rb#90
  def gapWidth=(v); end

  # space between bar or column clusters, as a percentage of the bar or column width.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_chart.rb#32
  def gap_width; end

  # space between bar or column clusters, as a percentage of the bar or column width.
  #
  # source://caxlsx//lib/axlsx/drawing/bar_chart.rb#90
  def gap_width=(v); end

  # grouping for a column, line, or area chart.
  # must be one of  [:percentStacked, :clustered, :standard, :stacked]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_chart.rb#40
  def grouping; end

  # grouping for a column, line, or area chart.
  # must be one of  [:percentStacked, :clustered, :standard, :stacked]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_chart.rb#84
  def grouping=(v); end

  # Overlap between series
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_chart.rb#46
  def overlap; end

  # source://caxlsx//lib/axlsx/drawing/bar_chart.rb#96
  def overlap=(v); end

  # The shape of the bars or columns
  # must be one of  [:cone, :coneToMax, :box, :cylinder, :pyramid, :pyramidToMax]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_chart.rb#53
  def shape; end

  # The shape of the bars or columns
  # must be one of  [:cone, :coneToMax, :box, :cylinder, :pyramid, :pyramidToMax]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_chart.rb#103
  def shape=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_chart.rb#111
  def to_xml_string(str = T.unsafe(nil)); end

  # the value axis
  #
  # @return [ValAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_chart.rb#17
  def valAxis; end

  # the value axis
  #
  # @return [ValAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_chart.rb#17
  def val_axis; end
end

# A BarSeries defines the title, data and labels for bar charts
#
# @note The recommended way to manage series is to use Chart#add_series
# @see Worksheet#add_chart
# @see Chart#add_series
#
# source://caxlsx//lib/axlsx/drawing/bar_series.rb#6
class Axlsx::BarSeries < ::Axlsx::Series
  # Creates a new series
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param chart [Chart]
  # @param options [Hash] a customizable set of options
  # @return [BarSeries] a new instance of BarSeries
  #
  # source://caxlsx//lib/axlsx/drawing/bar_series.rb#35
  def initialize(chart, options = T.unsafe(nil)); end

  # An array of rgb colors to apply to your bar chart.
  #
  # source://caxlsx//lib/axlsx/drawing/bar_series.rb#20
  def colors; end

  # @see colors
  #
  # source://caxlsx//lib/axlsx/drawing/bar_series.rb#44
  def colors=(v); end

  # The data for this series.
  #
  # @return [NumDataSource]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_series.rb#9
  def data; end

  # The labels for this series.
  #
  # @return [Array, SimpleTypedList]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_series.rb#13
  def labels; end

  # The fill color for this series.
  # Red, green, and blue is expressed as sequence of hex digits, RRGGBB.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_series.rb#25
  def series_color; end

  # source://caxlsx//lib/axlsx/drawing/bar_series.rb#46
  def series_color=(v); end

  # The shape of the bars or columns
  #
  # @return [Symbol] must be one of [:cone, :coneToMax, :box, :cylinder, :pyramid, :pyramidToMax]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_series.rb#17
  def shape; end

  # @see shape
  #
  # source://caxlsx//lib/axlsx/drawing/bar_series.rb#51
  def shape=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/bar_series.rb#59
  def to_xml_string(str = T.unsafe(nil)); end

  private

  # assigns the data for this series
  #
  # source://caxlsx//lib/axlsx/drawing/bar_series.rb#86
  def data=(v); end

  # assigns the labels for this series
  #
  # source://caxlsx//lib/axlsx/drawing/bar_series.rb#89
  def labels=(v); end
end

# This class details a border used in Office Open XML spreadsheet styles.
#
# source://caxlsx//lib/axlsx/stylesheet/border.rb#3
class Axlsx::Border
  include ::Axlsx::SerializedAttributes
  include ::Axlsx::OptionsParser
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new Border object
  #
  # @example - Making a border
  #   p = Axlsx::Package.new
  #   red_border = p.workbook.styles.add_style :border => { :style => :thin, :color => "FFFF0000" }
  #   ws = p.workbook.add_worksheet
  #   ws.add_row [1,2,3], :style => red_border
  #   p.serialize('red_border.xlsx')
  # @note The recommended way to manage borders is with Style#add_style
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Border] a new instance of Border
  # @see Style#add_style
  #
  # source://caxlsx//lib/axlsx/stylesheet/border.rb#22
  def initialize(options = T.unsafe(nil)); end

  # @return [Boolean] The diagonal down property for the border that indicates if the border should include a diagonal line from the top left to the top right of the cell.
  #
  # source://caxlsx//lib/axlsx/stylesheet/border.rb#34
  def diagonalDown; end

  # @see diagonalDown
  #
  # source://caxlsx//lib/axlsx/stylesheet/border.rb#48
  def diagonalDown=(v); end

  # @return [Boolean] The diagonal up property for the border that indicates if the border should include a diagonal line from the bottom left to the top right of the cell.
  #
  # source://caxlsx//lib/axlsx/stylesheet/border.rb#30
  def diagonalUp; end

  # @see diagonalUp
  #
  # source://caxlsx//lib/axlsx/stylesheet/border.rb#44
  def diagonalUp=(v); end

  # @return [Boolean] The diagonal down property for the border that indicates if the border should include a diagonal line from the top left to the top right of the cell.
  #
  # source://caxlsx//lib/axlsx/stylesheet/border.rb#34
  def diagonal_down; end

  # @see diagonalDown
  #
  # source://caxlsx//lib/axlsx/stylesheet/border.rb#48
  def diagonal_down=(v); end

  # @return [Boolean] The diagonal up property for the border that indicates if the border should include a diagonal line from the bottom left to the top right of the cell.
  #
  # source://caxlsx//lib/axlsx/stylesheet/border.rb#30
  def diagonal_up; end

  # @see diagonalUp
  #
  # source://caxlsx//lib/axlsx/stylesheet/border.rb#44
  def diagonal_up=(v); end

  # @return [Boolean] The outline property for the border indicating that top, left, right and bottom borders should only be applied to the outside border of a range of cells.
  #
  # source://caxlsx//lib/axlsx/stylesheet/border.rb#38
  def outline; end

  # @see outline
  #
  # source://caxlsx//lib/axlsx/stylesheet/border.rb#52
  def outline=(v); end

  # @return [SimpleTypedList] A list of BorderPr objects for this border.
  #
  # source://caxlsx//lib/axlsx/stylesheet/border.rb#41
  def prs; end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/border.rb#57
  def to_xml_string(str = T.unsafe(nil)); end
end

# source://caxlsx//lib/axlsx/stylesheet/border.rb#7
Axlsx::Border::EDGES = T.let(T.unsafe(nil), Array)

# source://caxlsx//lib/axlsx/workbook/worksheet/border_creator.rb#2
class Axlsx::BorderCreator
  # @return [BorderCreator] a new instance of BorderCreator
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/border_creator.rb#3
  def initialize(worksheet:, cells:, edges: T.unsafe(nil), style: T.unsafe(nil), color: T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/workbook/worksheet/border_creator.rb#24
  def draw; end

  private

  # source://caxlsx//lib/axlsx/workbook/worksheet/border_creator.rb#46
  def border_cells; end

  # source://caxlsx//lib/axlsx/workbook/worksheet/border_creator.rb#55
  def first_cell; end

  # source://caxlsx//lib/axlsx/workbook/worksheet/border_creator.rb#67
  def first_col; end

  # source://caxlsx//lib/axlsx/workbook/worksheet/border_creator.rb#63
  def first_row; end

  # source://caxlsx//lib/axlsx/workbook/worksheet/border_creator.rb#59
  def last_cell; end

  # source://caxlsx//lib/axlsx/workbook/worksheet/border_creator.rb#75
  def last_col; end

  # source://caxlsx//lib/axlsx/workbook/worksheet/border_creator.rb#71
  def last_row; end
end

# A border part.
#
# source://caxlsx//lib/axlsx/stylesheet/border_pr.rb#3
class Axlsx::BorderPr
  include ::Axlsx::OptionsParser

  # Creates a new Border Part Object
  #
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [BorderPr] a new instance of BorderPr
  # @see Axlsx::Border
  #
  # source://caxlsx//lib/axlsx/stylesheet/border_pr.rb#46
  def initialize(options = T.unsafe(nil)); end

  # @return [Color] The color of this border part.
  #
  # source://caxlsx//lib/axlsx/stylesheet/border_pr.rb#6
  def color; end

  # @see color
  #
  # source://caxlsx//lib/axlsx/stylesheet/border_pr.rb#56
  def color=(v); end

  # @note The following are allowed
  #   :start
  #   :end
  #   :left
  #   :right
  #   :top
  #   :bottom
  #   :diagonal
  #   :vertical
  #   :horizontal
  # @return [Symbol] The name of this border part
  #
  # source://caxlsx//lib/axlsx/stylesheet/border_pr.rb#39
  def name; end

  # @see name
  #
  # source://caxlsx//lib/axlsx/stylesheet/border_pr.rb#54
  def name=(v); end

  # @note The following are allowed
  #   :none
  #   :thin
  #   :medium
  #   :dashed
  #   :dotted
  #   :thick
  #   :double
  #   :hair
  #   :mediumDashed
  #   :dashDot
  #   :mediumDashDot
  #   :dashDotDot
  #   :mediumDashDotDot
  #   :slantDashDot
  # @return [Symbol] The syle of this border part.
  #
  # source://caxlsx//lib/axlsx/stylesheet/border_pr.rb#25
  def style; end

  # @see style
  #
  # source://caxlsx//lib/axlsx/stylesheet/border_pr.rb#58
  def style=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/border_pr.rb#63
  def to_xml_string(str = T.unsafe(nil)); end
end

# The Break class stores the details for row and column page breaks.
#
# @see RowBreaks, ColBreaks
#
# source://caxlsx//lib/axlsx/workbook/worksheet/break.rb#4
class Axlsx::Break
  include ::Axlsx::OptionsParser
  include ::Axlsx::Accessors
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::Accessors::ClassMethods
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new Break object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option option
  # @param options A hash of attribute options for this break.
  # @param option [Hash] a customizable set of options
  # @return [Break] a new instance of Break
  # @yield [_self]
  # @yieldparam _self [Axlsx::Break] the object that the method was called on
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/break.rb#16
  def initialize(options = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def id; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def id=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def man; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def man=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def max; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def max=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def min; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def min=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def pt; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def pt=(value); end

  # serializes the break to xml
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/break.rb#28
  def to_xml_string(str = T.unsafe(nil)); end
end

# The BubbleChart allows you to insert a bubble chart into your worksheet
#
# @see Worksheet#add_chart
# @see Chart#add_series
# @see README for an example
#
# source://caxlsx//lib/axlsx/drawing/bubble_chart.rb#6
class Axlsx::BubbleChart < ::Axlsx::Chart
  # Creates a new bubble chart
  #
  # @return [BubbleChart] a new instance of BubbleChart
  #
  # source://caxlsx//lib/axlsx/drawing/bubble_chart.rb#24
  def initialize(frame, options = T.unsafe(nil)); end

  # The axes for the bubble chart. BubbleChart has an x_val_axis and
  # a y_val_axis
  #
  # @return [Axes]
  #
  # source://caxlsx//lib/axlsx/drawing/bubble_chart.rb#52
  def axes; end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/bubble_chart.rb#36
  def to_xml_string(str = T.unsafe(nil)); end

  # the x value axis
  #
  # @return [ValAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/bubble_chart.rb#11
  def xValAxis; end

  # the x value axis
  #
  # @return [ValAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/bubble_chart.rb#11
  def x_val_axis; end

  # the y value axis
  #
  # @return [ValAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/bubble_chart.rb#18
  def yValAxis; end

  # the y value axis
  #
  # @return [ValAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/bubble_chart.rb#18
  def y_val_axis; end
end

# A BubbleSeries defines the x/y position and bubble size of data in the chart
#
# @note The recommended way to manage series is to use Chart#add_series
# @see Worksheet#add_chart
# @see Chart#add_series
# @see examples/example.rb
#
# source://caxlsx//lib/axlsx/drawing/bubble_series.rb#7
class Axlsx::BubbleSeries < ::Axlsx::Series
  # Creates a new BubbleSeries
  #
  # @return [BubbleSeries] a new instance of BubbleSeries
  #
  # source://caxlsx//lib/axlsx/drawing/bubble_series.rb#26
  def initialize(chart, options = T.unsafe(nil)); end

  # The bubble size for this series.
  #
  # @return [NumDataSource]
  #
  # source://caxlsx//lib/axlsx/drawing/bubble_series.rb#18
  def bubbleSize; end

  # The fill color for this series.
  # Red, green, and blue is expressed as sequence of hex digits, RRGGBB. A perceptual gamma of 2.2 is used.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/bubble_series.rb#23
  def color; end

  # @see color
  #
  # source://caxlsx//lib/axlsx/drawing/bubble_series.rb#35
  def color=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/bubble_series.rb#42
  def to_xml_string(str = T.unsafe(nil)); end

  # The x data for this series.
  #
  # @return [AxDataSource]
  #
  # source://caxlsx//lib/axlsx/drawing/bubble_series.rb#10
  def xData; end

  # The y data for this series.
  #
  # @return [NumDataSource]
  #
  # source://caxlsx//lib/axlsx/drawing/bubble_series.rb#14
  def yData; end
end

# chart content type
#
# source://caxlsx//lib/axlsx/util/constants.rb#147
Axlsx::CHART_CT = T.let(T.unsafe(nil), String)

# chart part
#
# source://caxlsx//lib/axlsx/util/constants.rb#231
Axlsx::CHART_PN = T.let(T.unsafe(nil), String)

# chart rels namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#84
Axlsx::CHART_R = T.let(T.unsafe(nil), String)

# comments content type
#
# source://caxlsx//lib/axlsx/util/constants.rb#150
Axlsx::COMMENT_CT = T.let(T.unsafe(nil), String)

# comment part
#
# source://caxlsx//lib/axlsx/util/constants.rb#237
Axlsx::COMMENT_PN = T.let(T.unsafe(nil), String)

# comment rels namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#93
Axlsx::COMMENT_R = T.let(T.unsafe(nil), String)

# comment relation for nil target
#
# source://caxlsx//lib/axlsx/util/constants.rb#96
Axlsx::COMMENT_R_NULL = T.let(T.unsafe(nil), String)

# content types part
#
# source://caxlsx//lib/axlsx/util/constants.rb#195
Axlsx::CONTENT_TYPES_PN = T.let(T.unsafe(nil), String)

# content types validation schema
#
# source://caxlsx//lib/axlsx/util/constants.rb#249
Axlsx::CONTENT_TYPES_XSD = T.let(T.unsafe(nil), String)

# The regular expression used to remove control characters from worksheets
#
# source://caxlsx//lib/axlsx/util/constants.rb#403
Axlsx::CONTROL_CHARS = T.let(T.unsafe(nil), String)

# core content type
#
# source://caxlsx//lib/axlsx/util/constants.rb#135
Axlsx::CORE_CT = T.let(T.unsafe(nil), String)

# core properties namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#18
Axlsx::CORE_NS = T.let(T.unsafe(nil), String)

# dc elements (core) namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#21
Axlsx::CORE_NS_DC = T.let(T.unsafe(nil), String)

# dcmit (core) namespcace
#
# source://caxlsx//lib/axlsx/util/constants.rb#24
Axlsx::CORE_NS_DCMIT = T.let(T.unsafe(nil), String)

# dc terms namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#27
Axlsx::CORE_NS_DCT = T.let(T.unsafe(nil), String)

# xml schema namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#30
Axlsx::CORE_NS_XSI = T.let(T.unsafe(nil), String)

# core part
#
# source://caxlsx//lib/axlsx/util/constants.rb#192
Axlsx::CORE_PN = T.let(T.unsafe(nil), String)

# core rels namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#69
Axlsx::CORE_R = T.let(T.unsafe(nil), String)

# core validation schema
#
# source://caxlsx//lib/axlsx/util/constants.rb#246
Axlsx::CORE_XSD = T.let(T.unsafe(nil), String)

# A CatAxis object defines a chart category axis
#
# source://caxlsx//lib/axlsx/drawing/cat_axis.rb#3
class Axlsx::CatAxis < ::Axlsx::Axis
  # Creates a new CatAxis object
  #
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [CatAxis] a new instance of CatAxis
  #
  # source://caxlsx//lib/axlsx/drawing/cat_axis.rb#7
  def initialize(options = T.unsafe(nil)); end

  # From the docs: This element specifies that this axis is a date or text axis based on the data that is used for the axis labels, not a specific choice.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/cat_axis.rb#18
  def auto; end

  # From the docs: This element specifies that this axis is a date or text axis based on the data that is used for the axis labels, not a specific choice.
  #
  # source://caxlsx//lib/axlsx/drawing/cat_axis.rb#54
  def auto=(v); end

  # specifies how the perpendicular axis is crossed
  # must be one of [:ctr, :l, :r]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/cat_axis.rb#23
  def lblAlgn; end

  # specifies how the perpendicular axis is crossed
  # must be one of [:ctr, :l, :r]
  #
  # source://caxlsx//lib/axlsx/drawing/cat_axis.rb#58
  def lblAlgn=(v); end

  # The offset of the labels
  # must be between a string between 0 and 1000
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/cat_axis.rb#29
  def lblOffset; end

  # The offset of the labels
  # must be between a string between 0 and 1000
  #
  # source://caxlsx//lib/axlsx/drawing/cat_axis.rb#63
  def lblOffset=(v); end

  # specifies how the perpendicular axis is crossed
  # must be one of [:ctr, :l, :r]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/cat_axis.rb#23
  def lbl_algn; end

  # specifies how the perpendicular axis is crossed
  # must be one of [:ctr, :l, :r]
  #
  # source://caxlsx//lib/axlsx/drawing/cat_axis.rb#58
  def lbl_algn=(v); end

  # The offset of the labels
  # must be between a string between 0 and 1000
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/cat_axis.rb#29
  def lbl_offset; end

  # The offset of the labels
  # must be between a string between 0 and 1000
  #
  # source://caxlsx//lib/axlsx/drawing/cat_axis.rb#63
  def lbl_offset=(v); end

  # The number of tick lables to skip between labels
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/cat_axis.rb#34
  def tickLblSkip; end

  # @see tick_lbl_skip
  #
  # source://caxlsx//lib/axlsx/drawing/cat_axis.rb#46
  def tickLblSkip=(v); end

  # The number of tickmarks to be skipped before the next one is rendered.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/cat_axis.rb#39
  def tickMarkSkip; end

  # @see tick_mark_skip
  #
  # source://caxlsx//lib/axlsx/drawing/cat_axis.rb#50
  def tickMarkSkip=(v); end

  # The number of tick lables to skip between labels
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/cat_axis.rb#34
  def tick_lbl_skip; end

  # @see tick_lbl_skip
  #
  # source://caxlsx//lib/axlsx/drawing/cat_axis.rb#46
  def tick_lbl_skip=(v); end

  # The number of tickmarks to be skipped before the next one is rendered.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/cat_axis.rb#39
  def tick_mark_skip; end

  # @see tick_mark_skip
  #
  # source://caxlsx//lib/axlsx/drawing/cat_axis.rb#50
  def tick_mark_skip=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/cat_axis.rb#69
  def to_xml_string(str = T.unsafe(nil)); end
end

# regex for validating label offset
#
# source://caxlsx//lib/axlsx/drawing/cat_axis.rb#43
Axlsx::CatAxis::LBL_OFFSET_REGEX = T.let(T.unsafe(nil), Regexp)

# A cell in a worksheet.
# Cell stores inforamation requried to serialize a single worksheet cell to xml. You must provde the Row that the cell belongs to and the cells value. The data type will automatically be determed if you do not specify the :type option. The default style will be applied if you do not supply the :style option. Changing the cell's type will recast the value to the type specified. Altering the cell's value via the property accessor will also automatically cast the provided value to the cell's type.
#
# @note The recommended way to generate cells is via Worksheet#add_row
# @see Worksheet#add_row
#
# source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#8
class Axlsx::Cell
  include ::Axlsx::OptionsParser

  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param row [Row] The row this cell belongs to.
  # @param value [Any] The value associated with this cell.
  # @param options [Hash] a customizable set of options
  # @return [Cell] a new instance of Cell
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#34
  def initialize(row, value = T.unsafe(nil), options = T.unsafe(nil)); end

  # The index of the cellXfs item to be applied to this cell.
  #
  # @param styles [Hash]
  # @see Axlsx::Styles
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#95
  def add_style(style); end

  # Attempts to determine the correct width for this cell's content
  #
  # @return [Float]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#427
  def autowidth; end

  # The inline bold property for the cell
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#235
  def b; end

  # @see b
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#238
  def b=(v); end

  # The inline charset property for the cell
  # As far as I can tell, this is pretty much ignored. However, based on the spec it should be one of the following:
  # 0 ￼ ANSI_CHARSET
  # 1 DEFAULT_CHARSET
  # 2 SYMBOL_CHARSET
  # 77 MAC_CHARSET
  # 128 SHIFTJIS_CHARSET
  # 129 ￼ HANGUL_CHARSET
  # 130 ￼ JOHAB_CHARSET
  # 134 ￼ GB2312_CHARSET
  # 136 ￼ CHINESEBIG5_CHARSET
  # 161 ￼ GREEK_CHARSET
  # 162 ￼ TURKISH_CHARSET
  # 163 ￼ VIETNAMESE_CHARSET
  # 177 ￼ HEBREW_CHARSET
  # 178 ￼ ARABIC_CHARSET
  # 186 ￼ BALTIC_CHARSET
  # 204 ￼ RUSSIAN_CHARSET
  # 222 ￼ THAI_CHARSET
  # 238 ￼ EASTEUROPE_CHARSET
  # 255 ￼ OEM_CHARSET
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#214
  def charset; end

  # @see charset
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#217
  def charset=(v); end

  # Returns the sanatized value
  # TODO find a better way to do this as it accounts for 30% of
  # processing time in benchmarking...
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#447
  def clean_value; end

  # The inline color property for the cell
  #
  # @return [Color]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#297
  def color; end

  # @param v [String] The 8 character representation for an rgb color #FFFFFFFF"
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#300
  def color=(v); end

  # The inline condense property for the cell
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#270
  def condense; end

  # @see condense
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#273
  def condense=(v); end

  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#171
  def contains_rich_text?; end

  # Whether to treat values starting with an equals sign as formulas or as literal strings.
  # Allowing user-generated data to be interpreted as formulas is a security risk.
  # See https://www.owasp.org/index.php/CSV_Injection for details.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#146
  def escape_formulas; end

  # Sets whether to treat values starting with an equals sign as formulas or as literal strings.
  #
  # @param value [Boolean] The value to set.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#150
  def escape_formulas=(value); end

  # The inline extend property for the cell
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#277
  def extend; end

  # @see extend
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#280
  def extend=(v); end

  # The inline family property for the cell
  # 1 Roman
  # 2 Swiss
  # 3 Modern
  # 4 Script
  # 5 Decorative
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#226
  def family; end

  # @see family
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#229
  def family=(v); end

  # The inline font_name property for the cell
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#187
  def font_name; end

  # @see font_name
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#190
  def font_name=(v); end

  # this is the cached value for formula cells. If you want the values to render in iOS/Mac OSX preview
  # you need to set this.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#56
  def formula_value; end

  # this is the cached value for formula cells. If you want the values to render in iOS/Mac OSX preview
  # you need to set this.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#56
  def formula_value=(_arg0); end

  # The inline italic property for the cell
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#242
  def i; end

  # @see i
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#245
  def i=(v); end

  # @return [Integer] The index of the cell in the containing row.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#339
  def index; end

  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#399
  def is_array_formula?; end

  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#393
  def is_formula?; end

  # Indicates that the cell has one or more of the custom cell styles applied.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#167
  def is_text_run?; end

  # Merges all the cells in a range created between this cell and the cell or string name for a cell  provided
  #
  # @param target [Cell, String] The last cell, or str ref for the cell in the merge range
  # @see worksheet.merge_cells
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#375
  def merge(target); end

  # returns the name of the cell
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#423
  def name; end

  # Creates a defined name in the workbook for this cell.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#417
  def name=(label); end

  # The inline outline property for the cell
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#256
  def outline; end

  # @see outline
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#259
  def outline=(v); end

  # Indicates if the cell is good for shared string table
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#176
  def plain_string?; end

  # @return [Array] of x/y coordinates in the sheet for this cell.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#368
  def pos; end

  # @example Relative Cell Reference
  #   ws.rows.first.cells.first.r #=> "A1"
  # @return [String] The alpha(column)numeric(row) reference for this sell.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#346
  def r; end

  # @example Absolute Cell Reference
  #   ws.rows.first.cells.first.r #=> "$A$1"
  # @return [String] The absolute alpha(column)numeric(row) reference for this sell.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#353
  def r_abs; end

  # Returns the value of attribute raw_style.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#90
  def raw_style; end

  # Sets the attribute raw_style
  #
  # @param value the value to set the attribute raw_style to.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#90
  def raw_style=(_arg0); end

  # returns the absolute or relative string style reference for
  # this cell.
  # returned.
  #
  # @param absolute [Boolean] -when false a relative reference will be
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#412
  def reference(absolute = T.unsafe(nil)); end

  # The row this cell belongs to.
  #
  # @return [Row]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#118
  def row; end

  # The inline scheme property for the cell
  # this must be one of [:none, major, minor]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#326
  def scheme; end

  # @see scheme
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#329
  def scheme=(v); end

  # The inline shadow property for the cell
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#263
  def shadow; end

  # @see shadow
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#266
  def shadow=(v); end

  # The Shared Strings Table index for this cell
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#336
  def ssti; end

  # The inline strike property for the cell
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#249
  def strike; end

  # @see strike
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#252
  def strike=(v); end

  # The index of the cellXfs item to be applied to this cell.
  #
  # @return [Integer]
  # @see Axlsx::Styles
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#86
  def style; end

  # @raise [ArgumentError] Invalid cellXfs id if the value provided is not within cellXfs items range.
  # @return [Integer] The cellXfs item index applied to this cell.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#359
  def style=(v); end

  # The inline sz property for the cell
  #
  # @return [Inteter]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#307
  def sz; end

  # @see sz
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#310
  def sz=(v); end

  # Serializes the cell
  #
  # @param r_index [Integer] The row index for the cell
  # @param c_index [Integer] The cell index in the row.
  # @param str [String] The string index the cell content will be appended to. Defaults to empty string.
  # @return [String] xml text for the cell
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#389
  def to_xml_string(r_index, c_index, str = T.unsafe(nil)); end

  # The cell's data type.
  # Changing the type for a cell will recast the value into that type. If no type option is specified in the constructor, the type is
  # automatically determed.
  #
  # @note If the value provided cannot be cast into the type specified, type is changed to :string and the following logic is applied.
  #   :string to :integer or :float, type conversions always return 0 or 0.0
  #   :string, :integer, or :float to :time conversions always return the original value as a string and set the cells type to :string.
  #   No support is currently implemented for parsing time strings.
  # @raise [ArgumentExeption] Cell.type must be one of [:date, time, :float, :integer, :string, :boolean]
  # @return [Symbol] The type of data this cell's value is cast to.
  # @see Cell#cell_type_from_value
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#131
  def type; end

  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#136
  def type=(v); end

  # The inline underline property for the cell.
  # It must be one of :none, :single, :double, :singleAccounting, :doubleAccounting, true
  #
  # @note true is for backwards compatability and is reassigned to :single
  # @return [Boolean]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#287
  def u; end

  # @see u
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#290
  def u=(v); end

  # The value of this cell.
  #
  # @return [String, Integer, Float, Time, Boolean] casted value based on cell's type attribute.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#157
  def value; end

  # @see value
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#160
  def value=(v); end

  # The inline vertical alignment property for the cell
  # this must be one of [:baseline, :subscript, :superscript]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#315
  def vertAlign; end

  # @see vertAlign
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#318
  def vertAlign=(v); end

  private

  # Cast the value into this cells data type.
  #
  # @note About Time - Time in OOXML is *different* from what you might expect. The history as to why is interesting, but you can safely assume that if you are generating docs on a mac, you will want to specify Workbook.1904 as true when using time typed values.
  # @see Axlsx#date1904
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#528
  def cast_value(v); end

  # Determines the cell type based on the cell value.
  #
  # @note This is only used when a cell is created but no :type option is specified, the following rules apply:
  #   1. If the value is an instance of Date, the type is set to :date
  #   2. If the value is an instance of Time, the type is set to :time
  #   3. If the value is an instance of TrueClass or FalseClass, the type is set to :boolean
  #   4. :float and :integer types are determined by regular expression matching.
  #   5. Anything that does not meet either of the above is determined to be :string.
  # @return [Symbol] The determined type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#502
  def cell_type_from_value(v); end

  # we scale the font size if bold style is applied to either the style font or
  # the cell itself. Yes, it is a bit of a hack, but it is much better than using
  # imagemagick and loading metrics for every character.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#472
  def font_size; end

  # Utility method for setting inline style attributes
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#480
  def set_run_style(validator, attr, value); end

  # @see ssti
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#489
  def ssti=(v); end

  # Returns the width of a string according to the current style
  # This is still not perfect...
  #  - scaling is not linear as font sizes increase
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#464
  def string_width(string, font_size); end

  # source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#457
  def styles; end
end

# Leading characters that indicate an array formula.
#
# source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#78
Axlsx::Cell::ARRAY_FORMULA_PREFIXES = T.let(T.unsafe(nil), Array)

# Trailing character that indicates an array formula.
#
# source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#81
Axlsx::Cell::ARRAY_FORMULA_SUFFIX = T.let(T.unsafe(nil), String)

# An array of valid cell types
#
# source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#70
Axlsx::Cell::CELL_TYPES = T.let(T.unsafe(nil), Array)

# Leading characters that indicate a formula.
# See: https://owasp.org/www-community/attacks/CSV_Injection
#
# source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#75
Axlsx::Cell::FORMULA_PREFIXES = T.let(T.unsafe(nil), Array)

# An array of available inline styes.
# TODO change this to a hash where each key defines attr name and validator (and any info the validator requires)
# then move it out to a module so we can re-use in in other classes.
# needs to define bla=(v) and bla methods on the class that hook into a
# set_attr method that kicks the suplied validator and updates the instance_variable
# for the key
#
# source://caxlsx//lib/axlsx/workbook/worksheet/cell.rb#64
Axlsx::Cell::INLINE_STYLES = T.let(T.unsafe(nil), Array)

# CellAlignment stores information about the cell alignment of a style Xf Object.
#
# @note Using Styles#add_style is the recommended way to manage cell alignment.
# @see Styles#add_style
#
# source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#5
class Axlsx::CellAlignment
  include ::Axlsx::SerializedAttributes
  include ::Axlsx::OptionsParser
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Create a new cell_alignment object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [CellAlignment] a new instance of CellAlignment
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#20
  def initialize(options = T.unsafe(nil)); end

  # The horizontal alignment of the cell.
  #
  # @note The horizontal cell alignement style must be one of
  #   :general
  #   :left
  #   :center
  #   :right
  #   :fill
  #   :justify
  #   :centerContinuous
  #   :distributed
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#36
  def horizontal; end

  # @see horizontal
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#87
  def horizontal=(v); end

  # The amount of indent
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#61
  def indent; end

  # @see indent
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#99
  def indent=(v); end

  # Indicate if the last line should be justified.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#70
  def justifyLastLine; end

  # @see justifyLastLine
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#106
  def justifyLastLine=(v); end

  # Indicate if the last line should be justified.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#70
  def justify_last_line; end

  # @see justifyLastLine
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#106
  def justify_last_line=(v); end

  # The reading order of the text
  # 0 Context Dependent
  # 1 Left-to-Right
  # 2 Right-to-Left
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#83
  def readingOrder; end

  # @see readingOrder
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#114
  def readingOrder=(v); end

  # The reading order of the text
  # 0 Context Dependent
  # 1 Left-to-Right
  # 2 Right-to-Left
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#83
  def reading_order; end

  # @see readingOrder
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#114
  def reading_order=(v); end

  # The amount of relativeIndent
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#65
  def relativeIndent; end

  # @see relativeIndent
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#102
  def relativeIndent=(v); end

  # The amount of relativeIndent
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#65
  def relative_indent; end

  # @see relativeIndent
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#102
  def relative_indent=(v); end

  # Indicate if the text should be shrunk to the fit in the cell.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#75
  def shrinkToFit; end

  # @see shrinkToFit
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#110
  def shrinkToFit=(v); end

  # Indicate if the text should be shrunk to the fit in the cell.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#75
  def shrink_to_fit; end

  # @see shrinkToFit
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#110
  def shrink_to_fit=(v); end

  # The textRotation of the cell.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#51
  def textRotation; end

  # @see textRotation
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#91
  def textRotation=(v); end

  # The textRotation of the cell.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#51
  def text_rotation; end

  # @see textRotation
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#91
  def text_rotation=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#120
  def to_xml_string(str = T.unsafe(nil)); end

  # The vertical alignment of the cell.
  #
  # @note The vertical cell allingment style must be one of the following:
  #   :top
  #   :center
  #   :bottom
  #   :justify
  #   :distributed
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#47
  def vertical; end

  # @see vertical
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#89
  def vertical=(v); end

  # Indicate if the text of the cell should wrap
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#56
  def wrapText; end

  # @see wrapText
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#95
  def wrapText=(v); end

  # Indicate if the text of the cell should wrap
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#56
  def wrap_text; end

  # @see wrapText
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_alignment.rb#95
  def wrap_text=(v); end
end

# CellProtection stores information about locking or hiding cells in spreadsheet.
#
# @note Using Styles#add_style is the recommended way to manage cell protection.
# @see Styles#add_style
#
# source://caxlsx//lib/axlsx/stylesheet/cell_protection.rb#5
class Axlsx::CellProtection
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new CellProtection
  #
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [CellProtection] a new instance of CellProtection
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_protection.rb#22
  def initialize(options = T.unsafe(nil)); end

  # specifies locking for cells that have the style containing this protection
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_protection.rb#13
  def hidden; end

  # @see hidden
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_protection.rb#27
  def hidden=(v); end

  # specifies if the cells that have the style containing this protection
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_protection.rb#17
  def locked; end

  # @see locked
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_protection.rb#29
  def locked=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_protection.rb#34
  def to_xml_string(str = T.unsafe(nil)); end
end

# The Cell Serializer class contains the logic for serializing cells based on their type.
#
# source://caxlsx//lib/axlsx/workbook/worksheet/cell_serializer.rb#3
class Axlsx::CellSerializer
  class << self
    # Serializes cells that are type array formula
    #
    # @param cell [Cell] The cell that is being serialized
    # @param str [String] The string the serialized content will be appended to.
    # @return [String]
    #
    # source://caxlsx//lib/axlsx/workbook/worksheet/cell_serializer.rb#97
    def array_formula_serialization(cell, str = T.unsafe(nil)); end

    # Serializes cells that are type boolean
    #
    # @param cell [Cell] The cell that is being serialized
    # @param str [String] The string the serialized content will be appended to.
    # @return [String]
    #
    # source://caxlsx//lib/axlsx/workbook/worksheet/cell_serializer.rb#64
    def boolean(cell, str = T.unsafe(nil)); end

    # serializes cells that are type date
    #
    # @param cell [Cell] The cell that is being serialized
    # @param str [String] The string the serialized content will be appended to.
    # @return [String]
    #
    # source://caxlsx//lib/axlsx/workbook/worksheet/cell_serializer.rb#48
    def date(cell, str = T.unsafe(nil)); end

    # Serializes cells that are type float
    #
    # @param cell [Cell] The cell that is being serialized
    # @param str [String] The string the serialized content will be appended to.
    # @return [String]
    #
    # source://caxlsx//lib/axlsx/workbook/worksheet/cell_serializer.rb#72
    def float(cell, str = T.unsafe(nil)); end

    # Serializes cells that are type formula
    #
    # @param cell [Cell] The cell that is being serialized
    # @param str [String] The string the serialized content will be appended to.
    # @return [String]
    #
    # source://caxlsx//lib/axlsx/workbook/worksheet/cell_serializer.rb#88
    def formula_serialization(cell, str = T.unsafe(nil)); end

    # Serializes cells that are type inline_string
    #
    # @param cell [Cell] The cell that is being serialized
    # @param str [String] The string the serialized content will be appended to.
    # @return [String]
    #
    # source://caxlsx//lib/axlsx/workbook/worksheet/cell_serializer.rb#106
    def inline_string_serialization(cell, str = T.unsafe(nil)); end

    # Serializes cells that are type integer
    #
    # @param cell [Cell] The cell that is being serialized
    # @param str [String] The string the serialized content will be appended to.
    # @return [String]
    #
    # source://caxlsx//lib/axlsx/workbook/worksheet/cell_serializer.rb#80
    def integer(cell, str = T.unsafe(nil)); end

    # serializes cells that are type iso_8601
    #
    # @param cell [Cell] The cell that is being serialized
    # @param str [String] The string the serialized content will be appended to.
    # @return [String]
    #
    # source://caxlsx//lib/axlsx/workbook/worksheet/cell_serializer.rb#40
    def iso_8601(cell, str = T.unsafe(nil)); end

    # Serializes cells that are of the type richtext
    #
    # @param cell [Cell] The cell that is being serialized
    # @param str [String] The string the serialized content will be appended to.
    # @return [String]
    #
    # source://caxlsx//lib/axlsx/workbook/worksheet/cell_serializer.rb#132
    def richtext(cell, str); end

    # builds an xml text run based on this cells attributes.
    #
    # @param str [String] The string instance this run will be concated to.
    # @return [String]
    #
    # source://caxlsx//lib/axlsx/workbook/worksheet/cell_serializer.rb#22
    def run_xml_string(cell, str = T.unsafe(nil)); end

    # Serializes cells that are type string
    #
    # @param cell [Cell] The cell that is being serialized
    # @param str [String] The string the serialized content will be appended to.
    # @return [String]
    #
    # source://caxlsx//lib/axlsx/workbook/worksheet/cell_serializer.rb#116
    def string(cell, str = T.unsafe(nil)); end

    # Serializes cells that are of the type text
    #
    # @param cell [Cell] The cell that is being serialized
    # @param str [String] The string the serialized content will be appended to.
    # @return [String]
    #
    # source://caxlsx//lib/axlsx/workbook/worksheet/cell_serializer.rb#144
    def text(cell, str); end

    # Serializes cells that are type time
    #
    # @param cell [Cell] The cell that is being serialized
    # @param str [String] The string the serialized content will be appended to.
    # @return [String]
    #
    # source://caxlsx//lib/axlsx/workbook/worksheet/cell_serializer.rb#56
    def time(cell, str = T.unsafe(nil)); end

    # Calls the proper serialization method based on type.
    #
    # @param row_index [Integer] The index of the cell's row
    # @param column_index [Integer] The index of the cell's column
    # @param str [String] The string to apend serialization to.
    # @return [String]
    #
    # source://caxlsx//lib/axlsx/workbook/worksheet/cell_serializer.rb#10
    def to_xml_string(row_index, column_index, cell, str = T.unsafe(nil)); end

    private

    # source://caxlsx//lib/axlsx/workbook/worksheet/cell_serializer.rb#154
    def numeric(cell, str = T.unsafe(nil)); end

    # source://caxlsx//lib/axlsx/workbook/worksheet/cell_serializer.rb#158
    def value_serialization(serialization_type, serialization_value, str = T.unsafe(nil)); end
  end
end

# CellStyle defines named styles that reference defined formatting records and can be used in your worksheet.
#
# @note Using Styles#add_style is the recommended way to manage cell styling.
# @see Styles#add_style
#
# source://caxlsx//lib/axlsx/stylesheet/cell_style.rb#5
class Axlsx::CellStyle
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creats a new CellStyle object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [CellStyle] a new instance of CellStyle
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_style.rb#16
  def initialize(options = T.unsafe(nil)); end

  # The buildinId to use when this named style is applied
  #
  # @return [Integer]
  # @see Axlsx::NumFmt
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_style.rb#34
  def builtinId; end

  # @see builtinId
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_style.rb#53
  def builtinId=(v); end

  # Indicates that the build in style reference has been customized.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_style.rb#46
  def customBuiltin; end

  # @see customBuiltin
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_style.rb#59
  def customBuiltin=(v); end

  # Determines if this named style should show in the list of styles when using excel
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_style.rb#42
  def hidden; end

  # @see hidden
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_style.rb#57
  def hidden=(v); end

  # Determines if this formatting is for an outline style, and what level of the outline it is to be applied to.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_style.rb#38
  def iLevel; end

  # @see iLivel
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_style.rb#55
  def iLevel=(v); end

  # The name of this cell style
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_style.rb#24
  def name; end

  # @see name
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_style.rb#49
  def name=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_style.rb#64
  def to_xml_string(str = T.unsafe(nil)); end

  # The formatting record id this named style utilizes
  #
  # @return [Integer]
  # @see Axlsx::Xf
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_style.rb#29
  def xfId; end

  # @see xfId
  #
  # source://caxlsx//lib/axlsx/stylesheet/cell_style.rb#51
  def xfId=(v); end
end

# Conditional Format Value Object
# Describes the values of the interpolation points in a gradient scale. This object is used by ColorScale, DataBar and IconSet classes
#
# @note The recommended way to manage these rules is via Worksheet#add_conditional_formatting
# @see Worksheet#add_conditional_formatting
# @see ConditionalFormattingRule#initialize
#
# source://caxlsx//lib/axlsx/workbook/worksheet/cfvo.rb#9
class Axlsx::Cfvo
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new Cfvo object
  #
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Cfvo] a new instance of Cfvo
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cfvo.rb#17
  def initialize(options = T.unsafe(nil)); end

  # Type (xsd:boolean)
  # For icon sets, determines whether this threshold value uses the greater than or equal to operator. 0 indicates 'greater than' is used instead of 'greater than or equal to'.
  # The default value is true
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cfvo.rb#33
  def gte; end

  # @see gte
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cfvo.rb#44
  def gte=(v); end

  # serialize the Csvo object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cfvo.rb#56
  def to_xml_string(str = T.unsafe(nil)); end

  # Type (ST_CfvoType)
  # The type of this conditional formatting value object. options are num, percent, max, min, formula and percentile
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cfvo.rb#27
  def type; end

  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cfvo.rb#41
  def type=(v); end

  # Type (ST_Xstring)
  # The value of the conditional formatting object
  # This library will accept any value so long as it supports to_s
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cfvo.rb#38
  def val; end

  # @raise [ArgumentError]
  # @see val
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cfvo.rb#47
  def val=(v); end
end

# A collection of Cfvo objects that initializes with the required
# first two items
#
# source://caxlsx//lib/axlsx/workbook/worksheet/cfvos.rb#4
class Axlsx::Cfvos < ::Axlsx::SimpleTypedList
  # @return [Cfvos] a new instance of Cfvos
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cfvos.rb#5
  def initialize; end

  # Serialize the Cfvo object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cfvos.rb#12
  def to_xml_string(str = T.unsafe(nil)); end
end

# A Chart is the superclass for specific charts
#
# @note Worksheet#add_chart is the recommended way to create charts for your worksheets.
# @see README for examples
#
# source://caxlsx//lib/axlsx/drawing/chart.rb#5
class Axlsx::Chart
  include ::Axlsx::OptionsParser

  # Creates a new chart object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param frame [GraphicalFrame] The frame that holds this chart.
  # @param options [Hash] a customizable set of options
  # @return [Chart] a new instance of Chart
  # @yield [_self]
  # @yieldparam _self [Axlsx::Chart] the object that the method was called on
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#16
  def initialize(frame, options = T.unsafe(nil)); end

  # Adds a new series to the chart's series collection.
  #
  # @return [Series]
  # @see Series
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#181
  def add_series(options = T.unsafe(nil)); end

  # Background color for the chart
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#100
  def bg_color; end

  # Assigns a background color to chart area
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#187
  def bg_color=(v); end

  # TODO data labels!
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#53
  def d_lbls; end

  # How to display blank values
  # Options are
  # * gap:  Display nothing
  # * span: Not sure what this does
  # * zero: Display as if the value were zero, not blank
  # Default :gap (although this really should vary by chart type and grouping)
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#96
  def display_blanks_as; end

  # How to display blank values
  #
  # @param v [Symbol]
  # @return [Symbol]
  # @see display_blanks_as
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#156
  def display_blanks_as=(v); end

  # This is a short cut method to set the end anchor position
  # If you need finer granularity in positioning use
  # graphic_frame.anchor.to.colOff / rowOff
  #
  # @param x [Integer] The column - default 10
  # @param y [Integer] The row - default 10
  # @return [Marker]
  # @see start_at
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#286
  def end_at(x = T.unsafe(nil), y = T.unsafe(nil)); end

  # backwards compatibility to allow chart.to and chart.from access to anchor markers
  #
  # @note This will be disconinued in version 2.0.0. please use the start_at method
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#174
  def from; end

  # A reference to the graphic frame that owns this chart
  #
  # @return [GraphicFrame]
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#42
  def graphic_frame; end

  # The index of this chart in the workbooks charts collection
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#118
  def index; end

  # Set the location of the chart's legend
  #
  # @note The following are allowed
  #   :b
  #   :l
  #   :r
  #   :t
  #   :tr
  # @return [Symbol] The position of this legend
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#87
  def legend_position; end

  # @see legend_position
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#164
  def legend_position=(v); end

  # Whether only data from visible cells should be plotted.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#104
  def plot_visible_only; end

  # Whether only data from visible cells should be plotted.
  #
  # @param v [Boolean]
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#195
  def plot_visible_only=(v); end

  # The part name for this chart
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#124
  def pn; end

  # The relationship object for this chart.
  #
  # @return [Relationship]
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#112
  def relationship; end

  # Whether the chart area shall have rounded corners.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#108
  def rounded_corners; end

  # Whether the chart area shall have rounded corners.
  #
  # @param v [Boolean]
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#200
  def rounded_corners=(v); end

  # A collection of series objects that are applied to the chart
  #
  # @return [SimpleTypedList]
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#46
  def series; end

  # The type of series to use for this chart.
  #
  # @return [Series]
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#50
  def series_type; end

  # Show the legend in the chart
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#76
  def show_legend; end

  # Show the legend in the chart
  #
  # @param v [Boolean]
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#150
  def show_legend=(v); end

  # This is a short cut method to set the anchor start marker position
  # If you need finer granularity in positioning use
  #
  # This helper method acceps a fairly wide range of inputs exampled
  # below
  #
  # reference or cell to use in setting the start marker position.
  #
  # @example
  #
  #   start_at 0, 5 # The anchor start marker is set to 6th row of
  #   the first column
  #
  #   start_at [0, 5] # The anchor start marker is set to start on the 6th row
  #   of the first column
  #
  #   start_at "C1" # The anchor start marker is set to start on the first row
  #   of the third column
  #
  #   start_at sheet.rows.first.cells.last # The anchor start
  #   marker is set to the location of a specific cell.
  # @param x [Array|String|Cell] the column, coordinates, string
  # @param y [Integer] The row
  # @return [Marker]
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#275
  def start_at(x = T.unsafe(nil), y = T.unsafe(nil)); end

  # The style for the chart.
  # see ECMA Part 1 §21.2.2.196
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#72
  def style; end

  # The style for the chart.
  # see ECMA Part 1 §21.2.2.196
  #
  # @param v [Integer] must be between 1 and 48
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#161
  def style=(v); end

  # The title object for the chart.
  #
  # @return [Title]
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#67
  def title; end

  # The title object for the chart.
  #
  # @param v [String, Cell]
  # @return [Title]
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#131
  def title=(v); end

  # The size of the Title object of the chart.
  #
  # @param v [String] The size for the title object
  # @see Title
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#143
  def title_size=(v); end

  # backwards compatibility to allow chart.to and chart.from access to anchor markers
  #
  # @note This will be disconinued in version 2.0.0. Please use the end_at method
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#168
  def to; end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#205
  def to_xml_string(str = T.unsafe(nil)); end

  # Indicates that colors should be varied by datum
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#59
  def vary_colors; end

  # Configures the vary_colors options for this chart
  #
  # @param v [Boolean] The value to set
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#63
  def vary_colors=(v); end

  # The 3D view properties for the chart
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#37
  def view3D; end

  # sets the view_3D object for the chart
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#291
  def view3D=(v); end

  # The 3D view properties for the chart
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#37
  def view_3D; end

  # sets the view_3D object for the chart
  #
  # source://caxlsx//lib/axlsx/drawing/chart.rb#291
  def view_3D=(v); end
end

# The Col class defines column attributes for columns in sheets.
#
# source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#3
class Axlsx::Col
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Create a new Col objects
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param min First column affected by this 'column info' record.
  # @param max Last column affected by this 'column info' record.
  # @param options [Hash] a customizable set of options
  # @return [Col] a new instance of Col
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#19
  def initialize(min, max, options = T.unsafe(nil)); end

  # Flag indicating if the specified column(s) is set to 'best fit'. 'Best fit' is set to true under these conditions:
  # The column width has never been manually set by the user, AND The column width is not the default width
  # 'Best fit' means that when numbers are typed into a cell contained in a 'best fit' column, the column width should
  #  automatically resize to display the number. [Note: In best fit cases, column width must not be made smaller, only larger. end note]
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#42
  def bestFit; end

  # Flag indicating if the specified column(s) is set to 'best fit'. 'Best fit' is set to true under these conditions:
  # The column width has never been manually set by the user, AND The column width is not the default width
  # 'Best fit' means that when numbers are typed into a cell contained in a 'best fit' column, the column width should
  #  automatically resize to display the number. [Note: In best fit cases, column width must not be made smaller, only larger. end note]
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#42
  def best_fit; end

  # Flag indicating if the outlining of the affected column(s) is in the collapsed state.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#47
  def collapsed; end

  # @see Col#collapsed
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#75
  def collapsed=(v); end

  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#71
  def customWidth; end

  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#71
  def custom_width; end

  # Flag indicating if the affected column(s) are hidden on this worksheet.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#51
  def hidden; end

  # @see Col#hidden
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#81
  def hidden=(v); end

  # Last column affected by this 'column info' record.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#35
  def max; end

  # First column affected by this 'column info' record.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#31
  def min; end

  # Outline level of affected column(s). Range is 0 to 7.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#55
  def outlineLevel; end

  # @raise [ArgumentError]
  # @see Col#outline
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#87
  def outlineLevel=(v); end

  # Outline level of affected column(s). Range is 0 to 7.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#55
  def outline_level; end

  # @raise [ArgumentError]
  # @see Col#outline
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#87
  def outline_level=(v); end

  # Flag indicating if the phonetic information should be displayed by default for the affected column(s) of the worksheet.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#60
  def phonetic; end

  # @see Col#phonetic
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#96
  def phonetic=(v); end

  # Default style for the affected column(s). Affects cells not yet allocated in the column(s). In other words, this style applies to new columns.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#64
  def style; end

  # @see Col#style
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#102
  def style=(v); end

  # Serialize this columns data to an xml string
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#138
  def to_xml_string(str = T.unsafe(nil)); end

  # updates the width for this col based on the cells autowidth and
  # an optionally specified fixed width
  # to this value and the cell's attributes are ignored.
  # autowidth value will be ignored.
  #
  # @param cell [Cell] The cell to use in updating this col's width
  # @param fixed_width [Integer] If this is specified the width is set
  # @param use_autowidth [Boolean] If this is false, the cell's
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#126
  def update_width(cell, fixed_width = T.unsafe(nil), use_autowidth = T.unsafe(nil)); end

  # The width of the column
  #
  # @return [Numeric]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#68
  def width; end

  # @see Col#width
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#108
  def width=(v); end
end

# Maximum column width limit in MS Excel is 255 characters
# https://support.microsoft.com/en-us/office/excel-specifications-and-limits-1672b34d-7043-467e-8e27-269d656771c3
#
# source://caxlsx//lib/axlsx/workbook/worksheet/col.rb#6
Axlsx::Col::MAX_WIDTH = T.let(T.unsafe(nil), Integer)

# A collection of Brake objects.
# Please do not use this class directly. Instead use
# Worksheet#add_break
#
# source://caxlsx//lib/axlsx/workbook/worksheet/col_breaks.rb#5
class Axlsx::ColBreaks < ::Axlsx::SimpleTypedList
  # Instantiates a new list restricted to Break types
  #
  # @return [ColBreaks] a new instance of ColBreaks
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col_breaks.rb#7
  def initialize; end

  # A column break specific helper for adding a break.
  # The max and man options are fixed, however any other valid option for
  # Break will be passed to the created break object.
  #
  # @param options [Hash] A list of options to pass into the Break object
  # @see Break
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col_breaks.rb#16
  def add_break(options); end

  # Serialize the collection to xml
  # <colBreaks count="1" manualBreakCount="1">
  # <brk id="3" max="1048575" man="1"/>
  # </colBreaks>
  #
  # @param str [String] The string to append this lists xml to.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/col_breaks.rb#26
  def to_xml_string(str = T.unsafe(nil)); end
end

# The color class represents a color used for borders, fills an fonts
#
# source://caxlsx//lib/axlsx/stylesheet/color.rb#3
class Axlsx::Color
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new Color object
  #
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Color] a new instance of Color
  #
  # source://caxlsx//lib/axlsx/stylesheet/color.rb#11
  def initialize(options = T.unsafe(nil)); end

  # Determines if the color is system color dependant
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/color.rb#20
  def auto; end

  # @see auto
  #
  # source://caxlsx//lib/axlsx/stylesheet/color.rb#48
  def auto=(v); end

  # The color as defined in rgb terms.
  # When assigning the rgb value the behavior is much like CSS selectors and can use shorthand versions as follows:
  # If you provide a two character value it will be repeated for each r, g, b assignment
  # If you provide data that is not 2 characters in length, and is less than 8 characters it will be padded with "F"
  #
  # @example
  #   Color.new :rgb => "FF000000"
  #   => #<Axlsx::Color:0x102106b68 @rgb="FF000000">
  #   Color.new :rgb => "0A"
  #   => #<Axlsx::Color:0x102106b68 @rgb="FF0A0A0A">
  #   Color.new :rgb => "00BB"
  #   => #<Axlsx::Color:0x102106b68 @rgb="FFFF00BB">
  # @note rgb colors need to conform to ST_UnsignedIntHex. That basically means put 'FF' before you color
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/color.rb#36
  def rgb; end

  # @raise [ArgumentError]
  # @see color
  #
  # source://caxlsx//lib/axlsx/stylesheet/color.rb#51
  def rgb=(v); end

  # The tint value.
  #
  # @note valid values are between -1.0 and 1.0
  # @return [Float]
  #
  # source://caxlsx//lib/axlsx/stylesheet/color.rb#45
  def tint; end

  # @see tint
  #
  # source://caxlsx//lib/axlsx/stylesheet/color.rb#62
  def tint=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/color.rb#73
  def to_xml_string(str = T.unsafe(nil), tag_name = T.unsafe(nil)); end
end

# @note The recommended way to manage these rules is via Worksheet#add_conditional_formatting
# @see Worksheet#add_conditional_formatting
# @see ConditionalFormattingRule#initialize
#
# source://caxlsx//lib/axlsx/workbook/worksheet/color_scale.rb#8
class Axlsx::ColorScale
  # creates a new ColorScale object.
  #
  # @example
  #   color_scale = Axlsx::ColorScale.new({:type => :num, :val => 0.55, :color => 'fff7696c'})
  # @return [ColorScale] a new instance of ColorScale
  # @see Cfvo
  # @see Color
  # @yield [_self]
  # @yieldparam _self [Axlsx::ColorScale] the object that the method was called on
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/color_scale.rb#56
  def initialize(*cfvos); end

  # adds a new cfvo / color pair to the color scale and returns a hash containing
  # a reference to the newly created cfvo and color objects so you can alter the default properties.
  #
  # @option [Symbol]
  # @option [String]
  # @option [Any]
  # @param [String] [Hash] a customizable set of options
  # @param [Symbol] [Hash] a customizable set of options
  # @param options [Hash] options for the new cfvo and color objects
  # @param [Any] [Hash] a customizable set of options
  # @return [Hash] a hash with :cfvo and :color keys referencing the newly added objects.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/color_scale.rb#68
  def add(options = T.unsafe(nil)); end

  # A simple types list of colors
  #
  # @return [SimpleTypedList]
  # @see Color
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/color_scale.rb#47
  def colors; end

  # removes the cfvo and color pair at the index specified.
  #
  # @note you cannot remove the first two cfvo and color pairs
  # @param index [Integer] The index of the cfvo and color object to delete
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/color_scale.rb#77
  def delete_at(index = T.unsafe(nil)); end

  # Serialize this color_scale object data to an xml string
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/color_scale.rb#85
  def to_xml_string(str = T.unsafe(nil)); end

  # A simple typed list of cfvos
  #
  # @return [SimpleTypedList]
  # @see Cfvo
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/color_scale.rb#40
  def value_objects; end

  private

  # There has got to be cleaner way of merging these arrays.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/color_scale.rb#95
  def initialize_default_cfvos(user_cfvos); end

  class << self
    # These are the default conditional formatting value objects
    # that define a two tone color gradient.
    #
    # source://caxlsx//lib/axlsx/workbook/worksheet/color_scale.rb#12
    def default_cfvos; end

    # A builder for three tone color gradient
    #
    # @example
    #   #this creates a three tone color scale
    #   color_scale = Axlsx::ColorScale.three_tone
    # @see examples/example.rb conditional formatting examples.
    #
    # source://caxlsx//lib/axlsx/workbook/worksheet/color_scale.rb#31
    def three_tone; end

    # A builder for two tone color gradient
    #
    # @example
    #   # this creates a two tone color scale
    #   color_scale = Axlsx::ColorScale.two_tone
    # @see examples/example.rb conditional formatting examples.
    #
    # source://caxlsx//lib/axlsx/workbook/worksheet/color_scale.rb#22
    def two_tone; end
  end
end

# The cols class manages the col object used to manage column widths.
# This is where the magic happens with autowidth
#
# source://caxlsx//lib/axlsx/workbook/worksheet/cols.rb#4
class Axlsx::Cols < ::Axlsx::SimpleTypedList
  # @raise [ArgumentError]
  # @return [Cols] a new instance of Cols
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cols.rb#5
  def initialize(worksheet); end

  # Serialize the Cols object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/cols.rb#15
  def to_xml_string(str = T.unsafe(nil)); end
end

# A comment is the text data for a comment
#
# source://caxlsx//lib/axlsx/workbook/worksheet/comment.rb#3
class Axlsx::Comment
  include ::Axlsx::OptionsParser
  include ::Axlsx::Accessors
  extend ::Axlsx::Accessors::ClassMethods

  # Creates a new comment object
  #
  # @option [String]
  # @option [String]
  # @option [String]
  # @option [Boolean]
  # @param [String] [Hash] a customizable set of options
  # @param comments [Comments] The comment collection this comment belongs to
  # @param options [Hash]
  # @param [Boolean] [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @return [Comment] a new instance of Comment
  # @yield [_self]
  # @yieldparam _self [Axlsx::Comment] the object that the method was called on
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/comment.rb#14
  def initialize(comments, options = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def author; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def author=(value); end

  # The index of this author in a unique sorted list of all authors in
  # the comment.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/comment.rb#48
  def author_index; end

  # The owning Comments object
  #
  # @return [Comments]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/comment.rb#28
  def comments; end

  # The string based cell position reference (e.g. 'A1') that determines the positioning of this comment
  #
  # @return [String|Cell]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/comment.rb#32
  def ref; end

  # @see ref
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/comment.rb#53
  def ref=(v); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def text; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def text=(value); end

  # serialize the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/comment.rb#62
  def to_xml_string(str = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def visible; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def visible=(value); end

  # The vml shape that will render this comment
  #
  # @return [VmlShape]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/comment.rb#41
  def vml_shape; end

  private

  # initialize the vml shape based on this comment's ref/position in the worksheet.
  # by default, all columns are 5 columns wide and 5 rows high
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/comment.rb#80
  def initialize_vml_shape; end
end

# Comments is a collection of Comment objects for a worksheet
#
# source://caxlsx//lib/axlsx/workbook/worksheet/comments.rb#3
class Axlsx::Comments < ::Axlsx::SimpleTypedList
  # Creates a new Comments object
  #
  # @param worksheet [Worksheet] The sheet that these comments belong to.
  # @raise [ArgumentError]
  # @return [Comments] a new instance of Comments
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/comments.rb#26
  def initialize(worksheet); end

  # Adds a new comment to the worksheet that owns these comments.
  #
  # @note the author, text and ref options are required
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @yield [last]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/comments.rb#39
  def add_comment(options = T.unsafe(nil)); end

  # A sorted list of the unique authors in the contained comments
  #
  # @return [Array]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/comments.rb#51
  def authors; end

  # The index of this collection in the workbook. Effectively the index of the worksheet.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/comments.rb#14
  def index; end

  # The part name for this object
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/comments.rb#20
  def pn; end

  # The relationships required by this object
  #
  # @return [Array]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/comments.rb#57
  def relationships; end

  # serialize the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/comments.rb#65
  def to_xml_string(str = T.unsafe(nil)); end

  # the vml_drawing that holds the shapes for comments
  #
  # @return [VmlDrawing]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/comments.rb#6
  def vml_drawing; end

  # The worksheet that these comments belong to
  #
  # @return [Worksheet]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/comments.rb#10
  def worksheet; end
end

# Conditional formatting allows styling of ranges based on functions
#
# @note The recommended way to manage conditional formatting is via Worksheet#add_conditional_formatting
# @see Worksheet#add_conditional_formatting
# @see ConditionalFormattingRule
#
# source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting.rb#7
class Axlsx::ConditionalFormatting
  include ::Axlsx::OptionsParser

  # Creates a new {ConditionalFormatting} object
  #
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [ConditionalFormatting] a new instance of ConditionalFormatting
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting.rb#13
  def initialize(options = T.unsafe(nil)); end

  # Add a ConditionalFormattingRule. If a hash of options is passed
  # in create a rule on the fly.
  #
  # @param rule [ConditionalFormattingRule|Hash] A rule to use, or the options necessary to create one.
  # @see ConditionalFormattingRule#initialize
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting.rb#53
  def add_rule(rule); end

  # Add Conditional Formatting Rules to this object. Rules can either
  # be already created {ConditionalFormattingRule} elements or
  # hashes of options for automatic creation.  If rules is a hash
  # instead of an array, assume only one rule being added.
  #
  # @example This would apply formatting "1" to cells > 20, and formatting "2" to cells < 1
  #   conditional_formatting.add_rules [
  #   { :type => :cellIs, :operator => :greaterThan, :formula => "20", :dxfId => 1, :priority=> 1 },
  #   { :type => :cellIs, :operator => :lessThan, :formula => "10", :dxfId => 2, :priority=> 2 } ]
  # @param rules [Array|Hash] the rules to apply, can be just one in hash form
  # @see ConditionalFormattingRule#initialize
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting.rb#42
  def add_rules(rules); end

  # Rules to apply the formatting to. Can be either a hash of
  # options to create a {ConditionalFormattingRule}, an array of hashes
  # for multiple ConditionalFormattingRules, or an array of already
  # created ConditionalFormattingRules.
  #
  # @return [Array]
  # @see ConditionalFormattingRule#initialize
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting.rb#28
  def rules; end

  # @see rules
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting.rb#62
  def rules=(v); end

  # Range over which the formatting is applied, in "A1:B2" format
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting.rb#20
  def sqref; end

  # @see sqref
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting.rb#64
  def sqref=(v); end

  # Serializes the conditional formatting element
  #
  # @example Conditional Formatting XML looks like:
  #   <conditionalFormatting sqref="E3:E9">
  #   <cfRule type="cellIs" dxfId="0" priority="1" operator="greaterThan">
  #   <formula>0.5</formula>
  #   </cfRule>
  #   </conditionalFormatting>
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting.rb#75
  def to_xml_string(str = T.unsafe(nil)); end
end

# Conditional formatting rules specify formulas whose evaluations
# format cells
#
# @note The recommended way to manage these rules is via Worksheet#add_conditional_formatting
# @see Worksheet#add_conditional_formatting
# @see ConditionalFormattingRule#initialize
#
# source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#8
class Axlsx::ConditionalFormattingRule
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new Conditional Formatting Rule object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [ConditionalFormattingRule] a new instance of ConditionalFormattingRule
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#27
  def initialize(options = T.unsafe(nil)); end

  # Above average rule
  # Indicates whether the rule is an "above average" rule. True
  # indicates 'above average'. This attribute is ignored if type is
  # not equal to aboveAverage.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#56
  def aboveAverage; end

  # @see aboveAverage
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#158
  def aboveAverage=(v); end

  # Bottom N rule
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#60
  def bottom; end

  # @see bottom
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#160
  def bottom=(v); end

  # colorScale (Color Scale)
  # The color scale to apply to this conditional formatting
  #
  # @return [ColorScale]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#137
  def color_scale; end

  # @see color_scale
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#185
  def color_scale=(v); end

  # dataBar (Data Bar)
  # The data bar to apply to this conditional formatting
  #
  # @return [DataBar]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#144
  def data_bar; end

  # @see data_bar
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#191
  def data_bar=(v); end

  # Differential Formatting Id
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#64
  def dxfId; end

  # @see dxfId
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#162
  def dxfId=(v); end

  # Equal Average
  # Flag indicating whether the 'aboveAverage' and 'belowAverage'
  # criteria is inclusive of the average itself, or exclusive of
  # that value.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#71
  def equalAverage; end

  # @see equalAverage
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#164
  def equalAverage=(v); end

  # Formula
  # The formula or value to match against (e.g. 5 with an operator of :greaterThan to specify cell_value > 5).
  # If the operator is :between or :notBetween, use an array to specify [minimum, maximum]
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#40
  def formula; end

  # @see formula
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#182
  def formula=(v); end

  # iconSet (Icon Set)
  # The icon set to apply to this conditional formatting
  #
  # @return [IconSet]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#151
  def icon_set; end

  # @see icon_set
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#197
  def icon_set=(v); end

  # Operator
  # The operator in a "cell value is" conditional formatting
  # rule. This attribute is ignored if type is not equal to cellIs
  #
  # Operator must be one of lessThan, lessThanOrEqual, equal,
  # notEqual, greaterThanOrEqual, greaterThan, between, notBetween,
  # containsText, notContains, beginsWith, endsWith
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#81
  def operator; end

  # @see operator
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#168
  def operator=(v); end

  # percent (Top 10 Percent)
  # indicates whether a "top/bottom n" rule is a "top/bottom n
  # percent" rule. This attribute is ignored if type is not equal to
  # top10.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#102
  def percent; end

  # @see percent
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#172
  def percent=(v); end

  # Priority
  # The priority of this conditional formatting rule. This value is
  # used to determine which format should be evaluated and
  # rendered. Lower numeric values are higher priority than higher
  # numeric values, where '1' is the highest priority.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#89
  def priority; end

  # @see priority
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#166
  def priority=(v); end

  # rank (Rank)
  # The value of "n" in a "top/bottom n" conditional formatting
  # rule. This attribute is ignored if type is not equal to top10.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#108
  def rank; end

  # @see rank
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#174
  def rank=(v); end

  # stdDev (StdDev)
  # The number of standard deviations to include above or below the
  # average in the conditional formatting rule. This attribute is
  # ignored if type is not equal to aboveAverage. If a value is
  # present for stdDev and the rule type = aboveAverage, then this
  # rule is automatically an "above or below N standard deviations"
  # rule.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#118
  def stdDev; end

  # @see stdDev
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#176
  def stdDev=(v); end

  # stopIfTrue (Stop If True)
  # If this flag is '1', no rules with lower priority shall be
  # applied over this rule, when this rule evaluates to true.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#124
  def stopIfTrue; end

  # @see stopIfTrue
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#178
  def stopIfTrue=(v); end

  # Text
  # used in a "text contains" conditional formatting
  # rule.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#95
  def text; end

  # @see text
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#170
  def text=(v); end

  # timePeriod (Time Period)
  # The applicable time period in a "date occurring…" conditional
  # formatting rule. This attribute is ignored if type is not equal
  # to timePeriod.
  # Valid types are today, yesterday, tomorrow, last7Days,
  # thisMonth, lastMonth, nextMonth, thisWeek, lastWeek, nextWeek
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#132
  def timePeriod; end

  # @see timePeriod
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#180
  def timePeriod=(v); end

  # Serializes the conditional formatting rule
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#205
  def to_xml_string(str = T.unsafe(nil)); end

  # Type (ST_CfType)
  # options are expression, cellIs, colorScale, dataBar, iconSet,
  # top10, uniqueValues, duplicateValues, containsText,
  # notContainsText, beginsWith, endsWith, containsBlanks,
  # notContainsBlanks, containsErrors, notContainsErrors,
  # timePeriod, aboveAverage
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#49
  def type; end

  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formatting_rule.rb#156
  def type=(v); end
end

# A simple, self serializing class for storing conditional formattings
#
# source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formattings.rb#3
class Axlsx::ConditionalFormattings < ::Axlsx::SimpleTypedList
  # creates a new Tables object
  #
  # @raise [ArgumentError]
  # @return [ConditionalFormattings] a new instance of ConditionalFormattings
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formattings.rb#5
  def initialize(worksheet); end

  # serialize the conditional formattings
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formattings.rb#17
  def to_xml_string(str = T.unsafe(nil)); end

  # The worksheet that owns this collection of tables
  #
  # @return [Worksheet]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/conditional_formattings.rb#14
  def worksheet; end
end

# ContentTypes used in the package. This is automatically managed by the package package.
#
# source://caxlsx//lib/axlsx/content_type/content_type.rb#7
class Axlsx::ContentType < ::Axlsx::SimpleTypedList
  # @return [ContentType] a new instance of ContentType
  #
  # source://caxlsx//lib/axlsx/content_type/content_type.rb#8
  def initialize; end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/content_type/content_type.rb#15
  def to_xml_string(str = T.unsafe(nil)); end
end

# The core object for the package.
#
# @note Packages manage their own core object.
# @see Package#core
#
# source://caxlsx//lib/axlsx/doc_props/core.rb#5
class Axlsx::Core
  # Creates a new Core object.
  #
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Core] a new instance of Core
  #
  # source://caxlsx//lib/axlsx/doc_props/core.rb#9
  def initialize(options = T.unsafe(nil)); end

  # Creation time of the document. If nil, the current time will be used.
  #
  # source://caxlsx//lib/axlsx/doc_props/core.rb#19
  def created; end

  # Creation time of the document. If nil, the current time will be used.
  #
  # source://caxlsx//lib/axlsx/doc_props/core.rb#19
  def created=(_arg0); end

  # The author of the document. By default this is 'axlsx'
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/doc_props/core.rb#16
  def creator; end

  # The author of the document. By default this is 'axlsx'
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/doc_props/core.rb#16
  def creator=(_arg0); end

  # serializes the core.xml document
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/doc_props/core.rb#23
  def to_xml_string(str = T.unsafe(nil)); end
end

# digital signature certificate content type
#
# source://caxlsx//lib/axlsx/util/constants.rb#144
Axlsx::DIGITAL_SIGNATURE_CERTIFICATE_CT = T.let(T.unsafe(nil), String)

# Digital signature namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#33
Axlsx::DIGITAL_SIGNATURE_NS = T.let(T.unsafe(nil), String)

# digital signature origin content type
#
# source://caxlsx//lib/axlsx/util/constants.rb#141
Axlsx::DIGITAL_SIGNATURE_ORIGIN_CT = T.let(T.unsafe(nil), String)

# digital signature rels namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#72
Axlsx::DIGITAL_SIGNATURE_R = T.let(T.unsafe(nil), String)

# digital signature xml content type
#
# source://caxlsx//lib/axlsx/util/constants.rb#138
Axlsx::DIGITAL_SIGNATURE_XML_CT = T.let(T.unsafe(nil), String)

# There are more elements in the dLbls spec that allow for
# customizations and formatting. For now, I am just implementing the
# basics.
# The DLbls class manages serialization of data labels
# showLeaderLines and leaderLines are not currently implemented
#
# source://caxlsx//lib/axlsx/drawing/d_lbls.rb#7
class Axlsx::DLbls
  include ::Axlsx::Accessors
  include ::Axlsx::OptionsParser
  extend ::Axlsx::Accessors::ClassMethods

  # creates a new DLbls object
  #
  # @raise [ArgumentError]
  # @return [DLbls] a new instance of DLbls
  #
  # source://caxlsx//lib/axlsx/drawing/d_lbls.rb#11
  def initialize(chart_type, options = T.unsafe(nil)); end

  # The chart type that is using this data lables instance.
  # This affects the xml output as not all chart types support the
  # same data label attributes.
  #
  # source://caxlsx//lib/axlsx/drawing/d_lbls.rb#46
  def chart_type; end

  # The position of the data labels in the chart
  #
  # @return [Symbol]
  # @see d_lbl_pos= for a list of allowed values
  #
  # source://caxlsx//lib/axlsx/drawing/d_lbls.rb#51
  def d_lbl_pos; end

  # Assigns the label postion for this data labels on this chart.
  # Allowed positions are :bestFit, :b, :ctr, :inBase, :inEnd, :l,
  # :outEnd, :r and :t
  # The default is :bestFit
  #
  # @param label_position [Symbol] the postion you want to use.
  # @see DLbls#d_lbl_pos
  #
  # source://caxlsx//lib/axlsx/drawing/d_lbls.rb#63
  def d_lbl_pos=(label_position); end

  # Initialize all the values to false as Excel requires them to
  # explicitly be disabled or all will show.
  #
  # source://caxlsx//lib/axlsx/drawing/d_lbls.rb#35
  def initialize_defaults; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def show_bubble_size; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def show_bubble_size=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def show_cat_name; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def show_cat_name=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def show_leader_lines; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def show_leader_lines=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def show_legend_key; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def show_legend_key=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def show_percent; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def show_percent=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def show_ser_name; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def show_ser_name=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def show_val; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def show_val=(value); end

  # serializes the data labels
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/d_lbls.rb#72
  def to_xml_string(str = T.unsafe(nil)); end

  # nills out d_lbl_pos and show_leader_lines as these attributes, while valid in the spec actually chrash excel for any chart type other than pie charts.
  #
  # source://caxlsx//lib/axlsx/drawing/d_lbls.rb#85
  def validate_attributes_for_chart_type; end
end

# drawing content type
#
# source://caxlsx//lib/axlsx/util/constants.rb#162
Axlsx::DRAWING_CT = T.let(T.unsafe(nil), String)

# drawing part
#
# source://caxlsx//lib/axlsx/util/constants.rb#210
Axlsx::DRAWING_PN = T.let(T.unsafe(nil), String)

# drawing rels namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#81
Axlsx::DRAWING_R = T.let(T.unsafe(nil), String)

# drawing rels part
#
# source://caxlsx//lib/axlsx/util/constants.rb#213
Axlsx::DRAWING_RELS_PN = T.let(T.unsafe(nil), String)

# drawing validation schema
#
# source://caxlsx//lib/axlsx/util/constants.rb#258
Axlsx::DRAWING_XSD = T.let(T.unsafe(nil), String)

# @note The recommended way to manage these rules is via Worksheet#add_conditional_formatting
# @see Worksheet#add_conditional_formatting
# @see ConditionalFormattingRule#initialize
#
# source://caxlsx//lib/axlsx/workbook/worksheet/data_bar.rb#8
class Axlsx::DataBar
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new data bar conditional formatting object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash]
  # @param cfvos [Array] hashes defining the gradient interpolation points for this formatting.
  # @return [DataBar] a new instance of DataBar
  # @yield [_self]
  # @yieldparam _self [Axlsx::DataBar] the object that the method was called on
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_bar.rb#27
  def initialize(options = T.unsafe(nil), *cfvos); end

  # color
  # the color object used in the data bar formatting
  #
  # @return [Color]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_bar.rb#72
  def color; end

  # Sets the color for the data bars.
  #
  # @param v [Color|String] The color object, or rgb string value to apply
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_bar.rb#99
  def color=(v); end

  # maxLength attribute
  # The maximum length of the data bar, as a percentage of the cell width.
  # The default value is 90
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_bar.rb#52
  def maxLength; end

  # @see maxLength
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_bar.rb#84
  def maxLength=(v); end

  # maxLength attribute
  # The maximum length of the data bar, as a percentage of the cell width.
  # The default value is 90
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_bar.rb#52
  def max_length; end

  # @see maxLength
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_bar.rb#84
  def max_length=(v); end

  # minLength attribute
  # The minimum length of the data bar, as a percentage of the cell width.
  # The default value is 10
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_bar.rb#45
  def minLength; end

  # @see minLength
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_bar.rb#77
  def minLength=(v); end

  # minLength attribute
  # The minimum length of the data bar, as a percentage of the cell width.
  # The default value is 10
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_bar.rb#45
  def min_length; end

  # @see minLength
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_bar.rb#77
  def min_length=(v); end

  # maxLength attribute
  # Indicates whether to show the values of the cells on which this data bar is applied.
  # The default value is true
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_bar.rb#59
  def showValue; end

  # @see showValue
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_bar.rb#91
  def showValue=(v); end

  # maxLength attribute
  # Indicates whether to show the values of the cells on which this data bar is applied.
  # The default value is true
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_bar.rb#59
  def show_value; end

  # @see showValue
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_bar.rb#91
  def show_value=(v); end

  # Serialize this object to an xml string
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_bar.rb#108
  def to_xml_string(str = T.unsafe(nil)); end

  # A simple typed list of cfvos
  #
  # @return [SimpleTypedList]
  # @see Cfvo
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_bar.rb#65
  def value_objects; end

  private

  # source://caxlsx//lib/axlsx/workbook/worksheet/data_bar.rb#117
  def initialize_cfvos(cfvos); end

  class << self
    # This differs from ColorScale. There must be exactly two cfvos one color
    #
    # source://caxlsx//lib/axlsx/workbook/worksheet/data_bar.rb#14
    def default_cfvos; end
  end
end

# instance values that must be serialized as their own elements - e.g. not attributes.
#
# source://caxlsx//lib/axlsx/workbook/worksheet/data_bar.rb#39
Axlsx::DataBar::CHILD_ELEMENTS = T.let(T.unsafe(nil), Array)

# Validate that the class of the value provided is either an instance or the class of the allowed types and that any specified additional validation returns true.
#
# source://caxlsx//lib/axlsx/util/validators.rb#47
class Axlsx::DataTypeValidator
  class << self
    # Perform validation
    #
    # @param name [String] The name of what is being validated. This is included in the error message
    # @param types [Array, Class] A single class or array of classes that the value is validated against.
    # @param other [Block] Any block that must evaluate to true for the value to be valid
    # @raise [ArugumentError] Raised if the class of the value provided is not in the specified array of types or the block passed returns false
    # @return [Boolean] true if validation succeeds.
    # @see validate_boolean
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#55
    def validate(name, types, v, other = T.unsafe(nil)); end
  end
end

# Data validation allows the validation of cell data
#
# @note The recommended way to manage data validations is via Worksheet#add_data_validation
# @see Worksheet#add_data_validation
#
# source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#6
class Axlsx::DataValidation
  include ::Axlsx::OptionsParser

  # Creates a new {DataValidation} object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [DataValidation] a new instance of DataValidation
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#25
  def initialize(options = T.unsafe(nil)); end

  # Allow Blank
  # A boolean value indicating whether the data validation allows the use of empty or blank
  # entries. 1 means empty entries are OK and do not violate the validation constraints.
  # Available for type whole, decimal, date, time, textLength, list, custom
  # default true
  #
  # @return [Boolean]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#59
  def allowBlank; end

  # @see allowBlank
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#185
  def allowBlank=(v); end

  # Error Message
  # Message text of error alert.
  # Available for type whole, decimal, date, time, textLength, list, custom
  # default nil
  #
  # @return [String]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#67
  def error; end

  # @see error
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#188
  def error=(v); end

  # Error Style (ST_DataValidationErrorStyle)
  # The style of error alert used for this data validation.
  # Options are:
  #  * information: This data validation error style uses an information icon in the error alert.
  #  * stop: This data validation error style uses a stop icon in the error alert.
  #  * warning: This data validation error style uses a warning icon in the error alert.
  # Available for type whole, decimal, date, time, textLength, list, custom
  # default :stop
  #
  # @return [Symbol]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#79
  def errorStyle; end

  # @see errorStyle
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#191
  def errorStyle=(v); end

  # Error Title
  # Title bar text of error alert.
  # Available for type whole, decimal, date, time, textLength, list, custom
  # default nil
  #
  # @return [String]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#87
  def errorTitle; end

  # @see errorTitle
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#194
  def errorTitle=(v); end

  # Formula1
  # Available for type whole, decimal, date, time, textLength, list, custom
  # default nil
  #
  # @return [String]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#43
  def formula1; end

  # @see formula1
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#179
  def formula1=(v); end

  # Formula2
  # Available for type whole, decimal, date, time, textLength
  # default nil
  #
  # @return [String]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#50
  def formula2; end

  # @see formula2
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#182
  def formula2=(v); end

  # Show drop down
  # A boolean value indicating whether to display a dropdown combo box for a list type data
  # validation. Be careful: It has an inverted logic, false shows the dropdown list!
  # Available for type list
  # default false
  # Hide drop down
  # A boolean value indicating whether to hide a dropdown combo box for a list type data
  # validation. Defaults to `false` (meaning the dropdown is visible by default).
  # Available for type list
  # default false
  #
  # @return [Boolean]
  # @return [Boolean]
  # @see type
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#129
  def hideDropDown; end

  # @see hideDropDown
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#213
  def hideDropDown=(v); end

  # Operator (ST_DataValidationOperator)
  # The relational operator used with this data validation.
  # Options are:
  #  * between: Data validation which checks if a value is between two other values.
  #  * equal: Data validation which checks if a value is equal to a specified value.
  #  * greater_than: Data validation which checks if a value is greater than a specified value.
  #  * greater_than_or_equal: Data validation which checks if a value is greater than or equal to a specified value.
  #  * less_than: Data validation which checks if a value is less than a specified value.
  #  * less_than_or_equal: Data validation which checks if a value is less than or equal to a specified value.
  #  * not_between: Data validation which checks if a value is not between two other values.
  #  * not_equal: Data validation which checks if a value is not equal to a specified value.
  # Available for type whole, decimal, date, time, textLength
  # default nil
  #
  # @return [Symbol]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#104
  def operator; end

  # @see operator
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#197
  def operator=(v); end

  # Input prompt
  # Message text of input prompt.
  # Available for type whole, decimal, date, time, textLength, list, custom
  # default nil
  #
  # @return [String]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#112
  def prompt; end

  # @see prompt
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#200
  def prompt=(v); end

  # Prompt title
  # Title bar text of input prompt.
  # Available for type whole, decimal, date, time, textLength, list, custom
  # default nil
  #
  # @return [String]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#120
  def promptTitle; end

  # @see promptTitle
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#203
  def promptTitle=(v); end

  # Show drop down
  # A boolean value indicating whether to display a dropdown combo box for a list type data
  # validation. Be careful: It has an inverted logic, false shows the dropdown list!
  # Available for type list
  # default false
  #
  # @return [Boolean]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#129
  def showDropDown; end

  # @see showDropDown
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#206
  def showDropDown=(v); end

  # Show error message
  # A boolean value indicating whether to display the error alert message when an invalid
  # value has been entered, according to the criteria specified.
  # Available for type whole, decimal, date, time, textLength, list, custom
  # default false
  #
  # @return [Boolean]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#147
  def showErrorMessage; end

  # @see showErrorMessage
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#220
  def showErrorMessage=(v); end

  # Show input message
  # A boolean value indicating whether to display the input prompt message.
  # Available for type whole, decimal, date, time, textLength, list, custom
  # default false
  #
  # @return [Boolean]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#155
  def showInputMessage; end

  # @see showInputMessage
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#223
  def showInputMessage=(v); end

  # Range over which data validation is applied, in "A1:B2" format
  # Available for type whole, decimal, date, time, textLength, list, custom
  # default nil
  #
  # @return [String]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#162
  def sqref; end

  # @see sqref
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#226
  def sqref=(v); end

  # Serializes the data validation
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#234
  def to_xml_string(str = T.unsafe(nil)); end

  # The type (ST_DataValidationType) of data validation.
  # Options are:
  #  * custom: Data validation which uses a custom formula to check the cell value.
  #  * date: Data validation which checks for date values satisfying the given condition.
  #  * decimal: Data validation which checks for decimal values satisfying the given condition.
  #  * list: Data validation which checks for a value matching one of list of values.
  #  * none: No data validation.
  #  * textLength: Data validation which checks for text values, whose length satisfies the given condition.
  #  * time: Data validation which checks for time values satisfying the given condition.
  #  * whole: Data validation which checks for whole number values satisfying the given condition.
  # default none
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#176
  def type; end

  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#229
  def type=(v); end

  private

  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#249
  def get_valid_attributes; end
end

# instance values that must be serialized as their own elements - e.g. not attributes.
#
# source://caxlsx//lib/axlsx/workbook/worksheet/data_validation.rb#36
Axlsx::DataValidation::CHILD_ELEMENTS = T.let(T.unsafe(nil), Array)

# A simple, self serializing class for storing conditional formattings
#
# source://caxlsx//lib/axlsx/workbook/worksheet/data_validations.rb#3
class Axlsx::DataValidations < ::Axlsx::SimpleTypedList
  # creates a new Tables object
  #
  # @raise [ArgumentError]
  # @return [DataValidations] a new instance of DataValidations
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validations.rb#5
  def initialize(worksheet); end

  # serialize the conditional formattings
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validations.rb#17
  def to_xml_string(str = T.unsafe(nil)); end

  # The worksheet that owns this collection of tables
  #
  # @return [Worksheet]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/data_validations.rb#14
  def worksheet; end
end

# The DateTimeConverter class converts both data and time types to their apprpriate excel serializations
#
# source://caxlsx//lib/axlsx/workbook/worksheet/date_time_converter.rb#5
class Axlsx::DateTimeConverter
  class << self
    # The date_to_serial method converts Date objects to the equivelant excel serialized forms
    #
    # @param date [Date] the date to be serialized
    # @return [Numeric]
    #
    # source://caxlsx//lib/axlsx/workbook/worksheet/date_time_converter.rb#9
    def date_to_serial(date); end

    # The time_to_serial methond converts a Time object its excel serialized form.
    #
    # @param time [Time] the time to be serialized
    # @return [Numeric]
    #
    # source://caxlsx//lib/axlsx/workbook/worksheet/date_time_converter.rb#18
    def time_to_serial(time); end
  end
end

# An default content part. These parts are automatically created by for you based on the content of your package.
#
# source://caxlsx//lib/axlsx/content_type/default.rb#3
class Axlsx::Default < ::Axlsx::AbstractContentType
  # The extension of the content type.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/content_type/default.rb#9
  def Extension; end

  # Sets the file extension for this content type.
  #
  # source://caxlsx//lib/axlsx/content_type/default.rb#13
  def Extension=(v); end

  # The extension of the content type.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/content_type/default.rb#9
  def extension; end

  # Sets the file extension for this content type.
  #
  # source://caxlsx//lib/axlsx/content_type/default.rb#13
  def extension=(v); end

  # Serializes this object to xml
  #
  # source://caxlsx//lib/axlsx/content_type/default.rb#17
  def to_xml_string(str = T.unsafe(nil)); end
end

# The serialization node name for this class
#
# source://caxlsx//lib/axlsx/content_type/default.rb#5
Axlsx::Default::NODE_NAME = T.let(T.unsafe(nil), String)

# This element defines the defined names that are defined within this workbook.
# Defined names are descriptive text that is used to represents a cell, range of cells, formula, or constant value.
# Use easy-to-understand names, such as Products, to refer to hard to understand ranges, such as Sales!C20:C30.
# A defined name in a formula can make it easier to understand the purpose of the formula.
# Names are available to any sheet.
# Names can also be used to represent formulas or values that do not change (constants).
#
# You can also link to a defined name in another workbook, or define a name that refers to cells in another workbook.
#
# A compliant producer or consumer considers a defined name in the range A1-XFD1048576 to be an error.
# All other names outside this range can be defined as names and overrides a cell reference if an ambiguity exists.
#
# @example
#   The formula =SUM(FirstQuarterSales) might be easier to identify than =SUM(C20:C30
# @example
#   If the name ProjectedSales refers to the range A20:A30 on the first worksheet in a workbook,
#   you can use the name ProjectedSales on any other sheet in the same workbook to refer to range A20:A30 on the first worksheet.
# @example
#   The name SalesTax can be used to represent the sales tax amount (such as 6.2 percent) applied to sales transactions.
# @example
#   The formula =SUM(Sales.xls!ProjectedSales) refers to the named range ProjectedSales in the workbook named Sales.
# @example
#   For clarification: LOG10 is always a cell reference, LOG10() is always formula, LOGO1000 can be a defined name that overrides a cell reference.
#
# source://caxlsx//lib/axlsx/workbook/defined_name.rb#51
class Axlsx::DefinedName
  include ::Axlsx::SerializedAttributes
  include ::Axlsx::OptionsParser
  include ::Axlsx::Accessors
  extend ::Axlsx::SerializedAttributes::ClassMethods
  extend ::Axlsx::Accessors::ClassMethods

  # creates a new DefinedName.
  #
  # @option [String]
  # @option [String]
  # @option [String]
  # @option [String]
  # @option [String]
  # @option [String]
  # @option [String]
  # @option [Boolean]
  # @option [Boolean]
  # @option [Boolean]
  # @option [Boolean]
  # @option [Integer]
  # @option [String]
  # @option [Boolean]
  # @option [Boolean]
  # @param formula [String] - the formula the defined name references
  # @param options [Hash] - A hash of key/value pairs that will be mapped to this instances attributes.
  # @param [String] [Hash] a customizable set of options
  # @param [Boolean] [Hash] a customizable set of options
  # @param [Integer] [Hash] a customizable set of options
  # @return [DefinedName] a new instance of DefinedName
  #
  # source://caxlsx//lib/axlsx/workbook/defined_name.rb#100
  def initialize(formula, options = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def comment; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def comment=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def custom_menu; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def custom_menu=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def description; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def description=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def formula; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def formula=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def function; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def function=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def help; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def help=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def hidden; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def hidden=(value); end

  # Returns the value of attribute local_sheet_id.
  #
  # source://caxlsx//lib/axlsx/workbook/defined_name.rb#105
  def local_sheet_id; end

  # The local sheet index (0-based)
  #
  # @param value [Integer] the unsigned integer index of the sheet this defined_name applies to.
  #
  # source://caxlsx//lib/axlsx/workbook/defined_name.rb#109
  def local_sheet_id=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def name; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def name=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def publish_to_server; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def publish_to_server=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def short_cut_key; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def short_cut_key=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def status_bar; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def status_bar=(value); end

  # @raise [ArgumentError]
  #
  # source://caxlsx//lib/axlsx/workbook/defined_name.rb#121
  def to_xml_string(str = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def vb_proceedure; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def vb_proceedure=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def workbook_parameter; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def workbook_parameter=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def xlm; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def xlm=(value); end
end

# a simple types list of DefinedName objects
#
# source://caxlsx//lib/axlsx/workbook/defined_names.rb#3
class Axlsx::DefinedNames < ::Axlsx::SimpleTypedList
  # creates the DefinedNames object
  #
  # @return [DefinedNames] a new instance of DefinedNames
  #
  # source://caxlsx//lib/axlsx/workbook/defined_names.rb#5
  def initialize; end

  # Serialize to xml
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/defined_names.rb#12
  def to_xml_string(str = T.unsafe(nil)); end
end

# This class manages the dimensions for a worksheet.
# While this node is optional in the specification some readers like
# LibraOffice require this node to render the sheet
#
# source://caxlsx//lib/axlsx/workbook/worksheet/dimension.rb#5
class Axlsx::Dimension
  # Creates a new dimension object
  # @param[Worksheet] worksheet - the worksheet this dimension applies
  # to.
  #
  # @raise [ArgumentError]
  # @return [Dimension] a new instance of Dimension
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/dimension.rb#21
  def initialize(worksheet); end

  # The first cell in the dimension
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/dimension.rb#45
  def first_cell_reference; end

  # the last cell in the dimension
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/dimension.rb#51
  def last_cell_reference; end

  # the full refernece for this dimension
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/dimension.rb#31
  def sqref; end

  # serialize the object
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/dimension.rb#37
  def to_xml_string(str = T.unsafe(nil)); end

  # Returns the value of attribute worksheet.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/dimension.rb#27
  def worksheet; end

  private

  # Returns the reference of a cell or the default specified
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/dimension.rb#59
  def dimension_reference(cell, default); end

  class << self
    # the default value for the first cell in the dimension
    #
    # @return [String]
    #
    # source://caxlsx//lib/axlsx/workbook/worksheet/dimension.rb#8
    def default_first; end

    # the default value for the last cell in the dimension
    #
    # @return [String]
    #
    # source://caxlsx//lib/axlsx/workbook/worksheet/dimension.rb#14
    def default_last; end
  end
end

# A Drawing is a canvas for charts and images. Each worksheet has a single drawing that manages anchors.
# The anchors reference the charts or images via graphical frames. This is not a trivial relationship so please do follow the advice in the note.
# see examples/example.rb for an example of how to create a chart.
#
# @note The recommended way to manage drawings is to use the Worksheet.add_chart and Worksheet.add_image methods.
# @see Worksheet#add_chart
# @see Worksheet#add_image
# @see Chart
#
# source://caxlsx//lib/axlsx/drawing/drawing.rb#59
class Axlsx::Drawing
  # Creates a new Drawing object
  #
  # @param worksheet [Worksheet] The worksheet that owns this drawing
  # @return [Drawing] a new instance of Drawing
  #
  # source://caxlsx//lib/axlsx/drawing/drawing.rb#71
  def initialize(worksheet); end

  # Adds a chart to the drawing.
  #
  # @note The recommended way to manage charts is to use Worksheet.add_chart. Please refer to that method for documentation.
  # @see Worksheet#add_chart
  #
  # source://caxlsx//lib/axlsx/drawing/drawing.rb#94
  def add_chart(chart_type, options = T.unsafe(nil)); end

  # Adds an image to the chart If th end_at option is specified we create a two cell anchor. By default we use a one cell anchor.
  #
  # @note The recommended way to manage images is to use Worksheet.add_image. Please refer to that method for documentation.
  # @return [Pic]
  # @see Worksheet#add_image
  #
  # source://caxlsx//lib/axlsx/drawing/drawing.rb#82
  def add_image(options = T.unsafe(nil)); end

  # A collection of anchors for this drawing
  # only TwoCellAnchors are supported in this version
  #
  # @return [SimpleTypedList]
  #
  # source://caxlsx//lib/axlsx/drawing/drawing.rb#67
  def anchors; end

  # An array of charts that are associated with this drawing's anchors
  #
  # @return [Array]
  #
  # source://caxlsx//lib/axlsx/drawing/drawing.rb#101
  def charts; end

  # A list of objects this drawing holds.
  #
  # @return [Array]
  #
  # source://caxlsx//lib/axlsx/drawing/drawing.rb#141
  def child_objects; end

  # An array of hyperlink objects associated with this drawings images
  #
  # @return [Array]
  #
  # source://caxlsx//lib/axlsx/drawing/drawing.rb#108
  def hyperlinks; end

  # An array of image objects that are associated with this drawing's anchors
  #
  # @return [Array]
  #
  # source://caxlsx//lib/axlsx/drawing/drawing.rb#115
  def images; end

  # The index of this drawing in the owning workbooks's drawings collection.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/drawing.rb#122
  def index; end

  # The part name for this drawing
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/drawing.rb#128
  def pn; end

  # The drawing's relationships.
  #
  # @return [Relationships]
  #
  # source://caxlsx//lib/axlsx/drawing/drawing.rb#147
  def relationships; end

  # The relational part name for this drawing
  # #NOTE This should be rewritten to return an Axlsx::Relationship object.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/drawing.rb#135
  def rels_pn; end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/drawing.rb#156
  def to_xml_string(str = T.unsafe(nil)); end

  # The worksheet that owns the drawing
  #
  # @return [Worksheet]
  #
  # source://caxlsx//lib/axlsx/drawing/drawing.rb#62
  def worksheet; end
end

# The Dxf class defines an incremental formatting record for use in Styles. The recommended way to manage styles for your workbook is with Styles#add_style
#
# @see Styles#add_style
#
# source://caxlsx//lib/axlsx/stylesheet/dxf.rb#4
class Axlsx::Dxf
  include ::Axlsx::OptionsParser

  # Creates a new Xf object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Dxf] a new instance of Dxf
  #
  # source://caxlsx//lib/axlsx/stylesheet/dxf.rb#45
  def initialize(options = T.unsafe(nil)); end

  # The cell alignment for this style
  #
  # @return [CellAlignment]
  # @see CellAlignment
  #
  # source://caxlsx//lib/axlsx/stylesheet/dxf.rb#15
  def alignment; end

  # @see Dxf#alignment
  #
  # source://caxlsx//lib/axlsx/stylesheet/dxf.rb#50
  def alignment=(v); end

  # the border to be used in this style
  #
  # @return [Border]
  #
  # source://caxlsx//lib/axlsx/stylesheet/dxf.rb#36
  def border; end

  # @see border
  #
  # source://caxlsx//lib/axlsx/stylesheet/dxf.rb#58
  def border=(v); end

  # the child fill to be used in this style
  #
  # @return [Fill]
  #
  # source://caxlsx//lib/axlsx/stylesheet/dxf.rb#32
  def fill; end

  # @see fill
  #
  # source://caxlsx//lib/axlsx/stylesheet/dxf.rb#60
  def fill=(v); end

  # the child font to be used for this style
  #
  # @return [Font]
  #
  # source://caxlsx//lib/axlsx/stylesheet/dxf.rb#28
  def font; end

  # @see font
  #
  # source://caxlsx//lib/axlsx/stylesheet/dxf.rb#56
  def font=(v); end

  # the child NumFmt to be used to this style
  #
  # @return [NumFmt]
  #
  # source://caxlsx//lib/axlsx/stylesheet/dxf.rb#24
  def numFmt; end

  # @see numFmt
  #
  # source://caxlsx//lib/axlsx/stylesheet/dxf.rb#54
  def numFmt=(v); end

  # The cell protection for this style
  #
  # @return [CellProtection]
  # @see CellProtection
  #
  # source://caxlsx//lib/axlsx/stylesheet/dxf.rb#20
  def protection; end

  # @see protection
  #
  # source://caxlsx//lib/axlsx/stylesheet/dxf.rb#52
  def protection=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/dxf.rb#65
  def to_xml_string(str = T.unsafe(nil)); end
end

# The order in which the child elements is put in the XML seems to
# be important for Excel
#
# source://caxlsx//lib/axlsx/stylesheet/dxf.rb#9
Axlsx::Dxf::CHILD_ELEMENTS = T.let(T.unsafe(nil), Array)

# XML Encoding
#
# source://caxlsx//lib/axlsx/util/constants.rb#3
Axlsx::ENCODING = T.let(T.unsafe(nil), String)

# error message for invalid angles
#
# source://caxlsx//lib/axlsx/util/constants.rb#312
Axlsx::ERR_ANGLE = T.let(T.unsafe(nil), String)

# error message for invalid cell reference
#
# source://caxlsx//lib/axlsx/util/constants.rb#318
Axlsx::ERR_CELL_REFERENCE_INVALID = T.let(T.unsafe(nil), String)

# error message for cell reference with last cell missing
#
# source://caxlsx//lib/axlsx/util/constants.rb#321
Axlsx::ERR_CELL_REFERENCE_MISSING_CELL = T.let(T.unsafe(nil), String)

# error message for duplicate sheet names
#
# source://caxlsx//lib/axlsx/util/constants.rb#303
Axlsx::ERR_DUPLICATE_SHEET_NAME = T.let(T.unsafe(nil), String)

# error message for non 'integerish' value
#
# source://caxlsx//lib/axlsx/util/constants.rb#315
Axlsx::ERR_INTEGERISH = T.let(T.unsafe(nil), String)

# error message for invalid border id reference
#
# source://caxlsx//lib/axlsx/util/constants.rb#309
Axlsx::ERR_INVALID_BORDER_ID = T.let(T.unsafe(nil), String)

# error message when user does not provide color and or style options for border in Style#add_sytle
#
# source://caxlsx//lib/axlsx/util/constants.rb#306
Axlsx::ERR_INVALID_BORDER_OPTIONS = T.let(T.unsafe(nil), String)

# error message for RangeValidator
#
# source://caxlsx//lib/axlsx/util/constants.rb#291
Axlsx::ERR_RANGE = T.let(T.unsafe(nil), String)

# error message for RegexValidator
#
# source://caxlsx//lib/axlsx/util/constants.rb#288
Axlsx::ERR_REGEX = T.let(T.unsafe(nil), String)

# error messages RestrictionValidor
#
# source://caxlsx//lib/axlsx/util/constants.rb#282
Axlsx::ERR_RESTRICTION = T.let(T.unsafe(nil), String)

# error message for sheets that use a name which include invalid characters
#
# source://caxlsx//lib/axlsx/util/constants.rb#300
Axlsx::ERR_SHEET_NAME_CHARACTER_FORBIDDEN = T.let(T.unsafe(nil), String)

# error message for sheets that use explicit empty string name
#
# source://caxlsx//lib/axlsx/util/constants.rb#294
Axlsx::ERR_SHEET_NAME_EMPTY = T.let(T.unsafe(nil), String)

# error message for sheets that use a name which is longer than 31 bytes
#
# source://caxlsx//lib/axlsx/util/constants.rb#297
Axlsx::ERR_SHEET_NAME_TOO_LONG = T.let(T.unsafe(nil), String)

# error message DataTypeValidator
#
# source://caxlsx//lib/axlsx/util/constants.rb#285
Axlsx::ERR_TYPE = T.let(T.unsafe(nil), String)

# The Fill is a formatting object that manages the background color, and pattern for cells.
#
# @note The recommended way to manage styles in your workbook is to use Styles#add_style.
# @see Styles#add_style
# @see PatternFill
# @see GradientFill
#
# source://caxlsx//lib/axlsx/stylesheet/fill.rb#7
class Axlsx::Fill
  # Creates a new Fill object
  #
  # @param fill_type [PatternFill, GradientFill]
  # @raise [ArgumentError] if the fill_type parameter is not a PatternFill or a GradientFill instance
  # @return [Fill] a new instance of Fill
  #
  # source://caxlsx//lib/axlsx/stylesheet/fill.rb#15
  def initialize(fill_type); end

  # The type of fill
  #
  # @return [PatternFill, GradientFill]
  #
  # source://caxlsx//lib/axlsx/stylesheet/fill.rb#10
  def fill_type; end

  # @see fill_type
  #
  # source://caxlsx//lib/axlsx/stylesheet/fill.rb#29
  def fill_type=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/fill.rb#22
  def to_xml_string(str = T.unsafe(nil)); end
end

# The filterColumn collection identifies a particular column in the AutoFilter
# range and specifies filter information that has been applied to this column.
# If a column in the AutoFilter range has no criteria specified,
# then there is no corresponding filterColumn collection expressed for that column.
#
# source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filter_column.rb#6
class Axlsx::FilterColumn
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new FilterColumn object
  #
  # @note This class yeilds its filter object as that is where the vast majority of processing will be done
  # @option [Boolean]
  # @option [Boolean]
  # @param [Boolean] [Hash] a customizable set of options
  # @param filter_type [Symbol] The symbolized class name of the filter to apply to this column.
  # @param col_id [Integer|Cell] The zero based index for the column to which this filter will be applied
  # @param options [Hash] options for this object and the filter
  # @return [FilterColumn] a new instance of FilterColumn
  # @yield [@filter]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filter_column.rb#17
  def initialize(col_id, filter_type, options = T.unsafe(nil)); end

  # Apply the filters for this column
  # filtered.
  #
  # @param row [Array] A row from a worksheet that needs to be
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filter_column.rb#66
  def apply(row, offset); end

  # Zero-based index indicating the AutoFilter column to which this filter information applies.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filter_column.rb#33
  def col_id; end

  # Sets the col_id attribute for this filter column.
  #
  # @param column_index [Integer | Cell] The zero based index of the column to which this filter applies.
  #   When you specify a cell, the column index will be read off the cell
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filter_column.rb#57
  def col_id=(column_index); end

  # The actual filter being dealt with here
  # This could be any one of the allowed filter types
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filter_column.rb#37
  def filter; end

  # Flag indicating whether the AutoFilter button for this column is hidden.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filter_column.rb#49
  def hidden_button; end

  # @param hidden [Boolean] Flag indicating whether the AutoFilter button for this column is hidden.
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filter_column.rb#72
  def hidden_button=(hidden); end

  # Flag indicating whether the filter button is visible.
  # When the cell containing the filter button is merged with another cell,
  # the filter button can be hidden, and not drawn.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filter_column.rb#43
  def show_button; end

  # Flag indicating whether the AutoFilter button is show. This is
  # undocumented in the spec, but exists in the schema file as an
  # optional attribute.
  #
  # @param show [Boolean] Show or hide the button
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filter_column.rb#82
  def show_button=(show); end

  # Serialize the object to xml
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filter_column.rb#88
  def to_xml_string(str = T.unsafe(nil)); end
end

# Allowed filters
#
# source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filter_column.rb#29
Axlsx::FilterColumn::FILTERS = T.let(T.unsafe(nil), Array)

# When multiple values are chosen to filter by, or when a group of date values are chosen to filter by,
# this object groups those criteria together.
#
# source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#4
class Axlsx::Filters
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new Filters object
  #
  # @example
  #   ws.auto_filter.add_column(0, :filters, :blank => true, :calendar_type => 'japan', :filter_items => [100, 'a'])
  # @note The recommended way to interact with filter objects is via AutoFilter#add_column
  # @option [String]
  # @option [Array]
  # @option [Array]
  # @option [Boolean]
  # @param options [Hash] Options used to set this objects attributes and
  #   create filter and/or date group items
  # @param [Boolean] [Hash] a customizable set of options
  # @param [String] [Hash] a customizable set of options
  # @param [Array] [Hash] a customizable set of options
  # @return [Filters] a new instance of Filters
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#18
  def initialize(options = T.unsafe(nil)); end

  # Tells us if the row of the cell provided should be filterd as it
  # does not meet any of the specified filter_items or
  # date_group_items restrictions.
  # TODO implement this for date filters as well!
  #
  # @param cell [Cell] The cell to test against items
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#42
  def apply(cell); end

  # Flag indicating whether to filter by blank.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#29
  def blank; end

  # Set the value for blank
  #
  # @see blank
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#71
  def blank=(use_blank); end

  # Calendar type for date grouped items.
  # Used to interpret the values in dateGroupItem.
  # This is the calendar type used to evaluate all dates in the filter column,
  # even when those dates are not using the same calendar system / date formatting.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#35
  def calendar_type; end

  # @param calendar [String] The calendar type to use. This must be one of the types defined in CALENDAR_TYPES
  # @return [String]
  # @see calendar_type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#64
  def calendar_type=(calendar); end

  # the date group values in this filters object
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#57
  def date_group_items; end

  # Date group items are date group filter items where you specify the
  # date_group and a value for that option as part of the auto_filter
  # values in your workbook at this time.
  #
  # @note This can be specified, but will not be applied to the date
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#98
  def date_group_items=(options); end

  # The filter values in this filters object
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#52
  def filter_items; end

  # not entirely happy with this.
  # filter_items should be a simple typed list that overrides << etc
  # to create Filter objects from the inserted values. However this
  # is most likely so rarely used...(really? do you know that?)
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#88
  def filter_items=(values); end

  # Serialize the object to xml
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#77
  def to_xml_string(str = T.unsafe(nil)); end
end

# Allowed calendar types
#
# source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#25
Axlsx::Filters::CALENDAR_TYPES = T.let(T.unsafe(nil), Array)

# This collection is used to express a group of dates or times which are
# used in an AutoFilter criteria. Values are always written in the calendar
# type of the first date encountered in the filter range, so that all
# subsequent dates, even when formatted or represented by other calendar
# types, can be correctly compared for the purposes of filtering.
#
# source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#131
class Axlsx::Filters::DateGroupItem
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new DateGroupItem
  # instanciating the object
  # filter should apply for grouping
  #
  # @option [String]
  # @option [Integer|String]
  # @option [Integer]
  # @option [Integer]
  # @option [Integer]
  # @option [Integer]
  # @option [Integer]
  # @param options [Hash] A hash of options to use when
  # @param [String] [Hash] a customizable set of options
  # @param [Integer|String] [Hash] a customizable set of options
  # @param [Integer] [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @return [DateGroupItem] a new instance of DateGroupItem
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#146
  def initialize(options = T.unsafe(nil)); end

  # Grouping level
  # This must be one of year, month, day, hour, minute or second.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#161
  def date_time_grouping; end

  # The date time grouping for this filter.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#231
  def date_time_grouping=(grouping); end

  # Day (1-31)
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#173
  def day; end

  # The day value for the date group item
  # This must be between 1 and 31
  #
  # @note no attempt is made to ensure the date value is valid for any given month
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#204
  def day=(value); end

  # Hour (0..23)
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#177
  def hour; end

  # The hour value for the date group item
  # # this must be between 0 and 23
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#211
  def hour=(value); end

  # Minute (0..59(
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#181
  def minute; end

  # The minute value for the date group item
  # This must be between 0 and 59
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#218
  def minute=(value); end

  # Month (1..12)
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#169
  def month; end

  # The month value for the date group item
  # This must be between 1 and 12
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#196
  def month=(value); end

  # Second (0..59)
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#185
  def second; end

  # The second value for the date group item
  # This must be between 0 and 59
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#225
  def second=(value); end

  # Serialize the object to xml
  #
  # @param str [String] The string object this serialization will be concatenated to.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#238
  def to_xml_string(str = T.unsafe(nil)); end

  # Year (4 digits)
  #
  # @return [Integer|String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#165
  def year; end

  # The year value for the date group item
  # This must be a four digit value
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#189
  def year=(value); end
end

# Allowed date time groupings
#
# source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#156
Axlsx::Filters::DateGroupItem::DATE_TIME_GROUPING = T.let(T.unsafe(nil), Array)

# This class expresses a filter criteria value.
#
# source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#107
class Axlsx::Filters::Filter
  # Creates a new filter value object
  #
  # @param value [Any] The value of the filter. This is not restricted, but
  #   will be serialized via to_s so if you are passing an object
  #   be careful.
  # @return [Filter] a new instance of Filter
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#112
  def initialize(value); end

  # Serializes the filter value object
  #
  # @param str [String] The string to concact the serialization information to.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#121
  def to_xml_string(str = T.unsafe(nil)); end

  # Filter value used in the criteria.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#117
  def val; end

  # Filter value used in the criteria.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/auto_filter/filters.rb#117
  def val=(_arg0); end
end

# The Font class details a font instance for use in styling cells.
#
# @note The recommended way to manage fonts, and other styles is Styles#add_style
# @see Styles#add_style
#
# source://caxlsx//lib/axlsx/stylesheet/font.rb#5
class Axlsx::Font
  include ::Axlsx::OptionsParser

  # Creates a new Font
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Font] a new instance of Font
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#23
  def initialize(options = T.unsafe(nil)); end

  # Indicates if the font should be rendered in *bold*
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#71
  def b; end

  # @see b
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#119
  def b=(v); end

  # The charset of the font
  #
  # @note The following values are defined in the OOXML specification and are OS dependant values
  #   0   ANSI_CHARSET
  #   1   DEFAULT_CHARSET
  #   2   SYMBOL_CHARSET
  #   77  MAC_CHARSET
  #   128 SHIFTJIS_CHARSET
  #   129 HANGUL_CHARSET
  #   130 JOHAB_CHARSET
  #   134 GB2312_CHARSET
  #   136 CHINESEBIG5_CHARSET
  #   161 GREEK_CHARSET
  #   162 TURKISH_CHARSET
  #   163 VIETNAMESE_CHARSET
  #   177 HEBREW_CHARSET
  #   178 ARABIC_CHARSET
  #   186 BALTIC_CHARSET
  #   204 RUSSIAN_CHARSET
  #   222 THAI_CHARSET
  #   238 EASTEUROPE_CHARSET
  #   255 OEM_CHARSET
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#54
  def charset; end

  # @see charset
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#115
  def charset=(v); end

  # The color of the font
  #
  # @return [Color]
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#106
  def color; end

  # @see color
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#142
  def color=(v); end

  # Indicates if the font should be condensed
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#98
  def condense; end

  # @see condense
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#138
  def condense=(v); end

  # The font's extend property
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#102
  def extend; end

  # @see extend
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#140
  def extend=(v); end

  # The font's family
  #
  # @note The following are defined OOXML specification
  #   0 Not applicable.
  #   1 Roman
  #   2 Swiss
  #   3 Modern
  #   4 Script
  #   5 Decorative
  #   6..14 Reserved for future use
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#67
  def family; end

  # @see family
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#117
  def family=(v); end

  # Indicates if the font should be rendered italicized
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#75
  def i; end

  # @see i
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#121
  def i=(v); end

  # The name of the font
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#29
  def name; end

  # @see name
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#113
  def name=(v); end

  # Indicates if the font should be rendered with an outline
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#90
  def outline; end

  # @see outline
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#134
  def outline=(v); end

  # Indicates if the font should be rendered with a shadow
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#94
  def shadow; end

  # @see shadow
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#136
  def shadow=(v); end

  # Indicates if the font should be rendered with a strikthrough
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#86
  def strike; end

  # @see strike
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#132
  def strike=(v); end

  # The size of the font.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#110
  def sz; end

  # @see sz
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#144
  def sz=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#149
  def to_xml_string(str = T.unsafe(nil)); end

  # Indicates if the font should be rendered underlined
  # It must be one of :none, :single, :double, :singleAccounting, :doubleAccounting, true, false
  #
  # @note true or false is for backwards compatibility and is reassigned to :single or :none respectively
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#82
  def u; end

  # @see u
  #
  # source://caxlsx//lib/axlsx/stylesheet/font.rb#124
  def u=(v); end
end

# gif content type
#
# source://caxlsx//lib/axlsx/util/constants.rb#156
Axlsx::GIF_CT = T.let(T.unsafe(nil), String)

# gif extension
#
# source://caxlsx//lib/axlsx/util/constants.rb#171
Axlsx::GIF_EX = T.let(T.unsafe(nil), String)

# A GradientFill defines the color and positioning for gradiant cell fill.
#
# @see Open Office XML Part 1 §18.8.24
#
# source://caxlsx//lib/axlsx/stylesheet/gradient_fill.rb#4
class Axlsx::GradientFill
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new GradientFill object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [GradientFill] a new instance of GradientFill
  #
  # source://caxlsx//lib/axlsx/stylesheet/gradient_fill.rb#15
  def initialize(options = T.unsafe(nil)); end

  # Percentage format bottom
  #
  # @return [Float]
  #
  # source://caxlsx//lib/axlsx/stylesheet/gradient_fill.rb#49
  def bottom; end

  # @see bottom
  #
  # source://caxlsx//lib/axlsx/stylesheet/gradient_fill.rb#80
  def bottom=(v); end

  # Angle of the linear gradient
  #
  # @return [Float]
  #
  # source://caxlsx//lib/axlsx/stylesheet/gradient_fill.rb#33
  def degree; end

  # @see degree
  #
  # source://caxlsx//lib/axlsx/stylesheet/gradient_fill.rb#59
  def degree=(v); end

  # Percentage format left
  #
  # @return [Float]
  #
  # source://caxlsx//lib/axlsx/stylesheet/gradient_fill.rb#37
  def left; end

  # @see left
  #
  # source://caxlsx//lib/axlsx/stylesheet/gradient_fill.rb#62
  def left=(v); end

  # Percentage format right
  #
  # @return [Float]
  #
  # source://caxlsx//lib/axlsx/stylesheet/gradient_fill.rb#41
  def right; end

  # @see right
  #
  # source://caxlsx//lib/axlsx/stylesheet/gradient_fill.rb#68
  def right=(v); end

  # Collection of stop objects
  #
  # @return [SimpleTypedList]
  #
  # source://caxlsx//lib/axlsx/stylesheet/gradient_fill.rb#53
  def stop; end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/gradient_fill.rb#93
  def to_xml_string(str = T.unsafe(nil)); end

  # Percentage format top
  #
  # @return [Float]
  #
  # source://caxlsx//lib/axlsx/stylesheet/gradient_fill.rb#45
  def top; end

  # @see top
  #
  # source://caxlsx//lib/axlsx/stylesheet/gradient_fill.rb#74
  def top=(v); end

  # The type of gradient.
  #
  # @note valid options are
  #   :linear
  #   :path
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/stylesheet/gradient_fill.rb#29
  def type; end

  # @see type
  #
  # source://caxlsx//lib/axlsx/stylesheet/gradient_fill.rb#56
  def type=(v); end

  # validates that the value provided is between 0.0 and 1.0
  #
  # source://caxlsx//lib/axlsx/stylesheet/gradient_fill.rb#86
  def validate_format_percentage(name, value); end
end

# The GradientStop object represents a color point in a gradient.
#
# @see Open Office XML Part 1 §18.8.24
#
# source://caxlsx//lib/axlsx/stylesheet/gradient_stop.rb#4
class Axlsx::GradientStop
  # Creates a new GradientStop object
  #
  # @param color [Color]
  # @param position [Float]
  # @return [GradientStop] a new instance of GradientStop
  #
  # source://caxlsx//lib/axlsx/stylesheet/gradient_stop.rb#17
  def initialize(color, position); end

  # The color for this gradient stop
  #
  # @return [Color]
  # @see Color
  #
  # source://caxlsx//lib/axlsx/stylesheet/gradient_stop.rb#8
  def color; end

  # @see color
  #
  # source://caxlsx//lib/axlsx/stylesheet/gradient_stop.rb#23
  def color=(v); end

  # The position of the color
  #
  # @return [Float]
  #
  # source://caxlsx//lib/axlsx/stylesheet/gradient_stop.rb#12
  def position; end

  # @see position
  #
  # source://caxlsx//lib/axlsx/stylesheet/gradient_stop.rb#25
  def position=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/gradient_stop.rb#30
  def to_xml_string(str = T.unsafe(nil)); end
end

# A graphic frame defines a container for a chart object
#
# @note The recommended way to manage charts is Worksheet#add_chart
# @see Worksheet#add_chart
#
# source://caxlsx//lib/axlsx/drawing/graphic_frame.rb#5
class Axlsx::GraphicFrame
  # Creates a new GraphicFrame object
  #
  # @param anchor [TwoCellAnchor]
  # @param chart_type [Class]
  # @return [GraphicFrame] a new instance of GraphicFrame
  #
  # source://caxlsx//lib/axlsx/drawing/graphic_frame.rb#17
  def initialize(anchor, chart_type, options); end

  # A anchor that holds this frame
  #
  # @return [TwoCellAnchor]
  #
  # source://caxlsx//lib/axlsx/drawing/graphic_frame.rb#12
  def anchor; end

  # A reference to the chart object associated with this frame
  #
  # @return [Chart]
  #
  # source://caxlsx//lib/axlsx/drawing/graphic_frame.rb#8
  def chart; end

  # The relationship id for this graphic frame.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/graphic_frame.rb#25
  def rId; end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/graphic_frame.rb#32
  def to_xml_string(str = T.unsafe(nil)); end
end

# hyperlink rels namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#90
Axlsx::HYPERLINK_R = T.let(T.unsafe(nil), String)

# Header/Footer options for printing a worksheet. All settings are optional.
#
# Headers and footers are generated using a string which is a combination
# of plain text and control characters. A fairly comprehensive list of control
# characters can be found here:
# https://github.com/randym/axlsx/blob/master/notes_on_header_footer.md
#     
#
# @note The recommended way of managing header/footers is via Worksheet#header_footer
# @see Worksheet#initialize
#
# source://caxlsx//lib/axlsx/workbook/worksheet/header_footer.rb#11
class Axlsx::HeaderFooter
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  include ::Axlsx::Accessors
  extend ::Axlsx::SerializedAttributes::ClassMethods
  extend ::Axlsx::Accessors::ClassMethods

  # Creates a new HeaderFooter object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [HeaderFooter] a new instance of HeaderFooter
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/header_footer.rb#25
  def initialize(options = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def different_first; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def different_first=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def different_odd_even; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def different_odd_even=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def even_footer; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def even_footer=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def even_header; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def even_header=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def first_footer; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def first_footer=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def first_header; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def first_header=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def odd_footer; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def odd_footer=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def odd_header; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def odd_header=(value); end

  # Set some or all header/footers at once.
  #
  # @param options [Hash] The header/footer options to set (possible keys are :odd_header, :odd_footer, :even_header, :even_footer, :first_header, :first_footer, :different_odd_even, and :different_first).
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/header_footer.rb#36
  def set(options); end

  # Serializes the header/footer object.
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/header_footer.rb#43
  def to_xml_string(str = T.unsafe(nil)); end
end

# a hyperlink object adds an action to an image when clicked so that when the image is clicked the link is fecthed.
#
# @note using the hyperlink option when calling add_image on a drawing object is the recommended way to manage hyperlinks
# @see {file:README} README
#
# source://caxlsx//lib/axlsx/drawing/hyperlink.rb#5
class Axlsx::Hyperlink
  include ::Axlsx::SerializedAttributes
  include ::Axlsx::OptionsParser
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a hyperlink object
  # parent must be a Pic for now, although I expect that other object support this tag and its cNvPr parent
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param parent [Pic]
  # @param options [Hash] a customizable set of options
  # @return [Hyperlink] a new instance of Hyperlink
  # @yield [_self]
  # @yieldparam _self [Axlsx::Hyperlink] the object that the method was called on
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#20
  def initialize(parent, options = T.unsafe(nil)); end

  # An action to take when the link is clicked. The specification says "This can be used to specify a slide to be navigated to or a script of code to be run." but in most cases you will not need to do anything with this. MS does reserve a few interesting strings. @see http://msdn.microsoft.com/en-us/library/ff532419%28v=office.12%29.aspx
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#43
  def action; end

  # An action to take when the link is clicked. The specification says "This can be used to specify a slide to be navigated to or a script of code to be run." but in most cases you will not need to do anything with this. MS does reserve a few interesting strings. @see http://msdn.microsoft.com/en-us/library/ff532419%28v=office.12%29.aspx
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#43
  def action=(_arg0); end

  # Specifies if all sound events should be terminated when this link is clicked.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#47
  def endSnd; end

  # @param v [Boolean] The boolean value indicating the termination of playing sounds on click
  # @return [Boolean]
  # @see endSnd
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#53
  def endSnd=(v); end

  # Specifies if all sound events should be terminated when this link is clicked.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#47
  def end_snd; end

  # @param v [Boolean] The boolean value indicating the termination of playing sounds on click
  # @return [Boolean]
  # @see endSnd
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#53
  def end_snd=(v); end

  # indicates that the link has already been clicked.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#58
  def highlightClick; end

  # @param v [Boolean] The value to assign
  # @see highlightClick
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#63
  def highlightClick=(v); end

  # indicates that the link has already been clicked.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#58
  def highlight_click; end

  # @param v [Boolean] The value to assign
  # @see highlightClick
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#63
  def highlight_click=(v); end

  # From the specs: Specifies whether to add this URI to the history when navigating to it. This allows for the viewing of this presentation without the storing of history information on the viewing machine. If this attribute is omitted, then a value of 1 or true is assumed.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#68
  def history; end

  # param [Boolean] v The value to assing
  #
  # @see history
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#72
  def history=(v); end

  # The destination of the hyperlink stored in the drawing's relationships document.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#31
  def href; end

  # The destination of the hyperlink stored in the drawing's relationships document.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#31
  def href=(_arg0); end

  # The spec says: Specifies the URL when it has been determined by the generating application that the URL is invalid. That is the generating application can still store the URL but it is known that this URL is not correct.
  #
  # What exactly that means is beyond me so if you ever use this, let me know!
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#37
  def invalidUrl; end

  # The spec says: Specifies the URL when it has been determined by the generating application that the URL is invalid. That is the generating application can still store the URL but it is known that this URL is not correct.
  #
  # What exactly that means is beyond me so if you ever use this, let me know!
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#37
  def invalidUrl=(_arg0); end

  # The spec says: Specifies the URL when it has been determined by the generating application that the URL is invalid. That is the generating application can still store the URL but it is known that this URL is not correct.
  #
  # What exactly that means is beyond me so if you ever use this, let me know!
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#37
  def invalid_url; end

  # The spec says: Specifies the URL when it has been determined by the generating application that the URL is invalid. That is the generating application can still store the URL but it is known that this URL is not correct.
  #
  # What exactly that means is beyond me so if you ever use this, let me know!
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#37
  def invalid_url=(_arg0); end

  # The relationship object for this hyperlink.
  #
  # @return [Relationship]
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#86
  def relationship; end

  # From the specs: Specifies the target frame that is to be used when opening this hyperlink. When the hyperlink is activated this attribute is used to determine if a new window is launched for viewing or if an existing one can be used. If this attribute is omitted, than a new window is opened.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#76
  def tgtFrame; end

  # From the specs: Specifies the target frame that is to be used when opening this hyperlink. When the hyperlink is activated this attribute is used to determine if a new window is launched for viewing or if an existing one can be used. If this attribute is omitted, than a new window is opened.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#76
  def tgtFrame=(_arg0); end

  # From the specs: Specifies the target frame that is to be used when opening this hyperlink. When the hyperlink is activated this attribute is used to determine if a new window is launched for viewing or if an existing one can be used. If this attribute is omitted, than a new window is opened.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#76
  def tgt_frame; end

  # From the specs: Specifies the target frame that is to be used when opening this hyperlink. When the hyperlink is activated this attribute is used to determine if a new window is launched for viewing or if an existing one can be used. If this attribute is omitted, than a new window is opened.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#76
  def tgt_frame=(_arg0); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#93
  def to_xml_string(str = T.unsafe(nil)); end

  # Text to show when you mouse over the hyperlink. If you do not set this, the href property will be shown.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#82
  def tooltip; end

  # Text to show when you mouse over the hyperlink. If you do not set this, the href property will be shown.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/hyperlink.rb#82
  def tooltip=(_arg0); end
end

# chart part
#
# source://caxlsx//lib/axlsx/util/constants.rb#234
Axlsx::IMAGE_PN = T.let(T.unsafe(nil), String)

# image rels namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#87
Axlsx::IMAGE_R = T.let(T.unsafe(nil), String)

# ISO 8601 date recognition
#
# source://caxlsx//lib/axlsx/util/constants.rb#406
Axlsx::ISO_8601_REGEX = T.let(T.unsafe(nil), Regexp)

# @note The recommended way to manage these rules is via Worksheet#add_conditional_formatting
# @see Worksheet#add_conditional_formatting
# @see ConditionalFormattingRule#initialize
#
# source://caxlsx//lib/axlsx/workbook/worksheet/icon_set.rb#8
class Axlsx::IconSet
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new icon set object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [IconSet] a new instance of IconSet
  # @yield [_self]
  # @yieldparam _self [Axlsx::IconSet] the object that the method was called on
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/icon_set.rb#17
  def initialize(options = T.unsafe(nil)); end

  # The icon set to display.
  # Allowed values are: 3Arrows, 3ArrowsGray, 3Flags, 3TrafficLights1, 3TrafficLights2, 3Signs, 3Symbols, 3Symbols2, 4Arrows, 4ArrowsGray, 4RedToBlack, 4Rating, 4TrafficLights, 5Arrows, 5ArrowsGray, 5Rating, 5Quarters
  # The default value is 3TrafficLights1
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/icon_set.rb#32
  def iconSet; end

  # @see iconSet
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/icon_set.rb#50
  def iconSet=(v); end

  # Indicates whether the thresholds indicate percentile values, instead of number values.
  # The default falue is true
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/icon_set.rb#37
  def percent; end

  # @see percent
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/icon_set.rb#56
  def percent=(v); end

  # If true, reverses the default order of the icons in this icon set.maxLength attribute
  # The default value is false
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/icon_set.rb#42
  def reverse; end

  # @see reverse
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/icon_set.rb#59
  def reverse=(v); end

  # Indicates whether to show the values of the cells on which this data bar is applied.
  # The default value is true
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/icon_set.rb#47
  def showValue; end

  # @see showValue
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/icon_set.rb#53
  def showValue=(v); end

  # Serialize this object to an xml string
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/icon_set.rb#64
  def to_xml_string(str = T.unsafe(nil)); end

  private

  # Initalize the simple typed list of value objects
  # I am keeping this private for now as I am not sure what impact changes to the required two cfvo objects will do.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/icon_set.rb#74
  def initialize_value_objects; end
end

# jpeg content type
#
# source://caxlsx//lib/axlsx/util/constants.rb#153
Axlsx::JPEG_CT = T.let(T.unsafe(nil), String)

# jpeg extension
#
# source://caxlsx//lib/axlsx/util/constants.rb#168
Axlsx::JPEG_EX = T.let(T.unsafe(nil), String)

# The Line3DChart is a three dimentional line chart (who would have guessed?) that you can add to your worksheet.
#
# @example Creating a chart
#   # This example creates a line in a single sheet.
#   require "rubygems" # if that is your preferred way to manage gems!
#   require "axlsx"
#
#   p = Axlsx::Package.new
#   ws = p.workbook.add_worksheet
#   ws.add_row ["This is a chart with no data in the sheet"]
#
#   chart = ws.add_chart(Axlsx::Line3DChart, :start_at=> [0,1], :end_at=>[0,6], :t#itle=>"Most Popular Pets")
#   chart.add_series :data => [1, 9, 10], :labels => ["Slimy Reptiles", "Fuzzy Bunnies", "Rottweiler"]
# @see Worksheet#add_chart
# @see Worksheet#add_row
# @see Chart#add_series
# @see Series
# @see Package#serialize
#
# source://caxlsx//lib/axlsx/drawing/line_3D_chart.rb#20
class Axlsx::Line3DChart < ::Axlsx::LineChart
  # Creates a new line chart object
  #
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Line3DChart] a new instance of Line3DChart
  # @see Chart
  # @see lineChart
  # @see View3D
  #
  # source://caxlsx//lib/axlsx/drawing/line_3D_chart.rb#41
  def initialize(frame, options = T.unsafe(nil)); end

  # space between bar or column clusters, as a percentage of the bar or column width.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/line_3D_chart.rb#23
  def gapDepth; end

  # @see gapDepth
  #
  # source://caxlsx//lib/axlsx/drawing/line_3D_chart.rb#49
  def gapDepth=(v); end

  # space between bar or column clusters, as a percentage of the bar or column width.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/line_3D_chart.rb#23
  def gap_depth; end

  # @see gapDepth
  #
  # source://caxlsx//lib/axlsx/drawing/line_3D_chart.rb#49
  def gap_depth=(v); end

  # the category axis
  #
  # @return [Axis]
  #
  # source://caxlsx//lib/axlsx/drawing/line_3D_chart.rb#31
  def serAxis; end

  # the category axis
  #
  # @return [Axis]
  #
  # source://caxlsx//lib/axlsx/drawing/line_3D_chart.rb#31
  def ser_axis; end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/line_3D_chart.rb#58
  def to_xml_string(str = T.unsafe(nil)); end
end

# validation regex for gap amount percent
#
# source://caxlsx//lib/axlsx/drawing/line_3D_chart.rb#27
Axlsx::Line3DChart::GAP_AMOUNT_PERCENT = T.let(T.unsafe(nil), Regexp)

# The LineChart is a two dimentional line chart (who would have guessed?) that you can add to your worksheet.
#
# @example Creating a chart
#   # This example creates a line in a single sheet.
#   require "rubygems" # if that is your preferred way to manage gems!
#   require "axlsx"
#
#   p = Axlsx::Package.new
#   ws = p.workbook.add_worksheet
#   ws.add_row ["This is a chart with no data in the sheet"]
#
#   chart = ws.add_chart(Axlsx::LineChart, :start_at=> [0,1], :end_at=>[0,6], :title=>"Most Popular Pets")
#   chart.add_series :data => [1, 9, 10], :labels => ["Slimy Reptiles", "Fuzzy Bunnies", "Rottweiler"]
# @see Worksheet#add_chart
# @see Worksheet#add_row
# @see Chart#add_series
# @see Series
# @see Package#serialize
#
# source://caxlsx//lib/axlsx/drawing/line_chart.rb#20
class Axlsx::LineChart < ::Axlsx::Chart
  # Creates a new line chart object
  #
  # @option options
  # @option options
  # @option options
  # @param frame [GraphicFrame] The workbook that owns this chart.
  # @param options [Hash] a customizable set of options
  # @return [LineChart] a new instance of LineChart
  # @see Chart
  #
  # source://caxlsx//lib/axlsx/drawing/line_chart.rb#45
  def initialize(frame, options = T.unsafe(nil)); end

  # The axes for this chart. LineCharts have a category and value
  # axis.
  #
  # @return [Axes]
  #
  # source://caxlsx//lib/axlsx/drawing/line_chart.rb#92
  def axes; end

  # the category axis
  #
  # @return [CatAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/line_chart.rb#23
  def catAxis; end

  # the category axis
  #
  # @return [CatAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/line_chart.rb#23
  def cat_axis; end

  # must be one of  [:percentStacked, :clustered, :standard, :stacked]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/line_chart.rb#37
  def grouping; end

  # @see grouping
  #
  # source://caxlsx//lib/axlsx/drawing/line_chart.rb#54
  def grouping=(v); end

  # The node name to use in serialization. As LineChart is used as the
  # base class for Liine3DChart we need to be sure to serialize the
  # chart based on the actual class type and not a fixed node name.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/line_chart.rb#63
  def node_name; end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/line_chart.rb#75
  def to_xml_string(str = T.unsafe(nil)); end

  # the category axis
  #
  # @return [ValAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/line_chart.rb#30
  def valAxis; end

  # the category axis
  #
  # @return [ValAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/line_chart.rb#30
  def val_axis; end
end

# A LineSeries defines the title, data and labels for line charts
#
# @note The recommended way to manage series is to use Chart#add_series
# @see Worksheet#add_chart
# @see Chart#add_series
#
# source://caxlsx//lib/axlsx/drawing/line_series.rb#6
class Axlsx::LineSeries < ::Axlsx::Series
  # Creates a new series
  #
  # @option options
  # @option options
  # @param chart [Chart]
  # @param options [Hash] a customizable set of options
  # @return [LineSeries] a new instance of LineSeries
  #
  # source://caxlsx//lib/axlsx/drawing/line_series.rb#36
  def initialize(chart, options = T.unsafe(nil)); end

  # The fill color for this series.
  # Red, green, and blue is expressed as sequence of hex digits, RRGGBB. A perceptual gamma of 2.2 is used.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/line_series.rb#18
  def color; end

  # @see color
  #
  # source://caxlsx//lib/axlsx/drawing/line_series.rb#47
  def color=(v); end

  # The data for this series.
  #
  # @return [ValAxisData]
  #
  # source://caxlsx//lib/axlsx/drawing/line_series.rb#9
  def data; end

  # The labels for this series.
  #
  # @return [CatAxisData]
  #
  # source://caxlsx//lib/axlsx/drawing/line_series.rb#13
  def labels; end

  # custom marker symbol
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/line_series.rb#26
  def marker_symbol; end

  # @see marker_symbol
  #
  # source://caxlsx//lib/axlsx/drawing/line_series.rb#58
  def marker_symbol=(v); end

  # show markers on values
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/line_series.rb#22
  def show_marker; end

  # @see show_marker
  #
  # source://caxlsx//lib/axlsx/drawing/line_series.rb#52
  def show_marker=(v); end

  # line smoothing on values
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/line_series.rb#30
  def smooth; end

  # @see smooth
  #
  # source://caxlsx//lib/axlsx/drawing/line_series.rb#64
  def smooth=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/line_series.rb#72
  def to_xml_string(str = T.unsafe(nil)); end

  private

  # assigns the data for this series
  #
  # source://caxlsx//lib/axlsx/drawing/line_series.rb#102
  def data=(v); end

  # assigns the labels for this series
  #
  # source://caxlsx//lib/axlsx/drawing/line_series.rb#105
  def labels=(v); end
end

# source://caxlsx//lib/axlsx/util/constants.rb#410
Axlsx::MAYBE_FLOAT_REGEX = T.let(T.unsafe(nil), Regexp)

# The Marker class defines a point in the worksheet that drawing anchors attach to.
#
# @note The recommended way to manage markers is Worksheet#add_chart Markers are created for a two cell anchor based on the :start and :end options.
# @see Worksheet#add_chart
#
# source://caxlsx//lib/axlsx/drawing/marker.rb#5
class Axlsx::Marker
  include ::Axlsx::OptionsParser

  # Creates a new Marker object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Marker] a new instance of Marker
  #
  # source://caxlsx//lib/axlsx/drawing/marker.rb#13
  def initialize(options = T.unsafe(nil)); end

  # The column this marker anchors to
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/marker.rb#20
  def col; end

  # @see col
  #
  # source://caxlsx//lib/axlsx/drawing/marker.rb#35
  def col=(v); end

  # The offset distance from this marker's column
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/marker.rb#24
  def colOff; end

  # @see colOff
  #
  # source://caxlsx//lib/axlsx/drawing/marker.rb#37
  def colOff=(v); end

  # shortcut to set the column, row position for this marker
  # or an Array.
  # String or Array.
  #
  # @param col the column for the marker, a Cell object or a string reference like "B7"
  # @param row the row of the marker. This is ignored if the col parameter is a Cell or
  #
  # source://caxlsx//lib/axlsx/drawing/marker.rb#48
  def coord(col, row = T.unsafe(nil)); end

  # The row this marker anchors to
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/marker.rb#28
  def row; end

  # @see row
  #
  # source://caxlsx//lib/axlsx/drawing/marker.rb#39
  def row=(v); end

  # The offset distance from this marker's row
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/marker.rb#32
  def rowOff; end

  # @see rowOff
  #
  # source://caxlsx//lib/axlsx/drawing/marker.rb#41
  def rowOff=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/marker.rb#57
  def to_xml_string(str = T.unsafe(nil)); end

  private

  # handles multiple inputs for setting the position of a marker
  #
  # @see Chart#start_at
  #
  # source://caxlsx//lib/axlsx/drawing/marker.rb#67
  def parse_coord_args(x, y = T.unsafe(nil)); end
end

# A simple list of merged cells
#
# source://caxlsx//lib/axlsx/workbook/worksheet/merged_cells.rb#3
class Axlsx::MergedCells < ::Axlsx::SimpleTypedList
  # creates a new MergedCells object
  #
  # @param worksheet [Worksheet]
  # @raise [ArgumentError]
  # @return [MergedCells] a new instance of MergedCells
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/merged_cells.rb#6
  def initialize(worksheet); end

  # adds cells to the merged cells collection
  # collection. This can be an array of actual cells or a string style
  # range like 'A1:C1'
  #
  # @param cells [Array||String] The cells to add to the merged cells
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/merged_cells.rb#16
  def add(cells); end

  # serialize the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/merged_cells.rb#29
  def to_xml_string(str = T.unsafe(nil)); end
end

# This module defines some utils related with mime type detection
#
# source://caxlsx//lib/axlsx/util/mime_type_utils.rb#5
module Axlsx::MimeTypeUtils
  class << self
    # Detect a file mime type
    #
    # @param v [String] File path
    # @return [String] File mime type
    #
    # source://caxlsx//lib/axlsx/util/mime_type_utils.rb#9
    def get_mime_type(v); end

    # Detect a file mime type from URI
    #
    # @param v [String] URI
    # @return [String] File mime type
    #
    # source://caxlsx//lib/axlsx/util/mime_type_utils.rb#16
    def get_mime_type_from_uri(v); end
  end
end

# Numeric recognition
#
# source://caxlsx//lib/axlsx/util/constants.rb#413
Axlsx::NUMERIC_REGEX = T.let(T.unsafe(nil), Regexp)

# number format id for pecentage formatting using the default formatting id.
#
# source://caxlsx//lib/axlsx/util/constants.rb#261
Axlsx::NUM_FMT_PERCENT = T.let(T.unsafe(nil), Integer)

# number format id for date format like 2011/11/13
#
# source://caxlsx//lib/axlsx/util/constants.rb#264
Axlsx::NUM_FMT_YYYYMMDD = T.let(T.unsafe(nil), Integer)

# number format id for time format the creates 2011/11/13 12:23:10
#
# source://caxlsx//lib/axlsx/util/constants.rb#267
Axlsx::NUM_FMT_YYYYMMDDHHMMSS = T.let(T.unsafe(nil), Integer)

# This class specifies data for a particular data point. It is used for both numCache and numLit object
#
# source://caxlsx//lib/axlsx/drawing/num_data.rb#3
class Axlsx::NumData
  include ::Axlsx::OptionsParser

  # creates a new NumVal object
  #
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [NumData] a new instance of NumData
  # @see StrData
  #
  # source://caxlsx//lib/axlsx/drawing/num_data.rb#10
  def initialize(options = T.unsafe(nil)); end

  # Creates the val objects for this data set. I am not overly confident this is going to play nicely with time and data types.
  #
  # @param values [Array] An array of cells or values.
  #
  # source://caxlsx//lib/axlsx/drawing/num_data.rb#22
  def data=(values = T.unsafe(nil)); end

  # A string representing the format code to apply. For more information see see the SpreadsheetML numFmt element's (§18.8.30) formatCode attribute.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/num_data.rb#18
  def format_code; end

  # @see format_code
  #
  # source://caxlsx//lib/axlsx/drawing/num_data.rb#31
  def format_code=(v = T.unsafe(nil)); end

  # serialize the object
  #
  # source://caxlsx//lib/axlsx/drawing/num_data.rb#37
  def to_xml_string(str = T.unsafe(nil)); end
end

# A numeric data source for use by charts.
#
# source://caxlsx//lib/axlsx/drawing/num_data_source.rb#3
class Axlsx::NumDataSource
  include ::Axlsx::OptionsParser

  # creates a new NumDataSource object
  #
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [NumDataSource] a new instance of NumDataSource
  #
  # source://caxlsx//lib/axlsx/drawing/num_data_source.rb#9
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute data.
  #
  # source://caxlsx//lib/axlsx/drawing/num_data_source.rb#28
  def data; end

  # The tag name to use when serializing this data source.
  # Only items defined in allowed_tag_names are allowed
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/num_data_source.rb#26
  def tag_name; end

  # sets the tag name for this data source
  #
  # @param v [Symbol] One of the allowed_tag_names
  #
  # source://caxlsx//lib/axlsx/drawing/num_data_source.rb#38
  def tag_name=(v); end

  # serialize the object
  #
  # @param str [String]
  #
  # source://caxlsx//lib/axlsx/drawing/num_data_source.rb#45
  def to_xml_string(str = T.unsafe(nil)); end

  class << self
    # allowed element tag names
    #
    # @return [Array]
    #
    # source://caxlsx//lib/axlsx/drawing/num_data_source.rb#32
    def allowed_tag_names; end
  end
end

# A NumFmt object defines an identifier and formatting code for data in cells.
#
# @note The recommended way to manage styles is Styles#add_style
#
# source://caxlsx//lib/axlsx/stylesheet/num_fmt.rb#4
class Axlsx::NumFmt
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new NumFmt object
  #
  # @option [Integer]
  # @option [String]
  # @param options [Hash] Options for the number format object
  # @param [Integer] [Hash] a customizable set of options
  # @param [String] [Hash] a customizable set of options
  # @return [NumFmt] a new instance of NumFmt
  #
  # source://caxlsx//lib/axlsx/stylesheet/num_fmt.rb#12
  def initialize(options = T.unsafe(nil)); end

  # @return [String] The formatting to use for this number format.
  # @see http://support.microsoft.com/kb/264372
  #
  # source://caxlsx//lib/axlsx/stylesheet/num_fmt.rb#22
  def formatCode; end

  # @see formatCode
  #
  # source://caxlsx//lib/axlsx/stylesheet/num_fmt.rb#65
  def formatCode=(v); end

  # @note These are the known formats I can dig up. The constant NUM_FMT_PERCENT is 9, and uses the default % formatting. Axlsx also defines a few formats for date and time that are commonly used in asia as NUM_FMT_YYYYMMDD and NUM_FRM_YYYYMMDDHHMMSS.
  #   1 0
  #   2 0.00
  #   3 #,##0
  #   4 #,##0.00
  #   5 $#,##0_);($#,##0)
  #   6 $#,##0_);[Red]($#,##0)
  #   7 $#,##0.00_);($#,##0.00)
  #   8 $#,##0.00_);[Red]($#,##0.00)
  #   9 0%
  #   10 0.00%
  #   11 0.00E+00
  #   12 # ?/?
  #   13 # ??/??
  #   14 m/d/yyyy
  #   15 d-mmm-yy
  #   16 d-mmm
  #   17 mmm-yy
  #   18 h:mm AM/PM
  #   19 h:mm:ss AM/PM
  #   20 h:mm
  #   21 h:mm:ss
  #   22 m/d/yyyy h:mm
  #   37 #,##0_);(#,##0)
  #   38 #,##0_);[Red](#,##0)
  #   39 #,##0.00_);(#,##0.00)
  #   40 #,##0.00_);[Red](#,##0.00)
  #   45 mm:ss
  #   46 [h]:mm:ss
  #   47 mm:ss.0
  #   48 ##0.0E+0
  #   49 @
  # @return [Integer] An unsigned integer referencing a standard or custom number format.
  # @see Axlsx
  #
  # source://caxlsx//lib/axlsx/stylesheet/num_fmt.rb#59
  def numFmtId; end

  # @see numFmtId
  #
  # source://caxlsx//lib/axlsx/stylesheet/num_fmt.rb#62
  def numFmtId=(v); end

  # Override to avoid removing underscores
  #
  # source://caxlsx//lib/axlsx/stylesheet/num_fmt.rb#75
  def serialized_attributes(str = T.unsafe(nil), additional_attributes = T.unsafe(nil)); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/num_fmt.rb#70
  def to_xml_string(str = T.unsafe(nil)); end
end

# This class specifies data for a particular data point.
#
# source://caxlsx//lib/axlsx/drawing/num_val.rb#3
class Axlsx::NumVal < ::Axlsx::StrVal
  # creates a new NumVal object
  #
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [NumVal] a new instance of NumVal
  #
  # source://caxlsx//lib/axlsx/drawing/num_val.rb#12
  def initialize(options = T.unsafe(nil)); end

  # A string representing the format code to apply.
  # For more information see see the SpreadsheetML numFmt element's (§18.8.30) formatCode attribute.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/num_val.rb#7
  def format_code; end

  # @see format_code
  #
  # source://caxlsx//lib/axlsx/drawing/num_val.rb#18
  def format_code=(v); end

  # serialize the object
  #
  # source://caxlsx//lib/axlsx/drawing/num_val.rb#24
  def to_xml_string(idx, str = T.unsafe(nil)); end
end

# This class details a single cell anchor for drawings.
#
# @note The recommended way to manage drawings, images and charts is Worksheet#add_chart or Worksheet#add_image.
# @see Worksheet#add_chart
# @see Worksheet#add_image
#
# source://caxlsx//lib/axlsx/drawing/one_cell_anchor.rb#6
class Axlsx::OneCellAnchor
  include ::Axlsx::OptionsParser

  # Creates a new OneCellAnchor object and an Pic associated with it.
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param drawing [Drawing]
  # @param options [Hash] a customizable set of options
  # @return [OneCellAnchor] a new instance of OneCellAnchor
  #
  # source://caxlsx//lib/axlsx/drawing/one_cell_anchor.rb#17
  def initialize(drawing, options = T.unsafe(nil)); end

  # The drawing that holds this anchor
  #
  # @return [Drawing]
  #
  # source://caxlsx//lib/axlsx/drawing/one_cell_anchor.rb#38
  def drawing; end

  # A marker that defines the from cell anchor. The default from column and row are 0 and 0 respectively
  #
  # @return [Marker]
  #
  # source://caxlsx//lib/axlsx/drawing/one_cell_anchor.rb#30
  def from; end

  # the height of the graphic object in pixels
  # this is converted to EMU at a 92 ppi resolution
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/one_cell_anchor.rb#48
  def height; end

  # @see height
  #
  # source://caxlsx//lib/axlsx/drawing/one_cell_anchor.rb#61
  def height=(v); end

  # The index of this anchor in the drawing
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/one_cell_anchor.rb#68
  def index; end

  # The object this anchor hosts
  #
  # @return [Pic]
  #
  # source://caxlsx//lib/axlsx/drawing/one_cell_anchor.rb#34
  def object; end

  # sets the starting position for the anchor.
  # You can provide a String like "A1", an array like [0,0] or a cell object for the x parameter.
  # We just 'figure it out' for you.
  #
  # @param x [Array, String, Cell, Integer] Accepts many inputs for defining the starting position of the cell.
  # @param y [Integer] When x is an integer, this value is used for the row index at which the anchor starts.
  #
  # source://caxlsx//lib/axlsx/drawing/one_cell_anchor.rb#55
  def start_at(x, y = T.unsafe(nil)); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/one_cell_anchor.rb#75
  def to_xml_string(str = T.unsafe(nil)); end

  # the width of the graphic object in pixels.
  # this is converted to EMU at a 92 ppi resolution
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/one_cell_anchor.rb#43
  def width; end

  # @see width
  #
  # source://caxlsx//lib/axlsx/drawing/one_cell_anchor.rb#64
  def width=(v); end

  private

  # converts the pixel width and height to EMU units and returns a hash of
  # !{:cx=>[Integer], :cy=>[Integer]
  #
  # @return [Hash]
  #
  # source://caxlsx//lib/axlsx/drawing/one_cell_anchor.rb#91
  def ext; end
end

# This module defines a single method for parsing options in class
# initializers.
#
# source://caxlsx//lib/axlsx/util/options_parser.rb#4
module Axlsx::OptionsParser
  # Parses an options hash by calling any defined method by the same
  # name of the key postfixed with an '='
  #
  # @param options [Hash] Options to parse.
  #
  # source://caxlsx//lib/axlsx/util/options_parser.rb#8
  def parse_options(options = T.unsafe(nil)); end
end

# The OutlinePr class manages serialization of a worksheet's outlinePr element, which provides various
# options to control outlining.
#
# source://caxlsx//lib/axlsx/workbook/worksheet/outline_pr.rb#4
class Axlsx::OutlinePr
  include ::Axlsx::OptionsParser
  include ::Axlsx::Accessors
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::Accessors::ClassMethods
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new OutlinePr object
  #
  # @param options [Hash] used to create the outline_pr
  # @return [OutlinePr] a new instance of OutlinePr
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/outline_pr.rb#21
  def initialize(options = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def apply_styles; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def apply_styles=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def summary_below; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def summary_below=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def summary_right; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def summary_right=(value); end

  # Serialize the object
  #
  # @param str [String] serialized output will be appended to this object if provided.
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/outline_pr.rb#28
  def to_xml_string(str = T.unsafe(nil)); end
end

# An override content part. These parts are automatically created by for you based on the content of your package.
#
# source://caxlsx//lib/axlsx/content_type/override.rb#3
class Axlsx::Override < ::Axlsx::AbstractContentType
  # The name and location of the part.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/content_type/override.rb#9
  def PartName; end

  # The name and location of the part.
  #
  # source://caxlsx//lib/axlsx/content_type/override.rb#13
  def PartName=(v); end

  # The name and location of the part.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/content_type/override.rb#9
  def part_name; end

  # The name and location of the part.
  #
  # source://caxlsx//lib/axlsx/content_type/override.rb#13
  def part_name=(v); end

  # Serializes this object to xml
  #
  # source://caxlsx//lib/axlsx/content_type/override.rb#17
  def to_xml_string(str = T.unsafe(nil)); end
end

# Serialization node name for this object
#
# source://caxlsx//lib/axlsx/content_type/override.rb#5
Axlsx::Override::NODE_NAME = T.let(T.unsafe(nil), String)

# pivot table cache definition content type
#
# source://caxlsx//lib/axlsx/util/constants.rb#111
Axlsx::PIVOT_TABLE_CACHE_DEFINITION_CT = T.let(T.unsafe(nil), String)

# pivot table cache definition part name
#
# source://caxlsx//lib/axlsx/util/constants.rb#225
Axlsx::PIVOT_TABLE_CACHE_DEFINITION_PN = T.let(T.unsafe(nil), String)

# pivot table cache definition namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#57
Axlsx::PIVOT_TABLE_CACHE_DEFINITION_R = T.let(T.unsafe(nil), String)

# pivot table content type
#
# source://caxlsx//lib/axlsx/util/constants.rb#108
Axlsx::PIVOT_TABLE_CT = T.let(T.unsafe(nil), String)

# pivot table parts
#
# source://caxlsx//lib/axlsx/util/constants.rb#222
Axlsx::PIVOT_TABLE_PN = T.let(T.unsafe(nil), String)

# pivot table rels namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#54
Axlsx::PIVOT_TABLE_R = T.let(T.unsafe(nil), String)

# pivot table rels parts
#
# source://caxlsx//lib/axlsx/util/constants.rb#228
Axlsx::PIVOT_TABLE_RELS_PN = T.let(T.unsafe(nil), String)

# png content type
#
# source://caxlsx//lib/axlsx/util/constants.rb#159
Axlsx::PNG_CT = T.let(T.unsafe(nil), String)

# png extension
#
# source://caxlsx//lib/axlsx/util/constants.rb#174
Axlsx::PNG_EX = T.let(T.unsafe(nil), String)

# Package is responsible for managing all the bits and peices that Open Office XML requires to make a valid
# xlsx document including validation and serialization.
#
# source://caxlsx//lib/axlsx/package.rb#4
class Axlsx::Package
  include ::Axlsx::OptionsParser

  # Initializes your package
  #
  # @example Package.new :author => 'you!', :workbook => Workbook.new
  # @option options
  # @option options
  # @option options
  # @param options [Hash] A hash that you can use to specify the author and workbook for this package.
  # @return [Package] a new instance of Package
  # @yield [_self]
  # @yieldparam _self [Axlsx::Package] the object that the method was called on
  #
  # source://caxlsx//lib/axlsx/package.rb#22
  def initialize(options = T.unsafe(nil)); end

  # provides access to the app doc properties for this package
  # see App
  #
  # source://caxlsx//lib/axlsx/package.rb#9
  def app; end

  # provides access to the core doc properties for the package
  # see Core
  #
  # source://caxlsx//lib/axlsx/package.rb#13
  def core; end

  # Encrypt the package into a CFB using the password provided
  # This is not ready yet
  #
  # source://caxlsx//lib/axlsx/package.rb#144
  def encrypt(file_name, password); end

  # Serialize your workbook to disk as an xlsx document.
  #
  # @example
  #   # This is how easy it is to create a valid xlsx file. Of course you might want to add a sheet or two, and maybe some data, styles and charts.
  #   # Take a look at the README for an example of how to do it!
  #
  #   #serialize to a file
  #   p = Axlsx::Package.new
  #   # ......add cool stuff to your workbook......
  #   p.serialize("example.xlsx")
  #
  #   # Serialize to a file, using a system zip binary
  #   p.serialize("example.xlsx", zip_command: "zip", confirm_valid: false)
  #   p.serialize("example.xlsx", zip_command: "/path/to/zip")
  #   p.serialize("example.xlsx", zip_command: "zip -1")
  #
  #   # Serialize to a stream
  #   s = p.to_stream()
  #   File.open('example_streamed.xlsx', 'wb') { |f| f.write(s.read) }
  # @note A tremendous amount of effort has gone into ensuring that you cannot create invalid xlsx documents.
  #   options[:confirm_valid] should be used in the rare case that you cannot open the serialized file.
  # @option options
  # @option options
  # @param output [String] The name of the file you want to serialize your package to
  # @param options [Hash]
  # @return [Boolean] False if confirm_valid and validation errors exist. True if the package was serialized
  # @see Package#validate
  #
  # source://caxlsx//lib/axlsx/package.rb#101
  def serialize(output, options = T.unsafe(nil), secondary_options = T.unsafe(nil)); end

  # Serialize your workbook to a StringIO instance
  #
  # @param confirm_valid [Boolean] Validate the package prior to serialization.
  # @return [StringIO|Boolean] False if confirm_valid and validation errors exist. rewound string IO if not.
  #
  # source://caxlsx//lib/axlsx/package.rb#126
  def to_stream(confirm_valid = T.unsafe(nil)); end

  # Shortcut to specify that the workbook should use autowidth
  #
  # @see Workbook#use_autowidth
  #
  # source://caxlsx//lib/axlsx/package.rb#33
  def use_autowidth=(v); end

  # Shortcut to determine if the workbook is configured to use shared strings
  #
  # @see Workbook#use_shared_strings
  #
  # source://caxlsx//lib/axlsx/package.rb#40
  def use_shared_strings; end

  # Shortcut to specify that the workbook should use shared strings
  #
  # @see Workbook#use_shared_strings
  #
  # source://caxlsx//lib/axlsx/package.rb#46
  def use_shared_strings=(v); end

  # Validate all parts of the package against xsd schema.
  #
  # @example
  #   # The following will output any error messages found in serialization.
  #   p = Axlsx::Package.new
  #   # ... code to create sheets, charts, styles etc.
  #   p.validate.each { |error| puts error.message }
  # @note This gem includes all schema from OfficeOpenXML-XMLSchema-Transitional.zip and OpenPackagingConventions-XMLSchema.zip
  #   as per ECMA-376, Third edition. opc schema require an internet connection to import remote schema from dublin core for dc,
  #   dcterms and xml namespaces. Those remote schema are included in this gem, and the original files have been altered to
  #   refer to the local versions.
  #
  #   If by chance you are able to create a package that does not validate it indicates that the internal
  #   validation is not robust enough and needs to be improved. Please report your errors to the gem author.
  # @return [Array] An array of all validation errors found.
  # @see http://www.ecma-international.org/publications/standards/Ecma-376.htm
  #
  # source://caxlsx//lib/axlsx/package.rb#165
  def validate; end

  # The workbook this package will serialize or validate.
  #
  # @note As there are multiple ways to instantiate a workbook for the package,
  #   here are a few examples:
  #   # assign directly during package instanciation
  #   wb = Package.new(:workbook => Workbook.new).workbook
  #
  #   # get a fresh workbook automatically from the package
  #   wb = Pacakge.new().workbook
  #   #     # set the workbook after creating the package
  #   wb = Package.new().workbook = Workbook.new
  # @raise ArgumentError if workbook parameter is not a Workbook instance.
  # @return [Workbook] If no workbook instance has been assigned with this package a new Workbook instance is returned.
  # @yield [@workbook]
  #
  # source://caxlsx//lib/axlsx/package.rb#63
  def workbook; end

  # @see workbook
  #
  # source://caxlsx//lib/axlsx/package.rb#70
  def workbook=(workbook); end

  private

  # Creates the minimum content types for generating a valid xlsx document.
  #
  # @private
  # @return [ContentType]
  #
  # source://caxlsx//lib/axlsx/package.rb#349
  def base_content_types; end

  # Appends override objects for drawings, charts, and sheets as they exist in your workbook to the default content types.
  #
  # @private
  # @return [ContentType]
  #
  # source://caxlsx//lib/axlsx/package.rb#289
  def content_types; end

  # Parse the arguments of `#serialize`
  #
  # @private
  # @return [Boolean, (String or nil)] Returns an array where the first value is
  #   `confirm_valid` and the second is the `zip_command`.
  #
  # source://caxlsx//lib/axlsx/package.rb#377
  def parse_serialize_options(options, secondary_options); end

  # The parts of a package
  #
  # @private
  # @return [Array] An array of hashes that define the entry, document and schema for each part of the package.
  #
  # source://caxlsx//lib/axlsx/package.rb#214
  def parts; end

  # Creates the relationships required for a valid xlsx document
  #
  # @private
  # @return [Relationships]
  #
  # source://caxlsx//lib/axlsx/package.rb#364
  def relationships; end

  # Performs xsd validation for a signle document
  #
  # @param schema [String] path to the xsd schema to be used in validation.
  # @param doc [String] The xml text to be validated
  # @private
  # @return [Array] An array of all validation errors encountered.
  #
  # source://caxlsx//lib/axlsx/package.rb#276
  def validate_single_doc(schema, doc); end

  # Writes the package parts to a zip archive.
  #
  # @param zip [Zip::OutputStream, ZipCommand]
  # @return [Zip::OutputStream, ZipCommand]
  #
  # source://caxlsx//lib/axlsx/package.rb#180
  def write_parts(zip); end

  # Generate a Entry for the given package part.
  # The important part here is to explicitly set the timestamp for the zip entry: Serializing axlsx packages
  # with identical contents should result in identical zip files – however, the timestamp of a zip entry
  # defaults to the time of serialization and therefore the zip file contents would be different every time
  # the package is serialized.
  #
  # Note: {Core#created} also defaults to the current time – so to generate identical axlsx packages you have
  # to set this explicitly, too (eg. with `Package.new(created_at: Time.local(2013, 1, 1))`).
  #
  # @param part A hash describing a part of this pacakge (see {#parts})
  # @return [Zip::Entry]
  #
  # source://caxlsx//lib/axlsx/package.rb#206
  def zip_entry_for_part(part); end
end

# PageMargins specify the margins when printing a worksheet.
#
# For compatibility, PageMargins serialize to an empty string, unless at least one custom margin value
# has been specified. Otherwise, it serializes to a PageMargin element specifying all 6 margin values
# (using default values for margins that have not been specified explicitly).
#
# @note The recommended way to manage page margins is via Worksheet#page_margins
# @see Worksheet#page_margins
# @see Worksheet#initialize
#
# source://caxlsx//lib/axlsx/workbook/worksheet/page_margins.rb#11
class Axlsx::PageMargins
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new PageMargins object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [PageMargins] a new instance of PageMargins
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_margins.rb#22
  def initialize(options = T.unsafe(nil)); end

  # Bottom margin (in inches)
  #
  # @return [Float]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_margins.rb#55
  def bottom; end

  # @see bottom
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_margins.rb#82
  def bottom=(v); end

  # Footer margin (in inches)
  #
  # @return [Float]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_margins.rb#63
  def footer; end

  # @see footer
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_margins.rb#86
  def footer=(v); end

  # Header margin (in inches)
  #
  # @return [Float]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_margins.rb#59
  def header; end

  # @see header
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_margins.rb#84
  def header=(v); end

  # Left margin (in inches)
  #
  # @return [Float]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_margins.rb#43
  def left; end

  # @see left
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_margins.rb#76
  def left=(v); end

  # Right margin (in inches)
  #
  # @return [Float]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_margins.rb#47
  def right; end

  # @see right
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_margins.rb#78
  def right=(v); end

  # Set some or all margins at once.
  #
  # @param margins [Hash] the margins to set (possible keys are :left, :right, :top, :bottom, :header and :footer).
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_margins.rb#67
  def set(margins); end

  # Serializes the page margins element
  #
  # @note For compatibility, this is a noop unless custom margins have been specified.
  # @param str [String]
  # @return [String]
  # @see #custom_margins_specified?
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_margins.rb#93
  def to_xml_string(str = T.unsafe(nil)); end

  # Top margin (in inches)
  #
  # @return [Float]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_margins.rb#51
  def top; end

  # @see top
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_margins.rb#80
  def top=(v); end
end

# Default header and footer margins (in inches)
#
# source://caxlsx//lib/axlsx/workbook/worksheet/page_margins.rb#39
Axlsx::PageMargins::DEFAULT_HEADER_FOOTER = T.let(T.unsafe(nil), Float)

# Default left and right margin (in inches)
#
# source://caxlsx//lib/axlsx/workbook/worksheet/page_margins.rb#33
Axlsx::PageMargins::DEFAULT_LEFT_RIGHT = T.let(T.unsafe(nil), Float)

# Default top and bottom margins (in inches)
#
# source://caxlsx//lib/axlsx/workbook/worksheet/page_margins.rb#36
Axlsx::PageMargins::DEFAULT_TOP_BOTTOM = T.let(T.unsafe(nil), Float)

# Page setup properties of the worksheet
# This class name is not a typo, its spec.
#
# source://caxlsx//lib/axlsx/workbook/worksheet/page_set_up_pr.rb#4
class Axlsx::PageSetUpPr
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # creates a new page setup properties object
  #
  # @option [Boolean]
  # @option [Boolean]
  # @param options [Hash]
  # @param [Boolean] [Hash] a customizable set of options
  # @return [PageSetUpPr] a new instance of PageSetUpPr
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_set_up_pr.rb#12
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute auto_page_breaks.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_set_up_pr.rb#18
  def auto_page_breaks; end

  # Flag indicating whether the sheet displays Automatic Page Breaks.
  #
  # @param value [Boolean]
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_set_up_pr.rb#32
  def auto_page_breaks=(value); end

  # Returns the value of attribute fit_to_page.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_set_up_pr.rb#19
  def fit_to_page; end

  # Flag indicating whether the Fit to Page print option is enabled.
  #
  # @param value [Boolean]
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_set_up_pr.rb#24
  def fit_to_page=(value); end

  # serialize to xml
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_set_up_pr.rb#38
  def to_xml_string(str = T.unsafe(nil)); end
end

# Page setup settings for printing a worksheet. All settings are optional.
#
# @note The recommended way to manage print options is via Worksheet#page_setup
# @see Worksheet#print_options
# @see Worksheet#initialize
#
# source://caxlsx//lib/axlsx/workbook/worksheet/page_setup.rb#7
class Axlsx::PageSetup
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new PageSetup object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [PageSetup] a new instance of PageSetup
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_setup.rb#19
  def initialize(options = T.unsafe(nil)); end

  # convenience method to achieve sanity when setting fit_to_width and fit_to_height
  # as they both default to 1 if only their counterpart is specified.
  #
  # @note This method will overwrite any value you explicitly set via the fit_to_height or fit_to_width methods.
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_setup.rb#216
  def fit_to(options = T.unsafe(nil)); end

  # Number of vertical pages to fit on.
  # being set to 1.
  #
  # @note PageSetup#fit_to is the recomended way to manage page fitting as only specifying one of fit_to_width/fit_to_height will result in the counterpart
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_setup.rb#42
  def fit_to_height; end

  # @see fit_to_height
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_setup.rb#199
  def fit_to_height=(v); end

  # helper method for worksheet to determine if the page setup is configured for fit to page printing
  # We treat any page set up that has a value set for fit_to_width or fit_to_height value as fit_to_page.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_setup.rb#225
  def fit_to_page?; end

  # Number of horizontal pages to fit on.
  # being set to 1.
  #
  # @note PageSetup#fit_to is the recomended way to manage page fitting as only specifying one of width/height will result in the counterpart
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_setup.rb#48
  def fit_to_width; end

  # @see fit_to_width
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_setup.rb#201
  def fit_to_width=(v); end

  # Orientation of the page (:default, :landscape, :portrait)
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_setup.rb#52
  def orientation; end

  # @see orientation
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_setup.rb#203
  def orientation=(v); end

  # Height of paper (string containing a number followed by a unit identifier: "297mm", "11in")
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_setup.rb#56
  def paper_height; end

  # @see paper_height
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_setup.rb#205
  def paper_height=(v); end

  # The paper size to use in printing
  # 1 = Letter paper (8.5 in. by 11 in.)
  # 2 = Letter small paper (8.5 in. by 11 in.)
  # 3 = Tabloid paper (11 in. by 17 in.)
  # 4 = Ledger paper (17 in. by 11 in.)
  # 5 = Legal paper (8.5 in. by 14 in.)
  # 6 = Statement paper (5.5 in. by 8.5 in.)
  # 7 = Executive paper (7.25 in. by 10.5 in.)
  # 8 = A3 paper (297 mm by 420 mm)
  # 9 = A4 paper (210 mm by 297 mm)
  # 10 = A4 small paper (210 mm by 297 mm)
  # 11 = A5 paper (148 mm by 210 mm)
  # 12 = B4 paper (250 mm by 353 mm)
  # 13 = B5 paper (176 mm by 250 mm)
  # 14 = Folio paper (8.5 in. by 13 in.)
  # 15 = Quarto paper (215 mm by 275 mm)
  # 16 = Standard paper (10 in. by 14 in.)
  # 17 = Standard paper (11 in. by 17 in.)
  # 18 = Note paper (8.5 in. by 11 in.)
  # 19 = #9 envelope (3.875 in. by 8.875 in.)
  # 20 = #10 envelope (4.125 in. by 9.5 in.)
  # 21 = #11 envelope (4.5 in. by 10.375 in.)
  # 22 = #12 envelope (4.75 in. by 11 in.)
  # 23 = #14 envelope (5 in. by 11.5 in.) 24 = C paper (17 in. by 22 in.)
  # 25 = D paper (22 in. by 34 in.)
  # 26 = E paper (34 in. by 44 in.)
  # 27 = DL envelope (110 mm by 220 mm)
  # 28 = C5 envelope (162 mm by 229 mm)
  # 29 = C3 envelope (324 mm by 458 mm)
  # 30 = C4 envelope (229 mm by 324 mm)
  # 31 = C6 envelope (114 mm by 162 mm)
  # 32 = C65 envelope (114 mm by 229 mm)
  # 33 = B4 envelope (250 mm by 353 mm)
  # 34 = B5 envelope (176 mm by 250 mm)
  # 35 = B6 envelope (176 mm by 125 mm)
  # 36 = Italy envelope (110 mm by 230 mm)
  # 37 = Monarch envelope (3.875 in. by 7.5 in.). 38 = 6 3/4 envelope (3.625 in. by 6.5 in.)
  # 39 = US standard fanfold (14.875 in. by 11 in.)
  # 40 = German standard fanfold (8.5 in. by 12 in.)
  # 41 = German legal fanfold (8.5 in. by 13 in.)
  # 42 = ISO B4 (250 mm by 353 mm)
  # 43 = Japanese double postcard (200 mm by 148 mm)
  # 44 = Standard paper (9 in. by 11 in.)
  # 45 = Standard paper (10 in. by 11 in.)
  # 46 = Standard paper (15 in. by 11 in.)
  # 47 = Invite envelope (220 mm by 220 mm)
  # 50 = Letter extra paper (9.275 in. by 12 in.)
  # 51 = Legal extra paper (9.275 in. by 15 in.)
  # 52 = Tabloid extra paper (11.69 in. by 18 in.)
  # 53 = A4 extra paper (236 mm by 322 mm)
  # 54 = Letter transverse paper (8.275 in. by 11 in.)
  # 55 = A4 transverse paper (210 mm by 297 mm)
  # 56 = Letter extra transverse paper (9.275 in. by 12 in.)
  # 57 = SuperA/SuperA/A4 paper (227 mm by 356 mm)
  # 58 = SuperB/SuperB/A3 paper (305 mm by 487 mm)
  # 59 = Letter plus paper (8.5 in. by 12.69 in.)
  # 60 = A4 plus paper (210 mm by 330 mm)
  # 61 = A5 transverse paper (148 mm by 210 mm)
  # 62 = JIS B5 transverse paper (182 mm by 257 mm)
  # 63 = A3 extra paper (322 mm by 445 mm)
  # 64 = A5 extra paper (174 mm by 235 mm)
  # 65 = ISO B5 extra paper (201 mm by 276 mm)
  # 66 = A2 paper (420 mm by 594 mm)
  # 67 = A3 transverse paper (297 mm by 420 mm)
  # 68 = A3 extra transverse paper (322 mm by 445 mm)
  # 69 = Japanese Double Postcard (200 mm x 148 mm)
  # 70 = A6 (105 mm x 148 mm
  # 71 = Japanese Envelope Kaku #2
  # 72 = Japanese Envelope Kaku #3
  # 73 = Japanese Envelope Chou #3
  # 74 = Japanese Envelope Chou #4
  # 75 = Letter Rotated (11in x 8 1/2 11 in)
  # 76 = A3 Rotated (420 mm x 297 mm)
  # 77 = A4 Rotated (297 mm x 210 mm)
  # 78 = A5 Rotated (210 mm x 148 mm)
  # 79 = B4 (JIS) Rotated (364 mm x 257 mm)
  # 80 = B5 (JIS) Rotated (257 mm x 182 mm)
  # 81 = Japanese Postcard Rotated (148 mm x 100 mm)
  # 82 = Double Japanese Postcard Rotated (148 mm x 200 mm)
  # 83 = A6 Rotated (148 mm x 105 mm)
  # 84 = Japanese Envelope Kaku #2 Rotated
  # 85 = Japanese Envelope Kaku #3 Rotated
  # 86 = Japanese Envelope Chou #3 Rotated
  # 87 = Japanese Envelope Chou #4 Rotated
  # 88 = B6 (JIS) (128 mm x 182 mm)
  # 89 = B6 (JIS) Rotated (182 mm x 128 mm)
  # 90 = (12 in x 11 in)
  # 91 = Japanese Envelope You #4
  # 92 = Japanese Envelope You #4 Rotated
  # 93 = PRC 16K (146 mm x 215 mm)
  # 94 = PRC 32K (97 mm x 151 mm)
  # 95 = PRC 32K(Big) (97 mm x 151 mm)
  # 96 = PRC Envelope #1 (102 mm x 165 mm)
  # 97 = PRC Envelope #2 (102 mm x 176 mm)
  # 98 = PRC Envelope #3 (125 mm x 176 mm)
  # 99 = PRC Envelope #4 (110 mm x 208 mm)
  # 100 = PRC Envelope #5 (110 mm x 220 mm)
  # 101 = PRC Envelope #6 (120 mm x 230 mm)
  # 102 = PRC Envelope #7 (160 mm x 230 mm)
  # 103 = PRC Envelope #8 (120 mm x 309 mm)
  # 104 = PRC Envelope #9 (229 mm x 324 mm)
  # 105 = PRC Envelope #10 (324 mm x 458 mm)
  # 106 = PRC 16K Rotated
  # 107 = PRC 32K Rotated
  # 108 = PRC 32K(Big) Rotated
  # 109 = PRC Envelope #1 Rotated (165 mm x 102 mm)
  # 110 = PRC Envelope #2 Rotated (176 mm x 102 mm)
  # 111 = PRC Envelope #3 Rotated (176 mm x 125 mm)
  # 112 = PRC Envelope #4 Rotated (208 mm x 110 mm)
  # 113 = PRC Envelope #5 Rotated (220 mm x 110 mm)
  # 114 = PRC Envelope #6 Rotated (230 mm x 120 mm)
  # 115 = PRC Envelope #7 Rotated (230 mm x 160 mm)
  # 116 = PRC Envelope #8 Rotated (309 mm x 120 mm)
  # 117 = PRC Envelope #9 Rotated (324 mm x 229 mm)
  # 118 = PRC Envelope #10 Rotated (458 mm x 324 mm)
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_setup.rb#182
  def paper_size; end

  # Sets the paper size for printing.
  #
  # @return integer
  # @see PageSetup#paper_size
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_setup.rb#187
  def paper_size=(size); end

  # Width of paper (string containing a number followed by a unit identifier: "210mm", "8.5in")
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_setup.rb#60
  def paper_width; end

  # @see paper_width
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_setup.rb#207
  def paper_width=(v); end

  # Print scaling (percent value, given as integer ranging from 10 to 400)
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_setup.rb#64
  def scale; end

  # @see scale
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_setup.rb#209
  def scale=(v); end

  # Set some or all page settings at once.
  #
  # @param options [Hash] The page settings to set (possible keys are :fit_to_height, :fit_to_width, :orientation, :paper_height, :paper_width, and :scale).
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_setup.rb#194
  def set(options); end

  # Serializes the page settings element.
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/page_setup.rb#233
  def to_xml_string(str = T.unsafe(nil)); end
end

# Pane options for a worksheet.
#
# @note The recommended way to manage the pane options is via SheetView#pane
# @see SheetView#pane
#
# source://caxlsx//lib/axlsx/workbook/worksheet/pane.rb#6
class Axlsx::Pane
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new {Pane} object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Pane] a new instance of Pane
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pane.rb#15
  def initialize(options = T.unsafe(nil)); end

  # Active Pane
  # The pane that is active.
  # Options are
  #  * bottom_left:  Bottom left pane, when both vertical and horizontal
  #                  splits are applied. This value is also used when only
  #                  a horizontal split has been applied, dividing the pane
  #                  into upper and lower regions. In that case, this value
  #                  specifies the bottom pane.
  #  * bottom_right: Bottom right pane, when both vertical and horizontal
  #                  splits are applied.
  #  * top_left:     Top left pane, when both vertical and horizontal splits
  #                  are applied. This value is also used when only a horizontal
  #                  split has been applied, dividing the pane into upper and lower
  #                  regions. In that case, this value specifies the top pane.
  #                  This value is also used when only a vertical split has
  #                  been applied, dividing the pane into right and left
  #                  regions. In that case, this value specifies the left pane
  #  * top_right:    Top right pane, when both vertical and horizontal
  #                  splits are applied. This value is also used when only
  #                  a vertical split has been applied, dividing the pane
  #                  into right and left regions. In that case, this value
  #                  specifies the right pane.
  # default nil
  #
  # @return [Symbol]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pane.rb#49
  def active_pane; end

  # @see active_pane
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pane.rb#96
  def active_pane=(v); end

  # Split State
  # Indicates whether the pane has horizontal / vertical
  # splits, and whether those splits are frozen.
  # Options are
  #  * frozen:       Panes are frozen, but were not split being frozen. In
  #                  this state, when the panes are unfrozen again, a single
  #                  pane results, with no split. In this state, the split
  #                  bars are not adjustable.
  #  * frozen_split: Panes are frozen and were split before being frozen. In
  #                  this state, when the panes are unfrozen again, the split
  #                  remains, but is adjustable.
  #  * split:        Panes are split, but not frozen. In this state, the split
  #                  bars are adjustable by the user.
  # default nil
  #
  # @return [Symbol]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pane.rb#67
  def state; end

  # @see state
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pane.rb#102
  def state=(v); end

  # Serializes the data validation
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pane.rb#123
  def to_xml_string(str = T.unsafe(nil)); end

  # Top Left Visible Cell
  # Location of the top left visible cell in the bottom
  # right pane (when in Left-To-Right mode).
  # default nil
  #
  # @return [String]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pane.rb#75
  def top_left_cell; end

  # @see top_left_cell
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pane.rb#108
  def top_left_cell=(v); end

  # Horizontal Split Position
  # Horizontal position of the split, in 1/20th of a point; 0 (zero)
  # if none. If the pane is frozen, this value indicates the number
  # of columns visible in the top pane.
  # default 0
  #
  # @return [Integer]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pane.rb#84
  def x_split; end

  # @see x_split
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pane.rb#115
  def x_split=(v); end

  # Vertical Split Position
  # Vertical position of the split, in 1/20th of a point; 0 (zero)
  # if none. If the pane is frozen, this value indicates the number
  # of rows visible in the left pane.
  # default 0
  #
  # @return [Integer]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pane.rb#93
  def y_split; end

  # @see y_split
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pane.rb#118
  def y_split=(v); end

  private

  # source://caxlsx//lib/axlsx/workbook/worksheet/pane.rb#130
  def finalize; end
end

# A PatternFill is the pattern and solid fill styling for a cell.
#
# @note The recommended way to manage styles is with Styles#add_style
# @see Style#add_style
#
# source://caxlsx//lib/axlsx/stylesheet/pattern_fill.rb#5
class Axlsx::PatternFill
  include ::Axlsx::OptionsParser

  # Creates a new PatternFill Object
  #
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [PatternFill] a new instance of PatternFill
  #
  # source://caxlsx//lib/axlsx/stylesheet/pattern_fill.rb#11
  def initialize(options = T.unsafe(nil)); end

  # The color to use for the background of the fill when the type is not solid.
  #
  # @return [Color]
  #
  # source://caxlsx//lib/axlsx/stylesheet/pattern_fill.rb#22
  def bgColor; end

  # @see bgColor
  #
  # source://caxlsx//lib/axlsx/stylesheet/pattern_fill.rb#52
  def bgColor=(v); end

  # The color to use for the the background in solid fills.
  #
  # @return [Color]
  #
  # source://caxlsx//lib/axlsx/stylesheet/pattern_fill.rb#18
  def fgColor; end

  # @see fgColor
  #
  # source://caxlsx//lib/axlsx/stylesheet/pattern_fill.rb#50
  def fgColor=(v); end

  # The pattern type to use
  #
  # @note patternType must be one of
  #   :none
  #   :solid
  #   :mediumGray
  #   :darkGray
  #   :lightGray
  #   :darkHorizontal
  #   :darkVertical
  #   :darkDown
  #   :darkUp
  #   :darkGrid
  #   :darkTrellis
  #   :lightHorizontal
  #   :lightVertical
  #   :lightDown
  #   :lightUp
  #   :lightGrid
  #   :lightTrellis
  #   :gray125
  #   :gray0625
  # @see Office Open XML Part 1 18.18.55
  #
  # source://caxlsx//lib/axlsx/stylesheet/pattern_fill.rb#47
  def patternType; end

  # @see patternType
  #
  # source://caxlsx//lib/axlsx/stylesheet/pattern_fill.rb#54
  def patternType=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/pattern_fill.rb#59
  def to_xml_string(str = T.unsafe(nil)); end
end

# a Pic object represents an image in your worksheet
# Worksheet#add_image is the recommended way to manage images in your sheets
#
# @see Worksheet#add_image
#
# source://caxlsx//lib/axlsx/drawing/pic.rb#5
class Axlsx::Pic
  include ::Axlsx::OptionsParser

  # Creates a new Pic(ture) object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param anchor [Anchor] the anchor that holds this image
  # @param options [Hash] a customizable set of options
  # @return [Pic] a new instance of Pic
  # @yield [_self]
  # @yieldparam _self [Axlsx::Pic] the object that the method was called on
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#18
  def initialize(anchor, options = T.unsafe(nil)); end

  # The anchor for this image
  #
  # @return [OneCellAnchor]
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#48
  def anchor; end

  # A description of the picture
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#39
  def descr; end

  # @see descr
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#95
  def descr=(v); end

  # noop if not using a two cell anchor
  #
  # @param x [Integer] The column
  # @param y [Integer] The row
  # @return [Marker]
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#181
  def end_at(x, y = T.unsafe(nil)); end

  # returns the extension of image_src without the preceeding '.'
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#112
  def extname; end

  # The file name of image_src without any path information
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#106
  def file_name; end

  # providing access to update the anchor's height attribute
  #
  # @note this is a noop if you are using a TwoCellAnchor
  # @see OneCellAnchor.width
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#155
  def height; end

  # @note This is a noop if you are using a TwoCellAnchor
  # @see height
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#161
  def height=(v); end

  # Returns the value of attribute hyperlink.
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#53
  def hyperlink; end

  # sets or updates a hyperlink for this image.
  #
  # @option options
  # @param v [String] The href value for the hyper link
  # @param options [Hash] a customizable set of options
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#66
  def hyperlink=(v, options = T.unsafe(nil)); end

  # The path to the image you want to include
  # Only local images are supported at this time.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#44
  def image_src; end

  # source://caxlsx//lib/axlsx/drawing/pic.rb#78
  def image_src=(v); end

  # The index of this image in the workbooks images collections
  #
  # @return [Index]
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#118
  def index; end

  # The name to use for this picture
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#35
  def name; end

  # @see name
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#92
  def name=(v); end

  # Picture opacity
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#57
  def opacity; end

  # The picture locking attributes for this picture
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#51
  def picture_locking; end

  # The part name for this image used in serialization and relationship building
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#124
  def pn; end

  # The relationship object for this pic.
  #
  # @return [Relationship]
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#130
  def relationship; end

  # Flag for remote picture (from URI)
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#61
  def remote; end

  # @see remote
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#98
  def remote=(v); end

  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#100
  def remote?; end

  # This is a short cut method to set the start anchor position
  # If you need finer granularity in positioning use
  # graphic_frame.anchor.from.colOff / rowOff
  #
  # @param x [Integer] The column
  # @param y [Integer] The row
  # @return [Marker]
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#172
  def start_at(x, y = T.unsafe(nil)); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#190
  def to_xml_string(str = T.unsafe(nil)); end

  # providing access to the anchor's width attribute
  #
  # @see OneCellAnchor.width
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#140
  def width; end

  # @see width
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#147
  def width=(v); end

  private

  # Return correct xml relationship string portion
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#212
  def relationship_xml_portion; end

  # refactoring of swapping code, law of demeter be damned!
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#237
  def swap_anchor(new_anchor); end

  # Changes the anchor to a one cell anchor.
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#221
  def use_one_cell_anchor; end

  # changes the anchor type to a two cell anchor
  #
  # source://caxlsx//lib/axlsx/drawing/pic.rb#229
  def use_two_cell_anchor; end
end

# allowed mime types
#
# source://caxlsx//lib/axlsx/drawing/pic.rb#31
Axlsx::Pic::ALLOWED_MIME_TYPES = T.let(T.unsafe(nil), Array)

# The picture locking class defines the locking properties for pictures in your workbook.
#
# source://caxlsx//lib/axlsx/drawing/picture_locking.rb#3
class Axlsx::PictureLocking
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  include ::Axlsx::Accessors
  extend ::Axlsx::SerializedAttributes::ClassMethods
  extend ::Axlsx::Accessors::ClassMethods

  # Creates a new PictureLocking object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [PictureLocking] a new instance of PictureLocking
  #
  # source://caxlsx//lib/axlsx/drawing/picture_locking.rb#27
  def initialize(options = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def noAdjustHandles; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def noAdjustHandles=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def noChangeArrowheads; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def noChangeArrowheads=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def noChangeAspect; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def noChangeAspect=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def noChangeShapeType; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def noChangeShapeType=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def noEditPoints; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def noEditPoints=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def noGrp; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def noGrp=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def noMove; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def noMove=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def noResize; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def noResize=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def noRot; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def noRot=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def noSelect; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def noSelect=(value); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/picture_locking.rb#35
  def to_xml_string(str = T.unsafe(nil)); end
end

# The Pie3DChart is a three dimentional piechart (who would have guessed?) that you can add to your worksheet.
#
# @see Worksheet#add_chart
# @see Chart#add_series
# @see README for an example
#
# source://caxlsx//lib/axlsx/drawing/pie_3D_chart.rb#6
class Axlsx::Pie3DChart < ::Axlsx::Chart
  # Creates a new pie chart object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param frame [GraphicFrame] The workbook that owns this chart.
  # @param options [Hash] a customizable set of options
  # @return [Pie3DChart] a new instance of Pie3DChart
  # @see Chart
  # @see View3D
  #
  # source://caxlsx//lib/axlsx/drawing/pie_3D_chart.rb#21
  def initialize(frame, options = T.unsafe(nil)); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/pie_3D_chart.rb#32
  def to_xml_string(str = T.unsafe(nil)); end
end

# A PieSeries defines the data and labels and explosion for pie charts series.
#
# @note The recommended way to manage series is to use Chart#add_series
# @see Worksheet#add_chart
# @see Chart#add_series
#
# source://caxlsx//lib/axlsx/drawing/pie_series.rb#6
class Axlsx::PieSeries < ::Axlsx::Series
  # Creates a new series
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @param chart [Chart]
  # @param options [Hash] a customizable set of options
  # @return [PieSeries] a new instance of PieSeries
  #
  # source://caxlsx//lib/axlsx/drawing/pie_series.rb#28
  def initialize(chart, options = T.unsafe(nil)); end

  # An array of rgb colors to apply to your bar chart.
  #
  # source://caxlsx//lib/axlsx/drawing/pie_series.rb#20
  def colors; end

  # @see colors
  #
  # source://caxlsx//lib/axlsx/drawing/pie_series.rb#37
  def colors=(v); end

  # The data for this series.
  #
  # @return [SimpleTypedList]
  #
  # source://caxlsx//lib/axlsx/drawing/pie_series.rb#9
  def data; end

  # The explosion for this series
  #
  # @return [Integert]
  #
  # source://caxlsx//lib/axlsx/drawing/pie_series.rb#17
  def explosion; end

  # @see explosion
  #
  # source://caxlsx//lib/axlsx/drawing/pie_series.rb#40
  def explosion=(v); end

  # The labels for this series.
  #
  # @return [SimpleTypedList]
  #
  # source://caxlsx//lib/axlsx/drawing/pie_series.rb#13
  def labels; end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/pie_series.rb#45
  def to_xml_string(str = T.unsafe(nil)); end

  private

  # assigns the data for this series
  #
  # source://caxlsx//lib/axlsx/drawing/pie_series.rb#64
  def data=(v); end

  # assigns the labels for this series
  #
  # source://caxlsx//lib/axlsx/drawing/pie_series.rb#67
  def labels=(v); end
end

# Table
#
# @note Worksheet#add_pivot_table is the recommended way to create tables for your worksheets.
# @see README for examples
#
# source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#5
class Axlsx::PivotTable
  include ::Axlsx::OptionsParser

  # Creates a new PivotTable object
  #
  # @option options
  # @option options
  # @param range [String] The reference to the pivot table data like 'A1:D31'.
  # @param options [Hash] a customizable set of options
  # @param sheet [Worksheet] The sheet containing the table data.
  # @param ref [String] The reference to where the pivot table lives like 'G4:L17'.
  # @return [PivotTable] a new instance of PivotTable
  # @yield [_self]
  # @yieldparam _self [Axlsx::PivotTable] the object that the method was called on
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#14
  def initialize(ref, range, sheet, options = T.unsafe(nil)); end

  # The cache_definition for this pivot table
  #
  # @return [PivotTableCacheDefinition]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#172
  def cache_definition; end

  # The columns
  #
  # @return [Array]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#104
  def columns; end

  # The columns
  #
  # @return [Array]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#107
  def columns=(v); end

  # The data
  #
  # @return [Array]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#117
  def data; end

  # The data
  #
  # @return [Array]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#120
  def data=(v); end

  # @see #data_sheet
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#73
  def data_sheet; end

  # The sheet used as data source for the pivot table
  #
  # @return [Worksheet]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#70
  def data_sheet=(_arg0); end

  # References for header cells
  #
  # @return [Array]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#267
  def header_cell_refs; end

  # The values in the header cells collection
  #
  # @return [Array]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#279
  def header_cell_values; end

  # The header cells for the pivot table
  #
  # @return [Array]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#273
  def header_cells; end

  # The number of cells in the header_cells collection
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#285
  def header_cells_count; end

  # The index of a given value in the header cells
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#291
  def header_index_of(value); end

  # The index of this chart in the workbooks charts collection
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#154
  def index; end

  # The name of the table.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#62
  def name; end

  # Defines the headers in which subtotals are not to be included.
  #
  # @return [Array]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#35
  def no_subtotals_on_headers; end

  # Defines the headers in which subtotals are not to be included.
  #
  # @return [Array]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#35
  def no_subtotals_on_headers=(_arg0); end

  # The pages
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#141
  def pages; end

  # The pages
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#144
  def pages=(v); end

  # The part name for this table
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#160
  def pn; end

  # The range where the data for this pivot table lives.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#79
  def range; end

  # The range where the data for this pivot table lives.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#82
  def range=(v); end

  # The reference to the table data
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#58
  def ref; end

  # The relationships for this pivot table.
  #
  # @return [Relationships]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#178
  def relationships; end

  # The relationship part name of this pivot table
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#166
  def rels_pn; end

  # The rows
  #
  # @return [Array]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#91
  def rows; end

  # The rows
  #
  # @return [Array]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#94
  def rows=(v); end

  # The name of the sheet.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#66
  def sheet; end

  # Defines the headers in which sort is applied.
  # Can be an array of headers to sort ascending by default, or a hash for specific control
  # (with headers as keys, `:ascending` or `:descending` as values).
  #
  # Examples: `["year", "month"]` or `{"year" => :descending, "month" => :descending}`
  #
  # @return [Hash]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#43
  def sort_on_headers; end

  # Defines the headers in which sort is applied.
  # Can be an array of headers to sort ascending by default, or a hash for specific control
  # (with headers as keys, `:ascending` or `:descending` as values).
  #
  # Examples: `["year", "month"]` or `{"year" => :descending, "month" => :descending}`
  #
  # @return [Hash]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#46
  def sort_on_headers=(headers); end

  # Style info for the pivot table
  #
  # @return [Hash]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#54
  def style_info; end

  # Style info for the pivot table
  #
  # @return [Hash]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#54
  def style_info=(_arg0); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#187
  def to_xml_string(str = T.unsafe(nil)); end

  private

  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#324
  def data_refs; end

  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#328
  def header_range; end

  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table.rb#297
  def pivot_field_for(cell_ref, subtotal, sorttype); end
end

# Table
#
# @note Worksheet#add_pivot_table is the recommended way to create tables for your worksheets.
# @see README for examples
#
# source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table_cache_definition.rb#5
class Axlsx::PivotTableCacheDefinition
  include ::Axlsx::OptionsParser

  # Creates a new PivotTable object
  #
  # @param pivot_table [String] The pivot table this cache definition is in
  # @return [PivotTableCacheDefinition] a new instance of PivotTableCacheDefinition
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table_cache_definition.rb#10
  def initialize(pivot_table); end

  # The identifier for this cache
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table_cache_definition.rb#32
  def cache_id; end

  # The index of this chart in the workbooks charts collection
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table_cache_definition.rb#20
  def index; end

  # # The reference to the pivot table data
  # # @return [PivotTable]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table_cache_definition.rb#16
  def pivot_table; end

  # The part name for this table
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table_cache_definition.rb#26
  def pn; end

  # The relationship id for this pivot table cache definition.
  #
  # @return [String]
  # @see Relationship#Id
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table_cache_definition.rb#39
  def rId; end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_table_cache_definition.rb#46
  def to_xml_string(str = T.unsafe(nil)); end
end

# A simple, self serializing class for storing pivot tables
#
# source://caxlsx//lib/axlsx/workbook/worksheet/pivot_tables.rb#3
class Axlsx::PivotTables < ::Axlsx::SimpleTypedList
  # creates a new Tables object
  #
  # @raise [ArgumentError]
  # @return [PivotTables] a new instance of PivotTables
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_tables.rb#5
  def initialize(worksheet); end

  # returns the relationships required by this collection
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_tables.rb#17
  def relationships; end

  # The worksheet that owns this collection of pivot tables
  #
  # @return [Worksheet]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/pivot_tables.rb#14
  def worksheet; end
end

# Options for printing a worksheet. All options are boolean and false by default.
#
# @note The recommended way to manage print options is via Worksheet#print_options
# @see Worksheet#print_options
# @see Worksheet#initialize
#
# source://caxlsx//lib/axlsx/workbook/worksheet/print_options.rb#7
class Axlsx::PrintOptions
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  include ::Axlsx::Accessors
  extend ::Axlsx::SerializedAttributes::ClassMethods
  extend ::Axlsx::Accessors::ClassMethods

  # Creates a new PrintOptions object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [PrintOptions] a new instance of PrintOptions
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/print_options.rb#16
  def initialize(options = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def grid_lines; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def grid_lines=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def headings; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def headings=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def horizontal_centered; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def horizontal_centered=(value); end

  # Set some or all options at once.
  #
  # @param options [Hash] The options to set (possible keys are :grid_lines, :headings, :horizontal_centered, and :vertical_centered).
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/print_options.rb#26
  def set(options); end

  # Serializes the page options element.
  #
  # @note As all attributes default to "false" according to the xml schema definition, the generated xml includes only those attributes that are set to true.
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/print_options.rb#34
  def to_xml_string(str = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def vertical_centered; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def vertical_centered=(value); end
end

# The Protected Range class represents a set of cells in the worksheet
#
# @note the recommended way to manage protected ranges with via Worksheet#protect_range
# @see Worksheet#protect_range
#
# source://caxlsx//lib/axlsx/workbook/worksheet/protected_range.rb#5
class Axlsx::ProtectedRange
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Initializes a new protected range object
  #
  # @option [String]
  # @option [String]
  # @param [String] [Hash] a customizable set of options
  # @return [ProtectedRange] a new instance of ProtectedRange
  # @yield [_self]
  # @yieldparam _self [Axlsx::ProtectedRange] the object that the method was called on
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/protected_range.rb#12
  def initialize(options = T.unsafe(nil)); end

  # The name of the protected range
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/protected_range.rb#24
  def name; end

  # @see name
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/protected_range.rb#33
  def name=(v); end

  # The reference for the protected range
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/protected_range.rb#20
  def sqref; end

  # @see sqref
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/protected_range.rb#27
  def sqref=(v); end

  # serializes the proteted range
  # our output to that object. Use this - it helps limit the number of
  # objects created during serialization
  #
  # @param str [String] if this string object is provided we append
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/protected_range.rb#42
  def to_xml_string(str = T.unsafe(nil)); end
end

# A self serializing collection of ranges that should be protected in
# the worksheet
#
# source://caxlsx//lib/axlsx/workbook/worksheet/protected_ranges.rb#4
class Axlsx::ProtectedRanges < ::Axlsx::SimpleTypedList
  # @raise [ArgumentError]
  # @return [ProtectedRanges] a new instance of ProtectedRanges
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/protected_ranges.rb#7
  def initialize(worksheet); end

  # Adds a protected range
  #
  # @param cells [Array|String] A string range reference or array of cells that will be protected
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/protected_ranges.rb#16
  def add_range(cells); end

  # Serializes the protected ranges
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/protected_ranges.rb#29
  def to_xml_string(str = T.unsafe(nil)); end

  # Returns the value of attribute worksheet.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/protected_ranges.rb#5
  def worksheet; end
end

# rels content type
#
# source://caxlsx//lib/axlsx/util/constants.rb#120
Axlsx::RELS_CT = T.let(T.unsafe(nil), String)

# rels content type extension
#
# source://caxlsx//lib/axlsx/util/constants.rb#177
Axlsx::RELS_EX = T.let(T.unsafe(nil), String)

# rels part
#
# source://caxlsx//lib/axlsx/util/constants.rb#198
Axlsx::RELS_PN = T.let(T.unsafe(nil), String)

# relationships name space
#
# source://caxlsx//lib/axlsx/util/constants.rb#48
Axlsx::RELS_R = T.let(T.unsafe(nil), String)

# rels validation schema
#
# source://caxlsx//lib/axlsx/util/constants.rb#252
Axlsx::RELS_XSD = T.let(T.unsafe(nil), String)

# Validate that the value provided is between a specific range
# Note that no data conversions will be done for you!
# Comparisons will be made using < and > or <= and <= when the inclusive parameter is true
#
# source://caxlsx//lib/axlsx/util/validators.rb#20
class Axlsx::RangeValidator
  class << self
    # @param name [String] The name of what is being validated
    # @param min [Any] The minimum allowed value
    # @param max [Any] The maximum allowed value
    # @param value [Any] The value to be validated
    # @param inclusive [Boolean] Flag indicating if the comparison should be inclusive.
    # @raise [ArgumentError]
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#26
    def validate(name, min, max, value, inclusive = T.unsafe(nil)); end
  end
end

# Validates the value against the regular expression provided.
#
# source://caxlsx//lib/axlsx/util/validators.rb#37
class Axlsx::RegexValidator
  class << self
    # @param name [String] The name of what is being validated. This is included in the output when the value is invalid
    # @param regex [Regexp] The regular expression to evaluate
    # @param v [Any] The value to validate.
    # @raise [ArgumentError]
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#41
    def validate(name, regex, v); end
  end
end

# A relationship defines a reference between package parts.
#
# @note Packages automatically manage relationships.
#
# source://caxlsx//lib/axlsx/rels/relationship.rb#4
class Axlsx::Relationship
  # Initializes a new relationship.
  #
  # @option [Symbol]
  # @param source_obj [Object] see {#source_obj}
  # @param type [String] The type of the relationship
  # @param target [String] The target for the relationship
  # @param [Symbol] [Hash] a customizable set of options
  # @return [Relationship] a new instance of Relationship
  #
  # source://caxlsx//lib/axlsx/rels/relationship.rb#84
  def initialize(source_obj, type, target, options = T.unsafe(nil)); end

  # The id of the relationship (eg. "rId123"). Most instances get their own unique id.
  # However, some instances need to share the same id – see {#should_use_same_id_as?}
  # for details.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/rels/relationship.rb#47
  def Id; end

  # The location of the relationship target
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/rels/relationship.rb#51
  def Target; end

  # @see Target
  #
  # source://caxlsx//lib/axlsx/rels/relationship.rb#93
  def Target=(v); end

  # The target mode of the relationship
  # used for hyperlink type relationships to mark the relationship to an external resource
  # TargetMode can be specified during initialization by passing in a :target_mode option
  # Target mode must be :external for now.
  #
  # source://caxlsx//lib/axlsx/rels/relationship.rb#73
  def TargetMode; end

  # @see TargetMode
  #
  # source://caxlsx//lib/axlsx/rels/relationship.rb#98
  def TargetMode=(v); end

  # The type of relationship
  #
  # @note Supported types are defined as constants in Axlsx:
  # @return [String]
  # @see TABLE_R
  # @see PIVOT_TABLE_R
  # @see WORKBOOK_R
  # @see WORKSHEET_R
  # @see APP_R
  # @see RELS_R
  # @see CORE_R
  # @see STYLES_R
  # @see CHART_R
  # @see DRAWING_R
  # @see XML_NS_R
  #
  # source://caxlsx//lib/axlsx/rels/relationship.rb#67
  def Type; end

  # @see Type
  #
  # source://caxlsx//lib/axlsx/rels/relationship.rb#95
  def Type=(v); end

  # A key that determines whether this relationship should use already generated id.
  #
  # Instances designating the same relationship need to use the same id. We can not simply
  # compare the {#Target} attribute, though: `foo/bar.xml`, `../foo/bar.xml`,
  # `../../foo/bar.xml` etc. are all different but probably mean the same file (this
  # is especially an issue for relationships in the context of pivot tables). So lets
  # just ignore this attribute for now (except when {#TargetMode} is set to `:External` –
  # then {#Target} will be an absolute URL and thus can safely be compared).
  #
  # @return [Array]
  # @todo Implement comparison of {#Target} based on normalized path names.
  #
  # source://caxlsx//lib/axlsx/rels/relationship.rb#121
  def ids_cache_key; end

  # The source object the relations belongs to (e.g. a hyperlink, drawing, ...). Needed when
  # looking up the relationship for a specific object (see {Relationships#for}).
  #
  # source://caxlsx//lib/axlsx/rels/relationship.rb#77
  def source_obj; end

  # serialize relationship
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/rels/relationship.rb#103
  def to_xml_string(str = T.unsafe(nil)); end

  class << self
    # Clear cached ids.
    #
    # This should be called after serializing a package (see {Package#serialize} and
    # {Package#to_stream}) to free the memory allocated for cache.
    #
    # Also, calling this avoids memory leaks (cached ids lingering around
    # forever).
    #
    # source://caxlsx//lib/axlsx/rels/relationship.rb#29
    def clear_ids_cache; end

    # Keeps track of relationship ids in use.
    #
    # @return [Array]
    #
    # source://caxlsx//lib/axlsx/rels/relationship.rb#8
    def ids_cache; end

    # Initialize cached ids.
    #
    # This should be called before serializing a package (see {Package#serialize} and
    # {Package#to_stream}) to make sure that serialization is idempotent (i.e.
    # Relationship instances are generated with the same IDs everytime the package
    # is serialized).
    #
    # source://caxlsx//lib/axlsx/rels/relationship.rb#18
    def initialize_ids_cache; end

    # Generate and return a unique id (eg. `rId123`) Used for setting {#Id}.
    #
    # The generated id depends on the number of previously cached ids, so using
    # {clear_ids_cache} will automatically reset the generated ids, too.
    #
    # @return [String]
    #
    # source://caxlsx//lib/axlsx/rels/relationship.rb#38
    def next_free_id; end
  end
end

# Relationships are a collection of Relations that define how package parts are related.
#
# @note The package automatically manages releationships.
#
# source://caxlsx//lib/axlsx/rels/relationships.rb#6
class Axlsx::Relationships < ::Axlsx::SimpleTypedList
  # Creates a new Relationships collection based on SimpleTypedList
  #
  # @return [Relationships] a new instance of Relationships
  #
  # source://caxlsx//lib/axlsx/rels/relationships.rb#8
  def initialize; end

  # The relationship instance for the given source object, or nil if none exists.
  #
  # @return [Relationship]
  # @see Relationship#source_obj
  #
  # source://caxlsx//lib/axlsx/rels/relationships.rb#15
  def for(source_obj); end

  # serialize relationships
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/rels/relationships.rb#22
  def to_xml_string(str = T.unsafe(nil)); end
end

# Validate a value against a specific list of allowed values.
#
# source://caxlsx//lib/axlsx/util/validators.rb#3
class Axlsx::RestrictionValidator
  class << self
    # Perform validation
    #
    # @param name [String] The name of what is being validatied. This is included in the error message
    # @param choices [Array] The list of choices to validate against
    # @param v [Any] The value to be validated
    # @raise [ArgumentError] Raised if the value provided is not in the list of choices.
    # @return [Boolean] true if validation succeeds.
    #
    # source://caxlsx//lib/axlsx/util/validators.rb#10
    def validate(name, choices, v); end
  end
end

# A simple, self serializing class for storing TextRuns
#
# source://caxlsx//lib/axlsx/workbook/worksheet/rich_text.rb#3
class Axlsx::RichText < ::Axlsx::SimpleTypedList
  # creates a new RichText collection
  #
  # @param text [String] -optional The text to use in creating the first RichTextRun
  # @param options [Object] -optional The options to use in creating the first RichTextRun
  # @return [RichText] a new instance of RichText
  # @yield [RichText] self
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text.rb#8
  def initialize(text = T.unsafe(nil), options = T.unsafe(nil)); end

  # Creates and adds a RichTextRun to this collectino
  #
  # @param text [String] The text to use in creating a new RichTextRun
  # @param options [Object] The options to use in creating the new RichTextRun
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text.rb#35
  def add_run(text, options = T.unsafe(nil)); end

  # Calculates the longest autowidth of the RichTextRuns in this collection
  #
  # @return [Number]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text.rb#26
  def autowidth; end

  # The cell that owns this RichText collection
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text.rb#15
  def cell; end

  # Assign the cell for this RichText collection
  #
  # @param cell [Cell] The cell which all RichTextRuns in the collection will belong to
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text.rb#19
  def cell=(cell); end

  # The RichTextRuns we own
  #
  # @return [RichText]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text.rb#41
  def runs; end

  # renders the RichTextRuns in this collection
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text.rb#48
  def to_xml_string(str = T.unsafe(nil)); end
end

# The RichTextRun class creates and self serializing text run.
#
# source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#3
class Axlsx::RichTextRun
  include ::Axlsx::OptionsParser

  # @return [RichTextRun] a new instance of RichTextRun
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#14
  def initialize(value, options = T.unsafe(nil)); end

  # Tries to work out the width of the longest line in the run
  #
  # @param widtharray [Array] this array is populated with the widths of each line in the run.
  # @return [Array]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#176
  def autowidth(widtharray); end

  # The inline bold property for the cell
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#75
  def b; end

  # @see b
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#78
  def b=(v); end

  # Returns the value of attribute cell.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#23
  def cell; end

  # Sets the attribute cell
  #
  # @param value the value to set the attribute cell to.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#23
  def cell=(_arg0); end

  # The inline charset property for the cell
  # As far as I can tell, this is pretty much ignored. However, based on the spec it should be one of the following:
  # 0 ￼ ANSI_CHARSET
  # 1 DEFAULT_CHARSET
  # 2 SYMBOL_CHARSET
  # 77 MAC_CHARSET
  # 128 SHIFTJIS_CHARSET
  # 129 ￼ HANGUL_CHARSET
  # 130 ￼ JOHAB_CHARSET
  # 134 ￼ GB2312_CHARSET
  # 136 ￼ CHINESEBIG5_CHARSET
  # 161 ￼ GREEK_CHARSET
  # 162 ￼ TURKISH_CHARSET
  # 163 ￼ VIETNAMESE_CHARSET
  # 177 ￼ HEBREW_CHARSET
  # 178 ￼ ARABIC_CHARSET
  # 186 ￼ BALTIC_CHARSET
  # 204 ￼ RUSSIAN_CHARSET
  # 222 ￼ THAI_CHARSET
  # 238 ￼ EASTEUROPE_CHARSET
  # 255 ￼ OEM_CHARSET
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#54
  def charset; end

  # @see charset
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#57
  def charset=(v); end

  # The inline color property for the cell
  #
  # @return [Color]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#137
  def color; end

  # @param v [String] The 8 character representation for an rgb color #FFFFFFFF"
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#140
  def color=(v); end

  # The inline condense property for the cell
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#110
  def condense; end

  # @see condense
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#113
  def condense=(v); end

  # The inline extend property for the cell
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#117
  def extend; end

  # @see extend
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#120
  def extend=(v); end

  # The inline family property for the cell
  # 1 Roman
  # 2 Swiss
  # 3 Modern
  # 4 Script
  # 5 Decorative
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#66
  def family; end

  # @see family
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#69
  def family=(v); end

  # The inline font_name property for the cell
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#27
  def font_name; end

  # @see font_name
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#30
  def font_name=(v); end

  # The inline italic property for the cell
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#82
  def i; end

  # @see i
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#85
  def i=(v); end

  # The inline outline property for the cell
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#96
  def outline; end

  # @see outline
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#99
  def outline=(v); end

  # The inline scheme property for the cell
  # this must be one of [:none, major, minor]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#165
  def scheme; end

  # @see scheme
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#168
  def scheme=(v); end

  # Utility method for setting inline style attributes
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#196
  def set_run_style(validator, attr, value); end

  # The inline shadow property for the cell
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#103
  def shadow; end

  # @see shadow
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#106
  def shadow=(v); end

  # The inline strike property for the cell
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#89
  def strike; end

  # @see strike
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#92
  def strike=(v); end

  # The inline sz property for the cell
  #
  # @return [Inteter]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#146
  def sz; end

  # @see sz
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#149
  def sz=(v); end

  # Serializes the RichTextRun
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#206
  def to_xml_string(str = T.unsafe(nil)); end

  # The inline underline property for the cell.
  # It must be one of :none, :single, :double, :singleAccounting, :doubleAccounting, true
  #
  # @note true is for backwards compatability and is reassigned to :single
  # @return [Boolean]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#127
  def u; end

  # @see u
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#130
  def u=(v); end

  # Returns the value of attribute value.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#6
  def value; end

  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#19
  def value=(value); end

  # The inline vertical alignment property for the cell
  # this must be one of [:baseline, :subscript, :superscript]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#154
  def vertAlign; end

  # @see vertAlign
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#157
  def vertAlign=(v); end

  private

  # we scale the font size if bold style is applied to either the style font or
  # the cell itself. Yes, it is a bit of a hack, but it is much better than using
  # imagemagick and loading metrics for every character.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#239
  def font_size; end

  # Returns the width of a string according to the current style
  # This is still not perfect...
  #  - scaling is not linear as font sizes increase
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#231
  def string_width(string, font_size); end

  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#246
  def style; end

  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#250
  def styles; end

  # Converts the value to the correct XML representation (fixes issues with
  # Numbers)
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#256
  def xml_value(value); end
end

# A list of allowed inline style attributes used for validation
#
# source://caxlsx//lib/axlsx/workbook/worksheet/rich_text_run.rb#9
Axlsx::RichTextRun::INLINE_STYLES = T.let(T.unsafe(nil), Array)

# A Row is a single row in a worksheet.
#
# @note The recommended way to manage rows and cells is to use Worksheet#add_row
# @see Worksheet#add_row
#
# source://caxlsx//lib/axlsx/workbook/worksheet/row.rb#5
class Axlsx::Row < ::Axlsx::SimpleTypedList
  include ::Axlsx::SerializedAttributes
  include ::Axlsx::Accessors
  extend ::Axlsx::SerializedAttributes::ClassMethods
  extend ::Axlsx::Accessors::ClassMethods

  # Creates a new row. New Cell objects are created based on the values, types and style options.
  # A new cell is created for each item in the values array. style and types options are applied as follows:
  #   If the types option is defined and is a symbol it is applied to all the cells created.
  #   If the types option is an array, cell types are applied by index for each cell
  #   If the types option is not set, the cell will automatically determine its type.
  #   If the style option is defined and is an Integer, it is applied to all cells created.
  #   If the style option is an array, style is applied by index for each cell.
  #   If the style option is not defined, the default style (0) is applied to each cell.
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param worksheet [Worksheet]
  # @param options [Hash] a customizable set of options
  # @return [Row] a new instance of Row
  # @see Row#array_to_cells
  # @see Cell
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/row.rb#31
  def initialize(worksheet, values = T.unsafe(nil), options = T.unsafe(nil)); end

  # Adds a single cell to the row based on the data provided and updates the worksheet's autofit data.
  #
  # @return [Cell]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/row.rb#100
  def add_cell(value = T.unsafe(nil), options = T.unsafe(nil)); end

  # return cells
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/row.rb#140
  def cells; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def collapsed; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def collapsed=(value); end

  # Sets the color for every cell in this row.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/row.rb#108
  def color=(color); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def custom_format; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def custom_format=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def custom_height; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def custom_height=(value); end

  # Sets escape_formulas for every cell in this row. This determines whether to treat
  # values starting with an equals sign as formulas or as literal strings.
  #
  # @param value [Array, Boolean] The value to set.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/row.rb#124
  def escape_formulas=(value); end

  # Row height measured in point size. There is no margin padding on row height.
  #
  # @return [Float]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/row.rb#51
  def height; end

  # @see height
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/row.rb#131
  def height=(v); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def hidden; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def hidden=(value); end

  # Outlining level of the row, when outlining is on
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/row.rb#57
  def outlineLevel; end

  # @see Row#outline
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/row.rb#72
  def outlineLevel=(v); end

  # Outlining level of the row, when outlining is on
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/row.rb#57
  def outline_level; end

  # @see Row#outline
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/row.rb#72
  def outline_level=(v); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def ph; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def ph=(value); end

  # The index of this row in the worksheet
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/row.rb#81
  def row_index; end

  # The style applied to the row. This affects the entire row.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/row.rb#62
  def s; end

  # @see Row#s
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/row.rb#65
  def s=(v); end

  # Sets the style for every cell in this row.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/row.rb#115
  def style=(style); end

  # Serializes the row
  #
  # @param r_index [Integer] The row index, 0 based.
  # @param str [String] The string this rows xml will be appended to.
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/row.rb#89
  def to_xml_string(r_index, str = T.unsafe(nil)); end

  # The worksheet this row belongs to
  #
  # @return [Worksheet]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/row.rb#47
  def worksheet; end

  private

  # Converts values, types, and style options into cells and associates them with this row.
  # A new cell is created for each item in the values array.
  # If value option is defined and is a symbol it is applied to all the cells created.
  # If the value option is an array, cell types are applied by index for each cell
  # If the style option is defined and is an Integer, it is applied to all cells created.
  # If the style option is an array, style is applied by index for each cell.
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/row.rb#159
  def array_to_cells(values, options = T.unsafe(nil)); end

  # assigns the owning worksheet for this row
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/row.rb#147
  def worksheet=(v); end
end

# A collection of break objects that define row breaks (page breaks) for printing and preview
#
# source://caxlsx//lib/axlsx/workbook/worksheet/row_breaks.rb#4
class Axlsx::RowBreaks < ::Axlsx::SimpleTypedList
  # @return [RowBreaks] a new instance of RowBreaks
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/row_breaks.rb#5
  def initialize; end

  # Adds a row break
  # max and man values are fixed.
  #
  # @param options [Hash] The options for the break to be created.
  # @see Break
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/row_breaks.rb#13
  def add_break(options); end

  # <rowBreaks count="3" manualBreakCount="3">
  # <brk id="1" max="16383" man="1"/>
  # <brk id="7" max="16383" man="1"/>
  # <brk id="13" max="16383" man="1"/>
  # </rowBreaks>
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/row_breaks.rb#24
  def to_xml_string(str = T.unsafe(nil)); end
end

# FLOAT recognition
#
# source://caxlsx//lib/axlsx/util/constants.rb#409
Axlsx::SAFE_FLOAT_REGEX = T.let(T.unsafe(nil), Regexp)

# location of schema files for validation
#
# source://caxlsx//lib/axlsx/util/constants.rb#240
Axlsx::SCHEMA_BASE = T.let(T.unsafe(nil), String)

# shared strings content type
#
# source://caxlsx//lib/axlsx/util/constants.rb#132
Axlsx::SHARED_STRINGS_CT = T.let(T.unsafe(nil), String)

# shared_strings  part
#
# source://caxlsx//lib/axlsx/util/constants.rb#186
Axlsx::SHARED_STRINGS_PN = T.let(T.unsafe(nil), String)

# shared strings namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#78
Axlsx::SHARED_STRINGS_R = T.let(T.unsafe(nil), String)

# spreadsheetML validation schema
#
# source://caxlsx//lib/axlsx/util/constants.rb#255
Axlsx::SML_XSD = T.let(T.unsafe(nil), String)

# styles content type
#
# source://caxlsx//lib/axlsx/util/constants.rb#123
Axlsx::STYLES_CT = T.let(T.unsafe(nil), String)

# styles part
#
# source://caxlsx//lib/axlsx/util/constants.rb#183
Axlsx::STYLES_PN = T.let(T.unsafe(nil), String)

# styles rels namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#75
Axlsx::STYLES_R = T.let(T.unsafe(nil), String)

# cellXfs id for default date styling
#
# source://caxlsx//lib/axlsx/util/constants.rb#273
Axlsx::STYLE_DATE = T.let(T.unsafe(nil), Integer)

# cellXfs id for thin borders around the cell
#
# source://caxlsx//lib/axlsx/util/constants.rb#270
Axlsx::STYLE_THIN_BORDER = T.let(T.unsafe(nil), Integer)

# The Scaling class defines axis scaling
#
# source://caxlsx//lib/axlsx/drawing/scaling.rb#3
class Axlsx::Scaling
  include ::Axlsx::OptionsParser

  # creates a new Scaling object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Scaling] a new instance of Scaling
  #
  # source://caxlsx//lib/axlsx/drawing/scaling.rb#11
  def initialize(options = T.unsafe(nil)); end

  # logarithmic base for a logarithmic axis.
  # must be between 2 and 1000
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/scaling.rb#20
  def logBase; end

  # @see logBase
  #
  # source://caxlsx//lib/axlsx/drawing/scaling.rb#36
  def logBase=(v); end

  # the maximum scaling
  #
  # @return [Float]
  #
  # source://caxlsx//lib/axlsx/drawing/scaling.rb#29
  def max; end

  # @see max
  #
  # source://caxlsx//lib/axlsx/drawing/scaling.rb#40
  def max=(v); end

  # the minimu scaling
  #
  # @return [Float]
  #
  # source://caxlsx//lib/axlsx/drawing/scaling.rb#33
  def min; end

  # @see min
  #
  # source://caxlsx//lib/axlsx/drawing/scaling.rb#43
  def min=(v); end

  # the orientation of the axis
  # must be one of [:minMax, :maxMin]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/scaling.rb#25
  def orientation; end

  # @see orientation
  #
  # source://caxlsx//lib/axlsx/drawing/scaling.rb#38
  def orientation=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/scaling.rb#48
  def to_xml_string(str = T.unsafe(nil)); end
end

# The ScatterChart allows you to insert a scatter chart into your worksheet
#
# @see Worksheet#add_chart
# @see Chart#add_series
# @see README for an example
#
# source://caxlsx//lib/axlsx/drawing/scatter_chart.rb#6
class Axlsx::ScatterChart < ::Axlsx::Chart
  # Creates a new scatter chart
  #
  # @return [ScatterChart] a new instance of ScatterChart
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_chart.rb#30
  def initialize(frame, options = T.unsafe(nil)); end

  # The axes for the scatter chart. ScatterChart has an x_val_axis and
  # a y_val_axis
  #
  # @return [Axes]
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_chart.rb#67
  def axes; end

  # The Style for the scatter chart
  # must be one of :none | :line | :lineMarker | :marker | :smooth | :smoothMarker
  # return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_chart.rb#12
  def scatterStyle; end

  # see #scatterStyle
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_chart.rb#41
  def scatterStyle=(v); end

  # The Style for the scatter chart
  # must be one of :none | :line | :lineMarker | :marker | :smooth | :smoothMarker
  # return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_chart.rb#12
  def scatter_style; end

  # see #scatterStyle
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_chart.rb#41
  def scatter_style=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_chart.rb#50
  def to_xml_string(str = T.unsafe(nil)); end

  # the x value axis
  #
  # @return [ValAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_chart.rb#17
  def xValAxis; end

  # the x value axis
  #
  # @return [ValAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_chart.rb#17
  def x_val_axis; end

  # the y value axis
  #
  # @return [ValAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_chart.rb#24
  def yValAxis; end

  # the y value axis
  #
  # @return [ValAxis]
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_chart.rb#24
  def y_val_axis; end
end

# A ScatterSeries defines the x and y position of data in the chart
#
# @note The recommended way to manage series is to use Chart#add_series
# @see Worksheet#add_chart
# @see Chart#add_series
# @see examples/example.rb
#
# source://caxlsx//lib/axlsx/drawing/scatter_series.rb#7
class Axlsx::ScatterSeries < ::Axlsx::Series
  # Creates a new ScatterSeries
  #
  # @return [ScatterSeries] a new instance of ScatterSeries
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_series.rb#37
  def initialize(chart, options = T.unsafe(nil)); end

  # The fill color for this series.
  # Red, green, and blue is expressed as sequence of hex digits, RRGGBB. A perceptual gamma of 2.2 is used.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_series.rb#19
  def color; end

  # @see color
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_series.rb#57
  def color=(v); end

  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_series.rb#22
  def ln_width; end

  # @see ln_width
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_series.rb#68
  def ln_width=(v); end

  # custom marker symbol
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_series.rb#34
  def marker_symbol; end

  # @see marker_symbol
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_series.rb#73
  def marker_symbol=(v); end

  # Line markers presence
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_series.rb#30
  def show_marker; end

  # Line smoothing between data points
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_series.rb#26
  def smooth; end

  # @see smooth
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_series.rb#62
  def smooth=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_series.rb#81
  def to_xml_string(str = T.unsafe(nil)); end

  # The x data for this series.
  #
  # @return [NamedAxisData]
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_series.rb#10
  def xData; end

  # The y data for this series.
  #
  # @return [NamedAxisData]
  #
  # source://caxlsx//lib/axlsx/drawing/scatter_series.rb#14
  def yData; end

  private

  # source://caxlsx//lib/axlsx/drawing/scatter_series.rb#118
  def marker_symbol_xml; end
end

# Selection options for worksheet panes.
#
# @note The recommended way to manage the selection pane options is via SheetView#add_selection
# @see SheetView#add_selection
#
# source://caxlsx//lib/axlsx/workbook/worksheet/selection.rb#6
class Axlsx::Selection
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new {Selection} object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Selection] a new instance of Selection
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/selection.rb#15
  def initialize(options = T.unsafe(nil)); end

  # Active Cell Location
  # Location of the active cell.
  # default nil
  #
  # @return [String]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/selection.rb#26
  def active_cell; end

  # @see active_cell
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/selection.rb#74
  def active_cell=(v); end

  # Active Cell Index
  # 0-based index of the range reference (in the array of references listed in sqref)
  # containing the active cell. Only used when the selection in sqref is not contiguous.
  # Therefore, this value needs to be aware of the order in which the range references are
  # written in sqref.
  # When this value is out of range then activeCell can be used.
  # default nil
  #
  # @return [Integer]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/selection.rb#37
  def active_cell_id; end

  # @see active_cell_id
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/selection.rb#81
  def active_cell_id=(v); end

  # Pane
  # The pane to which this selection belongs.
  # Options are
  #  * bottom_left:  Bottom left pane, when both vertical and horizontal
  #                  splits are applied. This value is also used when only
  #                  a horizontal split has been applied, dividing the pane
  #                  into upper and lower regions. In that case, this value
  #                  specifies the bottom pane.
  #  * bottom_right: Bottom right pane, when both vertical and horizontal
  #                  splits are applied.
  #  * top_left:     Top left pane, when both vertical and horizontal splits
  #                  are applied. This value is also used when only a horizontal
  #                  split has been applied, dividing the pane into upper and lower
  #                  regions. In that case, this value specifies the top pane.
  #                  This value is also used when only a vertical split has
  #                  been applied, dividing the pane into right and left
  #                  regions. In that case, this value specifies the left pane
  #  * top_right:    Top right pane, when both vertical and horizontal
  #                  splits are applied. This value is also used when only
  #                  a vertical split has been applied, dividing the pane
  #                  into right and left regions. In that case, this value
  #                  specifies the right pane.
  # default nil
  #
  # @return [Symbol]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/selection.rb#64
  def pane; end

  # @see pane
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/selection.rb#84
  def pane=(v); end

  # Sequence of References
  # Range of the selection. Can be non-contiguous set of ranges.
  # default nil
  #
  # @return [String]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/selection.rb#71
  def sqref; end

  # @see sqref
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/selection.rb#90
  def sqref=(v); end

  # Serializes the data validation
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/selection.rb#95
  def to_xml_string(str = T.unsafe(nil)); end
end

# A SerAxis object defines a series axis
#
# source://caxlsx//lib/axlsx/drawing/ser_axis.rb#3
class Axlsx::SerAxis < ::Axlsx::Axis
  # Creates a new SerAxis object
  #
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [SerAxis] a new instance of SerAxis
  #
  # source://caxlsx//lib/axlsx/drawing/ser_axis.rb#17
  def initialize(options = T.unsafe(nil)); end

  # The number of tick lables to skip between labels
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/ser_axis.rb#6
  def tickLblSkip; end

  # @see tickLblSkip
  #
  # source://caxlsx//lib/axlsx/drawing/ser_axis.rb#23
  def tickLblSkip=(v); end

  # The number of tickmarks to be skipped before the next one is rendered.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/ser_axis.rb#11
  def tickMarkSkip; end

  # @see tickMarkSkip
  #
  # source://caxlsx//lib/axlsx/drawing/ser_axis.rb#27
  def tickMarkSkip=(v); end

  # The number of tick lables to skip between labels
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/ser_axis.rb#6
  def tick_lbl_skip; end

  # @see tickLblSkip
  #
  # source://caxlsx//lib/axlsx/drawing/ser_axis.rb#23
  def tick_lbl_skip=(v); end

  # The number of tickmarks to be skipped before the next one is rendered.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/ser_axis.rb#11
  def tick_mark_skip; end

  # @see tickMarkSkip
  #
  # source://caxlsx//lib/axlsx/drawing/ser_axis.rb#27
  def tick_mark_skip=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/ser_axis.rb#33
  def to_xml_string(str = T.unsafe(nil)); end
end

# This module allows us to define a list of symbols defining which
# attributes will be serialized for a class.
#
# source://caxlsx//lib/axlsx/util/serialized_attributes.rb#4
module Axlsx::SerializedAttributes
  mixes_in_class_methods ::Axlsx::SerializedAttributes::ClassMethods

  # A hash of instance variables that have been declared with
  # seraialized_attributes and are not nil.
  # This requires ruby 1.9.3 or higher
  #
  # source://caxlsx//lib/axlsx/util/serialized_attributes.rb#61
  def declared_attributes; end

  # serializes the instance values of the defining object based on the
  # list of serializable attributes.
  # serialization to.
  # defining values that are not serializable attributes list.
  #
  # @param str [String] The string instance to append this
  # @param additional_attributes [Hash] An option key value hash for
  #
  # source://caxlsx//lib/axlsx/util/serialized_attributes.rb#50
  def serialized_attributes(str = T.unsafe(nil), additional_attributes = T.unsafe(nil)); end

  # serialized instance values at text nodes on a camelized element of the
  # attribute name. You may pass in a block for evaluation against non nil
  # values. We use an array for element attributes becuase misordering will
  # break the xml and 1.8.7 does not support ordered hashes.
  #
  # @param str [String] The string instance to which serialized data is appended
  # @param additional_attributes [Array] An array of additional attribute names.
  # @return [String] The serialized output.
  #
  # source://caxlsx//lib/axlsx/util/serialized_attributes.rb#74
  def serialized_element_attributes(str = T.unsafe(nil), additional_attributes = T.unsafe(nil), &block); end

  # creates a XML tag with serialized attributes
  #
  # @see SerializedAttributes#serialized_attributes
  #
  # source://caxlsx//lib/axlsx/util/serialized_attributes.rb#32
  def serialized_tag(tagname, str, additional_attributes = T.unsafe(nil), &block); end

  class << self
    # Extend with class methods
    #
    # source://caxlsx//lib/axlsx/util/serialized_attributes.rb#6
    def included(base); end
  end
end

# class methods applied to all includers
#
# source://caxlsx//lib/axlsx/util/serialized_attributes.rb#11
module Axlsx::SerializedAttributes::ClassMethods
  # This is the method to be used in inheriting classes to specify
  # which of the instance values are serializable
  #
  # source://caxlsx//lib/axlsx/util/serialized_attributes.rb#14
  def serializable_attributes(*symbols); end

  # This helper registers the attributes that will be formatted as elements.
  #
  # source://caxlsx//lib/axlsx/util/serialized_attributes.rb#22
  def serializable_element_attributes(*symbols); end

  # a reader for those attributes
  #
  # source://caxlsx//lib/axlsx/util/serialized_attributes.rb#19
  def xml_attributes; end

  # attr reader for element attributes
  #
  # source://caxlsx//lib/axlsx/util/serialized_attributes.rb#27
  def xml_element_attributes; end
end

# A Series defines the common series attributes and is the super class for all concrete series types.
#
# @note The recommended way to manage series is to use Chart#add_series
# @see Worksheet#add_chart
# @see Chart#add_series
#
# source://caxlsx//lib/axlsx/drawing/series.rb#6
class Axlsx::Series
  include ::Axlsx::OptionsParser

  # Creates a new series
  #
  # @option options
  # @option options
  # @param chart [Chart]
  # @param options [Hash] a customizable set of options
  # @return [Series] a new instance of Series
  #
  # source://caxlsx//lib/axlsx/drawing/series.rb#21
  def initialize(chart, options = T.unsafe(nil)); end

  # The chart that owns this series
  #
  # @return [Chart]
  #
  # source://caxlsx//lib/axlsx/drawing/series.rb#11
  def chart; end

  # The index of this series in the chart's series.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/series.rb#30
  def index; end

  # The order of this series in the chart's series. By default the order is the index of the series.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/series.rb#36
  def order; end

  # @see order
  #
  # source://caxlsx//lib/axlsx/drawing/series.rb#41
  def order=(v); end

  # The title of the series
  #
  # @return [SeriesTitle]
  #
  # source://caxlsx//lib/axlsx/drawing/series.rb#15
  def title; end

  # @see title
  #
  # source://caxlsx//lib/axlsx/drawing/series.rb#44
  def title=(v); end

  private

  # assigns the chart for this series
  #
  # source://caxlsx//lib/axlsx/drawing/series.rb#53
  def chart=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/series.rb#58
  def to_xml_string(str = T.unsafe(nil)); end
end

# A series title is a Title with a slightly different serialization than chart titles.
#
# source://caxlsx//lib/axlsx/drawing/series_title.rb#3
class Axlsx::SeriesTitle < ::Axlsx::Title
  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/series_title.rb#7
  def to_xml_string(str = T.unsafe(nil)); end
end

# The Shared String Table class is responsible for managing and serializing common strings in a workbook.
# While the ECMA-376 spec allows for both inline and shared strings it seems that at least some applications like iWorks Numbers
# and Google Docs require that the shared string table is populated in order to interoperate properly.
# As a developer, you should never need to directly work against this class. Simply set 'use_shared_strings'
# on the package or workbook to generate a package that uses the shared strings table instead of inline strings.
# it is recomended that you use the default inline string method of serialization.
#
# @note Serialization performance is affected by using this serialization method so if you do not need interoperability
#
# source://caxlsx//lib/axlsx/workbook/shared_strings_table.rb#9
class Axlsx::SharedStringsTable
  # Creates a new Shared Strings Table agains an array of cells
  #
  # @param cells [Array] This is an array of all of the cells in the workbook
  # @param xml_space [Symbol] The xml:space behavior for the shared string table.
  # @return [SharedStringsTable] a new instance of SharedStringsTable
  #
  # source://caxlsx//lib/axlsx/workbook/shared_strings_table.rb#33
  def initialize(cells, xml_space = T.unsafe(nil)); end

  # The total number of strings in the workbook including duplicates
  # Empty cells are treated as blank strings
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/shared_strings_table.rb#13
  def count; end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/shared_strings_table.rb#46
  def to_xml_string(str = T.unsafe(nil)); end

  # An array of unique cells. Multiple attributes of the cell are used in comparison
  # each of these unique cells is parsed into the shared string table.
  #
  # @see Cell#sharable
  #
  # source://caxlsx//lib/axlsx/workbook/shared_strings_table.rb#24
  def unique_cells; end

  # The total number of unique strings in the workbook.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/shared_strings_table.rb#17
  def unique_count; end

  # The xml:space attribute
  #
  # @see Workbook#xml_space
  #
  # source://caxlsx//lib/axlsx/workbook/shared_strings_table.rb#28
  def xml_space; end

  private

  # Interate over all of the cells in the array.
  # if our unique cells array does not contain a sharable cell,
  # add the cell to our unique cells array and set the ssti attribute on the index of this cell in the shared strings table
  # if a sharable cell already exists in our unique_cells array, set the ssti attribute of the cell and move on.
  #
  # @return [Array] unique cells
  #
  # source://caxlsx//lib/axlsx/workbook/shared_strings_table.rb#60
  def resolve(cells); end
end

# the SheetCalcPr object for the worksheet
# This object contains calculation properties for the worksheet.
#
# source://caxlsx//lib/axlsx/workbook/worksheet/sheet_calc_pr.rb#4
class Axlsx::SheetCalcPr
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  include ::Axlsx::Accessors
  extend ::Axlsx::SerializedAttributes::ClassMethods
  extend ::Axlsx::Accessors::ClassMethods

  # creates a new SheetCalcPr
  #
  # @option [Boolean]
  # @param options [Hash] Options for this object
  # @param [Boolean] [Hash] a customizable set of options
  # @return [SheetCalcPr] a new instance of SheetCalcPr
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_calc_pr.rb#11
  def initialize(options = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def full_calc_on_load; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def full_calc_on_load=(value); end

  # Serialize the object
  # content to.
  #
  # @param str [String] the string to append this objects serialized
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_calc_pr.rb#24
  def to_xml_string(str = T.unsafe(nil)); end
end

# This class manages the serialization of rows for worksheets
#
# source://caxlsx//lib/axlsx/workbook/worksheet/sheet_data.rb#3
class Axlsx::SheetData
  # Creates a new SheetData object
  #
  # @param worksheet [Worksheet] The worksheet that owns this sheet data.
  # @raise [ArgumentError]
  # @return [SheetData] a new instance of SheetData
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_data.rb#6
  def initialize(worksheet); end

  # Serialize the sheet data
  #
  # @param str [String] the string this objects serializaton will be concacted to.
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_data.rb#17
  def to_xml_string(str = T.unsafe(nil)); end

  # Returns the value of attribute worksheet.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_data.rb#12
  def worksheet; end
end

# Sheet formatting properties
# <xsd:complexType name="CT_SheetFormatPr">
#   <xsd:attribute name="baseColWidth" type="xsd:unsignedInt" use="optional" default="8"/>
#   <xsd:attribute name="defaultColWidth" type="xsd:double" use="optional"/>
#   <xsd:attribute name="defaultRowHeight" type="xsd:double" use="required"/>
#   <xsd:attribute name="customHeight" type="xsd:boolean" use="optional" default="false"/>
#   <xsd:attribute name="zeroHeight" type="xsd:boolean" use="optional" default="false"/>
#   <xsd:attribute name="thickTop" type="xsd:boolean" use="optional" default="false"/>
#   <xsd:attribute name="thickBottom" type="xsd:boolean" use="optional" default="false"/>
#   <xsd:attribute name="outlineLevelRow" type="xsd:unsignedByte" use="optional" default="0"/>
#   <xsd:attribute name="outlineLevelCol" type="xsd:unsignedByte" use="optional" default="0"/>
# </xsd:complexType>
#
# source://caxlsx//lib/axlsx/workbook/worksheet/sheet_format_pr.rb#15
class Axlsx::SheetFormatPr
  include ::Axlsx::SerializedAttributes
  include ::Axlsx::OptionsParser
  include ::Axlsx::Accessors
  extend ::Axlsx::SerializedAttributes::ClassMethods
  extend ::Axlsx::Accessors::ClassMethods

  # creates a new sheet_format_pr object
  #
  # @option [Integer]
  # @option [Float]
  # @option [Float]
  # @option [Boolean]
  # @option [Boolean]
  # @option [Boolean]
  # @option [Boolean]
  # @option [Integer]
  # @option [Integer]
  # @param options [Hash] initialization options
  # @param [Integer] [Hash] a customizable set of options
  # @param [Float] [Hash] a customizable set of options
  # @param [Boolean] [Hash] a customizable set of options
  # @return [SheetFormatPr] a new instance of SheetFormatPr
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_format_pr.rb#31
  def initialize(options = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def base_col_width; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def base_col_width=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def custom_height; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def custom_height=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def default_col_width; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def default_col_width=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def default_row_height; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def default_row_height=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def outline_level_col; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def outline_level_col=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def outline_level_row; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def outline_level_row=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def thick_bottom; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def thick_bottom=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def thick_top; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def thick_top=(value); end

  # serializes this object to an xml string
  #
  # @param str [String] The string this objects serialization will be appended to
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_format_pr.rb#49
  def to_xml_string(str = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def zero_height; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def zero_height=(value); end

  private

  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_format_pr.rb#55
  def set_defaults; end
end

# The SheetPr class manages serialization of a worksheet's sheetPr element.
#
# source://caxlsx//lib/axlsx/workbook/worksheet/sheet_pr.rb#3
class Axlsx::SheetPr
  include ::Axlsx::OptionsParser
  include ::Axlsx::Accessors
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::Accessors::ClassMethods
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new SheetPr object
  #
  # @param worksheet [Worksheet] The worksheet that owns this SheetPr object
  # @raise [ArgumentError]
  # @return [SheetPr] a new instance of SheetPr
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_pr.rb#32
  def initialize(worksheet, options = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def code_name; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def code_name=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def enable_format_conditions_calculation; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def enable_format_conditions_calculation=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def filter_mode; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def filter_mode=(value); end

  # The OutlinePr for this sheet pr object
  #
  # @return [OutlinePr]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_pr.rb#68
  def outline_pr; end

  # The PageSetUpPr for this sheet pr object
  #
  # @return [PageSetUpPr]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_pr.rb#62
  def page_setup_pr; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def published; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def published=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def sync_horizontal; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def sync_horizontal=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def sync_ref; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def sync_ref=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def sync_vertical; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def sync_vertical=(value); end

  # The tab color of the sheet.
  #
  # @return [Color]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_pr.rb#46
  def tab_color; end

  # @see tab_color
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_pr.rb#73
  def tab_color=(v); end

  # Serialize the object
  #
  # @param str [String] serialized output will be appended to this object if provided.
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_pr.rb#51
  def to_xml_string(str = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def transition_entry; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def transition_entry=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def transition_evaluation; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def transition_evaluation=(value); end

  # The worksheet these properties apply to!
  #
  # @return [Worksheet]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_pr.rb#42
  def worksheet; end

  private

  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_pr.rb#79
  def update_properties; end
end

# The SheetProtection object manages worksheet protection options per sheet.
#
# source://caxlsx//lib/axlsx/workbook/worksheet/sheet_protection.rb#3
class Axlsx::SheetProtection
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  include ::Axlsx::Accessors
  extend ::Axlsx::SerializedAttributes::ClassMethods
  extend ::Axlsx::Accessors::ClassMethods

  # Creates a new SheetProtection instance
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [SheetProtection] a new instance of SheetProtection
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_protection.rb#26
  def initialize(options = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def auto_filter; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def auto_filter=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def delete_columns; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def delete_columns=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def delete_rows; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def delete_rows=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def format_cells; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def format_cells=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def format_columns; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def format_columns=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def format_rows; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def format_rows=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def insert_columns; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def insert_columns=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def insert_hyperlinks; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def insert_hyperlinks=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def insert_rows; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def insert_rows=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def objects; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def objects=(value); end

  # Password hash
  # default nil
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_protection.rb#48
  def password; end

  # encodes password for protection locking
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_protection.rb#67
  def password=(v); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def pivot_tables; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def pivot_tables=(value); end

  # Specifies the salt which was prepended to the user-supplied password before it was hashed using the hashing algorithm
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_protection.rb#43
  def salt_value; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def scenarios; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def scenarios=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def select_locked_cells; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def select_locked_cells=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def select_unlocked_cells; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def select_unlocked_cells=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def sheet; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def sheet=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def sort; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def sort=(value); end

  # Serialize the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_protection.rb#76
  def to_xml_string(str = T.unsafe(nil)); end

  private

  # Creates a password hash for a given password
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_protection.rb#84
  def create_password_hash(password); end

  # Encodes a given password
  # Based on the algorithm provided by Daniel Rentz of OpenOffice.
  # http://www.openoffice.org/sc/excelfileformat.pdf, Revision 1.42, page 115 (21.05.2012)
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_protection.rb#97
  def encode_password(password); end
end

# View options for a worksheet.
#
# @note The recommended way to manage the sheet view is via Worksheet#sheet_view
# @see Worksheet#sheet_view
#
# source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#6
class Axlsx::SheetView
  include ::Axlsx::OptionsParser
  include ::Axlsx::Accessors
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::Accessors::ClassMethods
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new {SheetView} object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [SheetView] a new instance of SheetView
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#31
  def initialize(options = T.unsafe(nil)); end

  # Adds a new selection
  # param [Symbol] pane
  # param [Hash] options
  # return [Selection]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#158
  def add_selection(pane, options = T.unsafe(nil)); end

  # Color Id
  # Index to the color value for row/column
  # text headings and gridlines. This is an
  # 'index color value' (ICV) rather than
  # rgb value.
  # default nil
  #
  # @return [Integer]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#75
  def color_id; end

  # @see color_id
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#163
  def color_id=(v); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def default_grid_color; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def default_grid_color=(value); end

  # The pane object for the sheet view
  #
  # @return [Pane]
  # @see [Pane]
  # @yield [@pane]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#56
  def pane; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def right_to_left; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def right_to_left=(value); end

  # A hash of selection objects keyed by pane type associated with this sheet view.
  #
  # @return [Hash]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#64
  def selections; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def show_formulas; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def show_formulas=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def show_grid_lines; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def show_grid_lines=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def show_outline_symbols; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def show_outline_symbols=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def show_row_col_headers; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def show_row_col_headers=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def show_ruler; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def show_ruler=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def show_white_space; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def show_white_space=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def show_zeros; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def show_zeros=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def tab_selected; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def tab_selected=(value); end

  # Serializes the data validation
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#193
  def to_xml_string(str = T.unsafe(nil)); end

  # Top Left Visible Cell
  # Location of the top left visible cell Location
  # of the top left visible cell in the bottom right
  # pane (when in Left-to-Right mode).
  # default nil
  #
  # @return [String]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#84
  def top_left_cell; end

  # @see top_left_cell
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#166
  def top_left_cell=(v); end

  # View Type
  # Indicates the view type.
  # Options are
  #  * normal: Normal view
  #  * page_break_preview: Page break preview
  #  * page_layout: Page Layout View
  # default :normal
  #
  # @return [Symbol]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#95
  def view; end

  # @see view
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#173
  def view=(v); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def window_protection; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def window_protection=(value); end

  # Workbook View Index
  # Zero-based index of this workbook view, pointing
  # to a workbookView element in the bookViews collection.
  # default 0
  #
  # @return [Integer]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#103
  def workbook_view_id; end

  # @see workbook_view_id
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#176
  def workbook_view_id=(v); end

  # Zoom Scale
  # Window zoom magnification for current view
  # representing percent values. This attribute
  # is restricted to values ranging from 10 to 400.
  # Horizontal & Vertical scale together.
  # Current view can be Normal, Page Layout, or
  # Page Break Preview.
  # default 100
  #
  # @return [Integer]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#115
  def zoom_scale; end

  # @see zoom_scale
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#179
  def zoom_scale=(v); end

  # Zoom Scale Normal View
  # Zoom magnification to use when in normal view,
  # representing percent values. This attribute is
  # restricted to values ranging from 10 to 400.
  # Horizontal & Vertical scale together.
  # Applies for worksheets only; zero implies the
  # automatic setting.
  # default 0
  #
  # @return [Integer]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#127
  def zoom_scale_normal; end

  # @see zoom_scale_normal
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#182
  def zoom_scale_normal=(v); end

  # Zoom Scale Page Layout View
  # Zoom magnification to use when in page layout
  # view, representing percent values. This attribute
  # is restricted to values ranging from 10 to 400.
  # Horizontal & Vertical scale together.
  # Applies for worksheets only; zero implies
  # the automatic setting.
  # default 0
  #
  # @return [Integer]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#139
  def zoom_scale_page_layout_view; end

  # @see zoom_scale_page_layout_view
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#185
  def zoom_scale_page_layout_view=(v); end

  # Zoom Scale Page Break Preview
  # Zoom magnification to use when in page break
  # preview, representing percent values. This
  # attribute is restricted to values ranging
  # from 10 to 400. Horizontal & Vertical scale
  # together.
  # Applies for worksheet only; zero implies
  # the automatic setting.
  # default 0
  #
  # @return [Integer]
  # @see type
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#152
  def zoom_scale_sheet_layout_view; end

  # @see zoom_scale_sheet_layout_view
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#188
  def zoom_scale_sheet_layout_view=(v); end
end

# instance values that must be serialized as their own elements - e.g. not attributes.
#
# source://caxlsx//lib/axlsx/workbook/worksheet/sheet_view.rb#51
Axlsx::SheetView::CHILD_ELEMENTS = T.let(T.unsafe(nil), Array)

# A SimpleTypedList is a type restrictive collection that allows some of the methods from Array and supports basic xml serialization.
#
# @private
#
# source://caxlsx//lib/axlsx/util/simple_typed_list.rb#4
class Axlsx::SimpleTypedList
  # Creats a new typed list
  #
  # @param type [Array, Class] An array of Class objects or a single Class object
  # @param serialize_as [String] The tag name to use in serialization
  # @raise [ArgumentError] if all members of type are not Class objects
  # @return [SimpleTypedList] a new instance of SimpleTypedList
  #
  # source://caxlsx//lib/axlsx/util/simple_typed_list.rb#9
  def initialize(type, serialize_as = T.unsafe(nil), start_size = T.unsafe(nil)); end

  def &(*args, &block); end
  def *(*args, &block); end

  # join operator
  # one of the allowed types
  #
  # @param v [Array] the array to join
  # @raise [ArgumentError] if any of the values being joined are not
  # @return [SimpleTypedList]
  #
  # source://caxlsx//lib/axlsx/util/simple_typed_list.rb#84
  def +(v); end

  def -(*args, &block); end

  # Concat operator
  #
  # @param v [Any] the data to be added
  # @raise [ArgumentError] if the value being added is not one fo the allowed types
  # @return [Integer] returns the index of the item added.
  #
  # source://caxlsx//lib/axlsx/util/simple_typed_list.rb#95
  def <<(v); end

  def [](*args, &block); end

  # positional assignment. Adds the item at the index specified
  #
  # @param index [Integer]
  # @param v [Any]
  # @raise [ArgumentError] if the index is protected by locking
  # @raise [ArgumentError] if the item is not one of the allowed types
  #
  # source://caxlsx//lib/axlsx/util/simple_typed_list.rb#129
  def []=(index, v); end

  def all?(*args, &block); end

  # The class constants of allowed types
  #
  # @return [Array]
  #
  # source://caxlsx//lib/axlsx/util/simple_typed_list.rb#24
  def allowed_types; end

  def any?(*args, &block); end
  def append(*args, &block); end
  def assoc(*args, &block); end
  def at(*args, &block); end
  def bsearch(*args, &block); end
  def bsearch_index(*args, &block); end
  def chain(*args, &block); end
  def chunk(*args, &block); end
  def chunk_while(*args, &block); end
  def clear(*args, &block); end
  def collect(*args, &block); end
  def collect!(*args, &block); end
  def collect_concat(*args, &block); end
  def combination(*args, &block); end
  def compact(*args, &block); end
  def compact!(*args, &block); end
  def compact_blank(*args, &block); end
  def compact_blank!(*args, &block); end
  def concat(*args, &block); end
  def count(*args, &block); end
  def cycle(*args, &block); end
  def deconstruct(*args, &block); end

  # delete the item from the list
  #
  # @param v [Any] The item to be deleted.
  # @raise [ArgumentError] if the item's index is protected by locking
  # @return [Any] The item deleted
  #
  # source://caxlsx//lib/axlsx/util/simple_typed_list.rb#107
  def delete(v); end

  # delete the item from the list at the index position provided
  #
  # @raise [ArgumentError] if the index is protected by locking
  # @return [Any] The item deleted
  #
  # source://caxlsx//lib/axlsx/util/simple_typed_list.rb#117
  def delete_at(index); end

  def delete_if(*args, &block); end
  def detect(*args, &block); end
  def difference(*args, &block); end
  def dig(*args, &block); end
  def drop(*args, &block); end
  def drop_while(*args, &block); end
  def each(*args, &block); end
  def each_cons(*args, &block); end
  def each_entry(*args, &block); end
  def each_index(*args, &block); end
  def each_slice(*args, &block); end
  def each_with_index(*args, &block); end
  def each_with_object(*args, &block); end
  def empty?(*args, &block); end
  def entries(*args, &block); end
  def exclude?(*args, &block); end
  def excluding(*args, &block); end
  def extract!(*args, &block); end
  def extract_options!(*args, &block); end
  def fetch(*args, &block); end
  def fifth(*args, &block); end
  def fill(*args, &block); end
  def filter(*args, &block); end
  def filter!(*args, &block); end
  def filter_map(*args, &block); end
  def find(*args, &block); end
  def find_all(*args, &block); end
  def find_index(*args, &block); end
  def first(*args, &block); end
  def flat_map(*args, &block); end
  def flatten(*args, &block); end
  def flatten!(*args, &block); end
  def forty_two(*args, &block); end
  def fourth(*args, &block); end
  def from(*args, &block); end
  def grep(*args, &block); end
  def grep_v(*args, &block); end
  def group_by(*args, &block); end
  def in_groups(*args, &block); end
  def in_groups_of(*args, &block); end
  def in_order_of(*args, &block); end
  def include?(*args, &block); end
  def including(*args, &block); end
  def index(*args, &block); end
  def index_by(*args, &block); end
  def index_with(*args, &block); end
  def inject(*args, &block); end
  def inquiry(*args, &block); end

  # inserts an item at the index specfied
  #
  # @param index [Integer]
  # @param v [Any]
  # @raise [ArgumentError] if the index is protected by locking
  # @raise [ArgumentError] if the index is not one of the allowed types
  #
  # source://caxlsx//lib/axlsx/util/simple_typed_list.rb#142
  def insert(index, v); end

  def intersect?(*args, &block); end
  def intersection(*args, &block); end
  def join(*args, &block); end
  def keep_if(*args, &block); end
  def last(*args, &block); end
  def lazy(*args, &block); end
  def length(*args, &block); end

  # Lock this list at the current size
  #
  # @return [self]
  #
  # source://caxlsx//lib/axlsx/util/simple_typed_list.rb#61
  def lock; end

  # The index below which items cannot be removed
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/util/simple_typed_list.rb#28
  def locked_at; end

  def many?(*args, &block); end
  def map(*args, &block); end
  def map!(*args, &block); end
  def max(*args, &block); end
  def max_by(*args, &block); end
  def maximum(*args, &block); end
  def mean(*args, &block); end
  def member?(*args, &block); end
  def min(*args, &block); end
  def min_by(*args, &block); end
  def minimum(*args, &block); end
  def minmax(*args, &block); end
  def minmax_by(*args, &block); end
  def none?(*args, &block); end
  def one?(*args, &block); end
  def pack(*args, &block); end
  def partition(*args, &block); end
  def permutation(*args, &block); end
  def pick(*args, &block); end
  def place(*args, &block); end
  def pluck(*args, &block); end
  def pop(*args, &block); end
  def prepend(*args, &block); end
  def product(*args, &block); end

  # determines if the index is protected
  #
  # @param index [Integer]
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/util/simple_typed_list.rb#152
  def protected?(index); end

  # Concat operator
  #
  # @param v [Any] the data to be added
  # @raise [ArgumentError] if the value being added is not one fo the allowed types
  # @return [Integer] returns the index of the item added.
  #
  # source://caxlsx//lib/axlsx/util/simple_typed_list.rb#95
  def push(v); end

  def rassoc(*args, &block); end
  def reduce(*args, &block); end
  def reject(*args, &block); end
  def reject!(*args, &block); end
  def repeated_combination(*args, &block); end
  def repeated_permutation(*args, &block); end
  def replace(*args, &block); end
  def reverse(*args, &block); end
  def reverse!(*args, &block); end
  def reverse_each(*args, &block); end
  def rindex(*args, &block); end
  def rotate(*args, &block); end
  def rotate!(*args, &block); end
  def sample(*args, &block); end
  def second(*args, &block); end
  def second_to_last(*args, &block); end
  def select(*args, &block); end
  def select!(*args, &block); end

  # The tag name to use when serializing this object
  # by default the parent node for all items in the list is the classname of the first allowed type with the first letter in lowercase.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/util/simple_typed_list.rb#35
  def serialize_as; end

  def shelljoin(*args, &block); end
  def shift(*args, &block); end
  def shuffle(*args, &block); end
  def shuffle!(*args, &block); end
  def size(*args, &block); end
  def slice(*args, &block); end
  def slice!(*args, &block); end
  def slice_after(*args, &block); end
  def slice_before(*args, &block); end
  def slice_when(*args, &block); end
  def sole(*args, &block); end
  def sort(*args, &block); end
  def sort!(*args, &block); end
  def sort_by(*args, &block); end
  def sort_by!(*args, &block); end
  def split(*args, &block); end
  def standard_deviation(*args, &block); end
  def sum(*args, &block); end
  def take(*args, &block); end
  def take_while(*args, &block); end
  def tally(*args, &block); end
  def third(*args, &block); end
  def third_to_last(*args, &block); end
  def to(*args, &block); end

  # source://caxlsx//lib/axlsx/util/simple_typed_list.rb#73
  def to_a; end

  # source://caxlsx//lib/axlsx/util/simple_typed_list.rb#73
  def to_ary; end

  def to_camel_keys(*args, &block); end
  def to_camelback_keys(*args, &block); end
  def to_cbor(*args, &block); end
  def to_csv(*args, &block); end
  def to_figures(*args, &block); end
  def to_formatted_s(*args, &block); end
  def to_fs(*args, &block); end
  def to_h(*args, &block); end
  def to_msgpack(*args, &block); end
  def to_sentence(*args, &block); end
  def to_set(*args, &block); end
  def to_words(*args, &block); end
  def to_xml(*args, &block); end

  # source://caxlsx//lib/axlsx/util/simple_typed_list.rb#172
  def to_xml_string(str = T.unsafe(nil)); end

  # Transposes the list (without blowing up like ruby does)
  # any non populated cell in the matrix will be a nil value
  #
  # source://caxlsx//lib/axlsx/util/simple_typed_list.rb#39
  def transpose; end

  def union(*args, &block); end
  def uniq(*args, &block); end
  def uniq!(*args, &block); end

  # Unlock the list
  #
  # @return [self]
  #
  # source://caxlsx//lib/axlsx/util/simple_typed_list.rb#68
  def unlock; end

  def unshift(*args, &block); end
  def values_at(*args, &block); end
  def variance(*args, &block); end
  def without(*args, &block); end
  def zip(*args, &block); end
  def |(*args, &block); end
end

# source://caxlsx//lib/axlsx/util/simple_typed_list.rb#162
Axlsx::SimpleTypedList::DELEGATES = T.let(T.unsafe(nil), Array)

# source://caxlsx//lib/axlsx/util/simple_typed_list.rb#158
Axlsx::SimpleTypedList::DESTRUCTIVE = T.let(T.unsafe(nil), Array)

# This specifies the last string data used for a chart. (e.g. strLit and strCache)
# This class is extended for NumData to include the formatCode attribute required for numLit and numCache
#
# source://caxlsx//lib/axlsx/drawing/str_data.rb#4
class Axlsx::StrData
  include ::Axlsx::OptionsParser

  # creates a new StrVal object
  #
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [StrData] a new instance of StrData
  #
  # source://caxlsx//lib/axlsx/drawing/str_data.rb#10
  def initialize(options = T.unsafe(nil)); end

  # Creates the val objects for this data set. I am not overly confident this is going to play nicely with time and data types.
  #
  # @param values [Array] An array of cells or values.
  #
  # source://caxlsx//lib/axlsx/drawing/str_data.rb#19
  def data=(values = T.unsafe(nil)); end

  # serialize the object
  #
  # source://caxlsx//lib/axlsx/drawing/str_data.rb#28
  def to_xml_string(str = T.unsafe(nil)); end
end

# This class specifies data for a particular data point.
#
# source://caxlsx//lib/axlsx/drawing/str_val.rb#3
class Axlsx::StrVal
  include ::Axlsx::OptionsParser

  # creates a new StrVal object
  #
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [StrVal] a new instance of StrVal
  #
  # source://caxlsx//lib/axlsx/drawing/str_val.rb#8
  def initialize(options = T.unsafe(nil)); end

  # serialize the object
  #
  # source://caxlsx//lib/axlsx/drawing/str_val.rb#24
  def to_xml_string(idx, str = T.unsafe(nil)); end

  # a string value.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/str_val.rb#16
  def v; end

  # @see v
  #
  # source://caxlsx//lib/axlsx/drawing/str_val.rb#19
  def v=(v); end
end

# The Styles class manages worksheet styles
# In addition to creating the require style objects for a valid xlsx package, this class provides the key mechanism for adding styles to your workbook, and safely applying them to the cells of your worksheet.
# All portions of the stylesheet are implemented here exception colors, which specify legacy and modified pallete colors, and exLst, whic is used as a future feature data storage area.
#
# @note The recommended way to manage styles is with add_style
# @see Office Open XML Part 1 18.8.11 for gory details on how this stuff gets put together
# @see Styles#add_style
#
# source://caxlsx//lib/axlsx/stylesheet/styles.rb#26
class Axlsx::Styles
  # Creates a new Styles object and prepopulates it with the requires objects to generate a valid package style part.
  #
  # @return [Styles] a new instance of Styles
  #
  # source://caxlsx//lib/axlsx/stylesheet/styles.rb#118
  def initialize; end

  # Drastically simplifies style creation and management.
  # An index for cell styles where keys are styles codes as per Axlsx::Style and values are Cell#raw_style
  # The reason for the backward key/value ordering is that style lookup must be most efficient, while `add_style` can be less efficient
  #
  # @example You Got Style
  #   require "rubygems" # if that is your preferred way to manage gems!
  #   require "axlsx"
  #
  #   p = Axlsx::Package.new
  #   ws = p.workbook.add_worksheet
  #
  #   # black text on a white background at 14pt with thin borders!
  #   title = ws.styles.add_style(:bg_color => "FFFF0000", :fg_color=>"#FF000000", :sz=>14,  :border=> {:style => :thin, :color => "FFFF0000"}
  #
  #   ws.add_row ["Least Popular Pets"]
  #   ws.add_row ["", "Dry Skinned Reptiles", "Bald Cats", "Violent Parrots"], :style=>title
  #   ws.add_row ["Votes", 6, 4, 1], :style=>Axlsx::STYLE_THIN_BORDER
  #   f = File.open('example_you_got_style.xlsx', 'wb')
  #   p.serialize(f)
  # @example Differential styling
  #   # Differential styles apply on top of cell styles. Used in Conditional Formatting. Must specify :type => :dxf, and you can't use :num_fmt.
  #   require "rubygems" # if that is your preferred way to manage gems!
  #   require "axlsx"
  #
  #   p = Axlsx::Package.new
  #   wb = p.workbook
  #   ws = wb.add_worksheet
  #
  #   # define your styles
  #   profitable = wb.styles.add_style(:bg_color => "FFFF0000",
  #   :fg_color=>"#FF000000",
  #   :type => :dxf)
  #
  #   ws.add_row ["Genreated At:", Time.now], :styles=>[nil, date_time]
  #   ws.add_row ["Previous Year Quarterly Profits (JPY)"], :style=>title
  #   ws.add_row ["Quarter", "Profit", "% of Total"], :style=>title
  #   ws.add_row ["Q1", 4000, 40], :style=>[title, currency, percent]
  #   ws.add_row ["Q2", 3000, 30], :style=>[title, currency, percent]
  #   ws.add_row ["Q3", 1000, 10], :style=>[title, currency, percent]
  #   ws.add_row ["Q4", 2000, 20], :style=>[title, currency, percent]
  #
  #   ws.add_conditional_formatting("A1:A7", { :type => :cellIs, :operator => :greaterThan, :formula => "2000", :dxfId => profitable, :priority => 1 })
  #   f = File.open('example_differential_styling', 'wb')
  #   p.serialize(f)
  # @example Styling specifically
  #   # an example of applying specific styles to specific cells
  #   require "rubygems" # if that is your preferred way to manage gems!
  #   require "axlsx"
  #
  #   p = Axlsx::Package.new
  #   ws = p.workbook.add_worksheet
  #
  #   # define your styles
  #   title = ws.styles.add_style(:bg_color => "FFFF0000",
  #   :fg_color=>"#FF000000",
  #   :border=>Axlsx::STYLE_THIN_BORDER,
  #   :alignment=>{:horizontal => :center})
  #
  #   date_time = ws.styles.add_style(:num_fmt => Axlsx::NUM_FMT_YYYYMMDDHHMMSS,
  #   :border=>Axlsx::STYLE_THIN_BORDER)
  #
  #   percent = ws.styles.add_style(:num_fmt => Axlsx::NUM_FMT_PERCENT,
  #   :border=>Axlsx::STYLE_THIN_BORDER)
  #
  #   currency = ws.styles.add_style(:format_code=>"¥#,##0;[Red]¥-#,##0",
  #   :border=>Axlsx::STYLE_THIN_BORDER)
  #
  #   # build your rows
  #   ws.add_row ["Generated At:", Time.now], :styles=>[nil, date_time]
  #   ws.add_row ["Previous Year Quarterly Profits (JPY)"], :style=>title
  #   ws.add_row ["Quarter", "Profit", "% of Total"], :style=>title
  #   ws.add_row ["Q1", 4000, 40], :style=>[title, currency, percent]
  #   ws.add_row ["Q2", 3000, 30], :style=>[title, currency, percent]
  #   ws.add_row ["Q3", 1000, 10], :style=>[title, currency, percent]
  #   ws.add_row ["Q4", 2000, 20], :style=>[title, currency, percent]
  #   f = File.open('example_you_got_style.xlsx', 'wb')
  #   p.serialize(f)
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @return [Integer]
  # @see CellAlignment
  #
  # source://caxlsx//lib/axlsx/stylesheet/styles.rb#227
  def add_style(options = T.unsafe(nil)); end

  # The collection of borders used in this workbook
  # Axlsx predefines THIN_BORDER which can be used to put a border around all of your cells.
  #
  # @note The recommended way to manage styles is with add_style
  # @return [SimpleTypedList]
  # @see Styles#add_style
  #
  # source://caxlsx//lib/axlsx/stylesheet/styles.rb#85
  def borders; end

  # The collection of master formatting records for named cell styles, which means records defined in cellStyles, in the workbook
  #
  # @note The recommended way to manage styles is with add_style
  # @return [SimpleTypedList]
  # @see Styles#add_style
  #
  # source://caxlsx//lib/axlsx/stylesheet/styles.rb#91
  def cellStyleXfs; end

  # The collection of named styles, referencing cellStyleXfs items in the workbook.
  #
  # @note The recommended way to manage styles is with add_style
  # @return [SimpleTypedList]
  # @see Styles#add_style
  #
  # source://caxlsx//lib/axlsx/stylesheet/styles.rb#97
  def cellStyles; end

  # The collection of master formatting records. This is the list that you will actually use in styling a workbook.
  #
  # @note The recommended way to manage styles is with add_style
  # @return [SimpleTypedList]
  # @see Styles#add_style
  #
  # source://caxlsx//lib/axlsx/stylesheet/styles.rb#103
  def cellXfs; end

  # The collection of non-cell formatting records used in the worksheet.
  #
  # @note The recommended way to manage styles is with add_style
  # @return [SimpleTypedList]
  # @see Styles#add_style
  #
  # source://caxlsx//lib/axlsx/stylesheet/styles.rb#109
  def dxfs; end

  # The collection of fills used in this workbook
  #
  # @note The recommended way to manage styles is with add_style
  # @return [SimpleTypedList]
  # @see Styles#add_style
  #
  # source://caxlsx//lib/axlsx/stylesheet/styles.rb#78
  def fills; end

  # The collection of fonts used in this workbook
  #
  # @note The recommended way to manage styles is with add_style
  # @return [SimpleTypedList]
  # @see Styles#add_style
  #
  # source://caxlsx//lib/axlsx/stylesheet/styles.rb#72
  def fonts; end

  # numFmts for your styles.
  #  The default styles, which change based on the system local, are as follows.
  #  id formatCode
  #   0 General
  #   1 0
  #   2 0.00
  #   3 #,##0
  #   4 #,##0.00
  #   9 0%
  #   10 0.00%
  #   11 0.00E+00
  #   12 #   ?/?
  #   13 #   ??/??
  #   14 mm-dd-yy
  #   15 d-mmm-yy
  #   16 d-mmm
  #   17 mmm-yy
  #   18 h:mm AM/PM
  #   19 h:mm:ss AM/PM
  #   20 h:mm
  #   21 h:mm:ss
  #   22 m/d/yy h:mm
  #   37 #,##0 ;(#,##0)
  #   38 #,##0 ;[Red](#,##0)
  #   39 #,##0.00;(#,##0.00)
  #   40 #,##0.00;[Red](#,##0.00)
  #   45 mm:ss
  #   46 [h]:mm:ss
  #   47 mmss.0
  #   48 ##0.0E+0
  #   49 @
  #  Axlsx also defines the following constants which you can use in add_style.
  #     NUM_FMT_PERCENT formats to "0%"
  #     NUM_FMT_YYYYMMDD formats to "yyyy/mm/dd"
  #     NUM_FMT_YYYYMMDDHHMMSS  formats to "yyyy/mm/dd hh:mm:ss"
  #
  # @note The recommended way to manage styles is with add_style
  # @return [SimpleTypedList]
  # @see Office Open XML Part 1 - 18.8.31 for more information on creating number formats
  # @see Styles#add_style
  #
  # source://caxlsx//lib/axlsx/stylesheet/styles.rb#66
  def numFmts; end

  # parses add_style options for alignment
  # noop if options hash does not include :alignment key
  #
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [CellAlignment]
  # @see CellAlignment
  #
  # source://caxlsx//lib/axlsx/stylesheet/styles.rb#304
  def parse_alignment_options(options = T.unsafe(nil)); end

  # parses Style#add_style options for borders.
  # Border style definition hashes must include :style and :color key-value entries and
  # may include an :edges entry that references an array of symbols identifying which border edges
  # you wish to apply the style or any other valid Border initializer options.
  # If the :edges entity is not provided the style is applied to all edges of cells that reference this style.
  # Also available :border_top, :border_right, :border_bottom and :border_left options with :style and/or :color
  # key-value entries, which override :border values.
  #
  # @example
  #   #apply a thick red border to the top and bottom
  #   { :border => { :style => :thick, :color => "FFFF0000", :edges => [:top, :bottom] }
  # @note noop if :border is not specified in options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Border|Integer]
  #
  # source://caxlsx//lib/axlsx/stylesheet/styles.rb#366
  def parse_border_options(options = T.unsafe(nil)); end

  # parses add_style options for fills. If the options hash contains :type => :dxf we return a Fill object. If not, we return the index of the fill after being added to the fills collection.
  #
  # @note noop if :bg_color is not specified in options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Fill|Integer]
  #
  # source://caxlsx//lib/axlsx/stylesheet/styles.rb#342
  def parse_fill_options(options = T.unsafe(nil)); end

  # parses add_style options for fonts. If the options hash contains :type => :dxf we return a new Font object.
  # if not, we return the index of the newly created font object in the styles.fonts collection.
  #
  # @note noop if none of the options described here are set on the options parameter.
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Font|Integer]
  #
  # source://caxlsx//lib/axlsx/stylesheet/styles.rb#325
  def parse_font_options(options = T.unsafe(nil)); end

  # Parses Style#add_style options for number formatting.
  # noop if neither :format_code or :num_format options are set.
  #
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [NumFmt|Integer]
  #
  # source://caxlsx//lib/axlsx/stylesheet/styles.rb#468
  def parse_num_fmt_options(options = T.unsafe(nil)); end

  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [CellProtection]
  #
  # source://caxlsx//lib/axlsx/stylesheet/styles.rb#293
  def parse_protection_options(options = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/stylesheet/styles.rb#122
  def style_index; end

  # The collection of table styles that will be available to the user in the excel UI
  #
  # @note The recommended way to manage styles is with add_style
  # @return [SimpleTypedList]
  # @see Styles#add_style
  #
  # source://caxlsx//lib/axlsx/stylesheet/styles.rb#115
  def tableStyles; end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/styles.rb#486
  def to_xml_string(str = T.unsafe(nil)); end

  private

  # Creates the default set of styles the exel requires to be valid as well as setting up the
  # Axlsx::STYLE_THIN_BORDER
  #
  # source://caxlsx//lib/axlsx/stylesheet/styles.rb#499
  def load_default_styles; end
end

# table content type
#
# source://caxlsx//lib/axlsx/util/constants.rb#105
Axlsx::TABLE_CT = T.let(T.unsafe(nil), String)

# drawing part
#
# source://caxlsx//lib/axlsx/util/constants.rb#219
Axlsx::TABLE_PN = T.let(T.unsafe(nil), String)

# table rels namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#51
Axlsx::TABLE_R = T.let(T.unsafe(nil), String)

# Table
#
# @note Worksheet#add_table is the recommended way to create tables for your worksheets.
# @see README for examples
#
# source://caxlsx//lib/axlsx/workbook/worksheet/table.rb#5
class Axlsx::Table
  include ::Axlsx::OptionsParser

  # Creates a new Table object
  #
  # @option options
  # @option options
  # @param sheet [Worksheet] The sheet containing the table data.
  # @param options [Hash] a customizable set of options
  # @param ref [String] The reference to the table data like 'A1:G24'.
  # @return [Table] a new instance of Table
  # @yield [_self]
  # @yieldparam _self [Axlsx::Table] the object that the method was called on
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/table.rb#13
  def initialize(ref, sheet, options = T.unsafe(nil)); end

  # The index of this chart in the workbooks charts collection
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/table.rb#38
  def index; end

  # The name of the table.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/table.rb#30
  def name; end

  # The name of the Table.
  #
  # @param v [String, Cell]
  # @return [Title]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/table.rb#58
  def name=(v); end

  # The part name for this table
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/table.rb#44
  def pn; end

  # The relationship id for this table.
  #
  # @return [String]
  # @see Relationship#Id
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/table.rb#51
  def rId; end

  # The reference to the table data
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/table.rb#26
  def ref; end

  # The style for the table.
  #
  # @return [TableStyle]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/table.rb#34
  def style; end

  # TableStyleInfo for the table.
  # initialization can be fed via the :style_info option
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/table.rb#67
  def table_style_info; end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/table.rb#74
  def to_xml_string(str = T.unsafe(nil)); end

  private

  # get the header cells (hackish)
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/table.rb#95
  def header_cells; end
end

# A single table style definition and is a collection for tableStyleElements
#
# @note Table are not supported in this version and only the defaults required for a valid workbook are created.
#
# source://caxlsx//lib/axlsx/stylesheet/table_style.rb#4
class Axlsx::TableStyle < ::Axlsx::SimpleTypedList
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # creates a new TableStyle object
  #
  # @option options
  # @option options
  # @param name [String]
  # @param options [Hash] a customizable set of options
  # @raise [ArgumentError] if name option is not provided.
  # @return [TableStyle] a new instance of TableStyle
  #
  # source://caxlsx//lib/axlsx/stylesheet/table_style.rb#13
  def initialize(name, options = T.unsafe(nil)); end

  # The name of this table style
  #
  # @return [string]
  #
  # source://caxlsx//lib/axlsx/stylesheet/table_style.rb#23
  def name; end

  # @see name
  #
  # source://caxlsx//lib/axlsx/stylesheet/table_style.rb#34
  def name=(v); end

  # indicates if this style should be applied to pivot tables
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/table_style.rb#27
  def pivot; end

  # @see pivot
  #
  # source://caxlsx//lib/axlsx/stylesheet/table_style.rb#36
  def pivot=(v); end

  # indicates if this style should be applied to tables
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/table_style.rb#31
  def table; end

  # @see table
  #
  # source://caxlsx//lib/axlsx/stylesheet/table_style.rb#38
  def table=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/table_style.rb#43
  def to_xml_string(str = T.unsafe(nil)); end
end

# an element of style that belongs to a table style.
#
# @note tables and table styles are not supported in this version. This class exists in preparation for that support.
#
# source://caxlsx//lib/axlsx/stylesheet/table_style_element.rb#4
class Axlsx::TableStyleElement
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # creates a new TableStyleElement object
  #
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [TableStyleElement] a new instance of TableStyleElement
  #
  # source://caxlsx//lib/axlsx/stylesheet/table_style_element.rb#12
  def initialize(options = T.unsafe(nil)); end

  # The dxfId this style element points to
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/stylesheet/table_style_element.rb#56
  def dxfId; end

  # @see dxfId
  #
  # source://caxlsx//lib/axlsx/stylesheet/table_style_element.rb#65
  def dxfId=(v); end

  # Number of rows or columns used in striping when the type is firstRowStripe, secondRowStripe, firstColumnStripe, or secondColumnStripe.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/stylesheet/table_style_element.rb#52
  def size; end

  # @see size
  #
  # source://caxlsx//lib/axlsx/stylesheet/table_style_element.rb#62
  def size=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/table_style_element.rb#70
  def to_xml_string(str = T.unsafe(nil)); end

  # The type of style element. The following type are allowed
  #   :wholeTable
  #   :headerRow
  #   :totalRow
  #   :firstColumn
  #   :lastColumn
  #   :firstRowStripe
  #   :secondRowStripe
  #   :firstColumnStripe
  #   :secondColumnStripe
  #   :firstHeaderCell
  #   :lastHeaderCell
  #   :firstTotalCell
  #   :lastTotalCell
  #   :firstSubtotalColumn
  #   :secondSubtotalColumn
  #   :thirdSubtotalColumn
  #   :firstSubtotalRow
  #   :secondSubtotalRow
  #   :thirdSubtotalRow
  #   :blankRow
  #   :firstColumnSubheading
  #   :secondColumnSubheading
  #   :thirdColumnSubheading
  #   :firstRowSubheading
  #   :secondRowSubheading
  #   :thirdRowSubheading
  #   :pageFieldLabels
  #   :pageFieldValues
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/stylesheet/table_style_element.rb#48
  def type; end

  # @see type
  #
  # source://caxlsx//lib/axlsx/stylesheet/table_style_element.rb#59
  def type=(v); end
end

# The table style info class manages style attributes for defined tables in
# a worksheet
#
# source://caxlsx//lib/axlsx/workbook/worksheet/table_style_info.rb#4
class Axlsx::TableStyleInfo
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  include ::Axlsx::Accessors
  extend ::Axlsx::SerializedAttributes::ClassMethods
  extend ::Axlsx::Accessors::ClassMethods

  # creates a new TableStyleInfo instance
  #
  # @option [Boolean]
  # @option [Boolean]
  # @option [Boolean]
  # @option [Boolean]
  # @option [String]
  # @param options [Hash]
  # @param [Boolean] [Hash] a customizable set of options
  # @param [String] [Hash] a customizable set of options
  # @return [TableStyleInfo] a new instance of TableStyleInfo
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/table_style_info.rb#20
  def initialize(options = T.unsafe(nil)); end

  # Initialize all the values to false as Excel requires them to
  # explicitly be disabled or all will show.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/table_style_info.rb#33
  def initialize_defaults; end

  # The name of the table style.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/table_style_info.rb#40
  def name; end

  # The name of the table style.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/table_style_info.rb#40
  def name=(_arg0); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def show_column_stripes; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def show_column_stripes=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def show_first_column; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def show_first_column=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def show_last_column; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def show_last_column=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def show_row_stripes; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def show_row_stripes=(value); end

  # seralizes this object to an xml string
  #
  # @param str [String] the string to contact this objects serialization to.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/table_style_info.rb#44
  def to_xml_string(str = T.unsafe(nil)); end
end

# TableStyles represents a collection of style definitions for table styles and pivot table styles.
#
# @note Support for custom table styles does not exist in this version. Many of the classes required are defined in preparation for future release. Please do not attempt to add custom table styles.
#
# source://caxlsx//lib/axlsx/stylesheet/table_styles.rb#4
class Axlsx::TableStyles < ::Axlsx::SimpleTypedList
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new TableStyles object that is a container for TableStyle objects
  #
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [TableStyles] a new instance of TableStyles
  #
  # source://caxlsx//lib/axlsx/stylesheet/table_styles.rb#10
  def initialize(options = T.unsafe(nil)); end

  # The default pivot table style. The default value is  'PivotStyleLight6'
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/table_styles.rb#24
  def defaultPivotStyle; end

  # @see defaultPivotStyle
  #
  # source://caxlsx//lib/axlsx/stylesheet/table_styles.rb#29
  def defaultPivotStyle=(v); end

  # The default table style. The default value is 'TableStyleMedium9'
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/table_styles.rb#20
  def defaultTableStyle; end

  # @see defaultTableStyle
  #
  # source://caxlsx//lib/axlsx/stylesheet/table_styles.rb#27
  def defaultTableStyle=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/table_styles.rb#34
  def to_xml_string(str = T.unsafe(nil)); end
end

# A simple, self serializing class for storing tables
#
# source://caxlsx//lib/axlsx/workbook/worksheet/tables.rb#3
class Axlsx::Tables < ::Axlsx::SimpleTypedList
  # creates a new Tables object
  #
  # @raise [ArgumentError]
  # @return [Tables] a new instance of Tables
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/tables.rb#5
  def initialize(worksheet); end

  # returns the relationships required by this collection
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/tables.rb#17
  def relationships; end

  # renders the tables xml
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/tables.rb#26
  def to_xml_string(str = T.unsafe(nil)); end

  # The worksheet that owns this collection of tables
  #
  # @return [Worksheet]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/tables.rb#14
  def worksheet; end
end

# A Title stores information about the title of a chart
#
# source://caxlsx//lib/axlsx/drawing/title.rb#3
class Axlsx::Title
  # Creates a new Title object
  #
  # @param title [String, Cell] The cell or string to be used for the chart's title
  # @return [Title] a new instance of Title
  #
  # source://caxlsx//lib/axlsx/drawing/title.rb#18
  def initialize(title = T.unsafe(nil), title_size = T.unsafe(nil)); end

  # The cell that holds the text for the title. Setting this property will automatically update the text attribute.
  #
  # @return [Cell]
  #
  # source://caxlsx//lib/axlsx/drawing/title.rb#14
  def cell; end

  # @see cell
  #
  # source://caxlsx//lib/axlsx/drawing/title.rb#45
  def cell=(v); end

  # Check if the title is empty.
  #
  # A title is considered empty if it is an empty string. If the title references a cell it is *not* empty,
  # even if the referenced cell is blank (because the cell’s value could still change later).
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/title.rb#58
  def empty?; end

  # The text to be shown. Setting this property directly with a string will remove the cell reference.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/title.rb#6
  def text; end

  # @see text
  #
  # source://caxlsx//lib/axlsx/drawing/title.rb#29
  def text=(v); end

  # Text size property
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/title.rb#10
  def text_size; end

  # @see text_size
  #
  # source://caxlsx//lib/axlsx/drawing/title.rb#37
  def text_size=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/title.rb#70
  def to_xml_string(str = T.unsafe(nil)); end
end

# This class details the anchor points for drawings.
#
# @note The recommended way to manage drawings and charts is Worksheet#add_chart. Anchors are specified by the :start_at and :end_at options to that method.
# @see Worksheet#add_chart
#
# source://caxlsx//lib/axlsx/drawing/two_cell_anchor.rb#5
class Axlsx::TwoCellAnchor
  include ::Axlsx::OptionsParser

  # Creates a new TwoCellAnchor object
  # c.start_at 5, 9
  #
  # @option options
  # @option options
  # @param drawing [Drawing]
  # @param options [Hash] a customizable set of options
  # @return [TwoCellAnchor] a new instance of TwoCellAnchor
  #
  # source://caxlsx//lib/axlsx/drawing/two_cell_anchor.rb#33
  def initialize(drawing, options = T.unsafe(nil)); end

  # Creates a graphic frame and chart object associated with this anchor
  #
  # @return [Chart]
  #
  # source://caxlsx//lib/axlsx/drawing/two_cell_anchor.rb#63
  def add_chart(chart_type, options); end

  # Creates an image associated with this anchor.
  #
  # source://caxlsx//lib/axlsx/drawing/two_cell_anchor.rb#69
  def add_pic(options = T.unsafe(nil)); end

  # The drawing that holds this anchor
  #
  # @return [Drawing]
  #
  # source://caxlsx//lib/axlsx/drawing/two_cell_anchor.rb#26
  def drawing; end

  # sets the col, row attributes for the to marker
  # objects is directly thru the object
  #
  # @note the recommended way to set the to position for graphical
  # @see Char#end_at
  #
  # source://caxlsx//lib/axlsx/drawing/two_cell_anchor.rb#57
  def end_at(x, y = T.unsafe(nil)); end

  # A marker that defines the from cell anchor. The default from column and row are 0 and 0 respectively
  #
  # @return [Marker]
  #
  # source://caxlsx//lib/axlsx/drawing/two_cell_anchor.rb#10
  def from; end

  # The index of this anchor in the drawing
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/two_cell_anchor.rb#75
  def index; end

  # The object this anchor hosts
  #
  # @return [Pic, GraphicFrame]
  #
  # source://caxlsx//lib/axlsx/drawing/two_cell_anchor.rb#22
  def object; end

  # sets the col, row attributes for the from marker.
  # objects is directly thru the object.
  #
  # @note The recommended way to set the start position for graphical
  # @see Chart#start_at
  #
  # source://caxlsx//lib/axlsx/drawing/two_cell_anchor.rb#49
  def start_at(x, y = T.unsafe(nil)); end

  # A marker that returns the to cell anchor. The default to column and row are 5 and 10 respectively
  #
  # @return [Marker]
  #
  # source://caxlsx//lib/axlsx/drawing/two_cell_anchor.rb#13
  def to; end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/two_cell_anchor.rb#82
  def to_xml_string(str = T.unsafe(nil)); end
end

# Validates an unsigned intger
#
# source://caxlsx//lib/axlsx/util/validators.rb#83
Axlsx::UINT_VALIDATOR = T.let(T.unsafe(nil), Proc)

# The current version
#
# source://caxlsx//lib/axlsx/version.rb#3
Axlsx::VERSION = T.let(T.unsafe(nil), String)

# VML Drawing content type
#
# source://caxlsx//lib/axlsx/util/constants.rb#102
Axlsx::VML_DRAWING_CT = T.let(T.unsafe(nil), String)

# vml drawing part
#
# source://caxlsx//lib/axlsx/util/constants.rb#216
Axlsx::VML_DRAWING_PN = T.let(T.unsafe(nil), String)

# vml drawing relation namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#99
Axlsx::VML_DRAWING_R = T.let(T.unsafe(nil), String)

# the ValAxis class defines a chart value axis.
#
# source://caxlsx//lib/axlsx/drawing/val_axis.rb#3
class Axlsx::ValAxis < ::Axlsx::Axis
  # Creates a new ValAxis object
  #
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [ValAxis] a new instance of ValAxis
  #
  # source://caxlsx//lib/axlsx/drawing/val_axis.rb#12
  def initialize(options = T.unsafe(nil)); end

  # This element specifies how the value axis crosses the category axis.
  # must be one of [:between, :midCat]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/val_axis.rb#7
  def crossBetween; end

  # @see cross_between
  #
  # source://caxlsx//lib/axlsx/drawing/val_axis.rb#18
  def crossBetween=(v); end

  # This element specifies how the value axis crosses the category axis.
  # must be one of [:between, :midCat]
  #
  # @return [Symbol]
  #
  # source://caxlsx//lib/axlsx/drawing/val_axis.rb#7
  def cross_between; end

  # @see cross_between
  #
  # source://caxlsx//lib/axlsx/drawing/val_axis.rb#18
  def cross_between=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/val_axis.rb#27
  def to_xml_string(str = T.unsafe(nil)); end
end

# 3D attributes for a chart.
#
# source://caxlsx//lib/axlsx/drawing/view_3D.rb#3
class Axlsx::View3D
  include ::Axlsx::OptionsParser

  # Creates a new View3D for charts
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [View3D] a new instance of View3D
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#13
  def initialize(options = T.unsafe(nil)); end

  # depth or chart as % of chart width
  # must be between 20% and 2000%
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#45
  def depthPercent; end

  # @see depth_percent
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#79
  def depthPercent=(v); end

  # depth or chart as % of chart width
  # must be between 20% and 2000%
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#45
  def depth_percent; end

  # @see depth_percent
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#79
  def depth_percent=(v); end

  # height of chart as % of chart width
  # must be between 5% and 500%
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#33
  def hPercent; end

  # @see h_percent
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#65
  def hPercent=(v); end

  # height of chart as % of chart width
  # must be between 5% and 500%
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#33
  def h_percent; end

  # @see h_percent
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#65
  def h_percent=(v); end

  # field of view angle
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#55
  def perspective; end

  # @see perspective
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#87
  def perspective=(v); end

  # Chart axis are at right angles
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#50
  def rAngAx; end

  # @see r_ang_ax
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#83
  def rAngAx=(v); end

  # Chart axis are at right angles
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#50
  def r_ang_ax; end

  # @see r_ang_ax
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#83
  def r_ang_ax=(v); end

  # x rotation for the chart
  # must be between -90 and 90
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#27
  def rotX; end

  # @see rot_x
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#58
  def rotX=(v); end

  # y rotation for the chart
  # must be between 0 and 360
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#39
  def rotY; end

  # @see rot_y
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#72
  def rotY=(v); end

  # x rotation for the chart
  # must be between -90 and 90
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#27
  def rot_x; end

  # @see rot_x
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#58
  def rot_x=(v); end

  # y rotation for the chart
  # must be between 0 and 360
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#39
  def rot_y; end

  # @see rot_y
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#72
  def rot_y=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#97
  def to_xml_string(str = T.unsafe(nil)); end

  private

  # Note: move this to Axlsx module if we find the smae pattern elsewhere.
  #
  # source://caxlsx//lib/axlsx/drawing/view_3D.rb#108
  def element_for_attribute(name, namespace = T.unsafe(nil)); end
end

# validation for depthPercent
#
# source://caxlsx//lib/axlsx/drawing/view_3D.rb#22
Axlsx::View3D::DEPTH_PERCENT_REGEX = T.let(T.unsafe(nil), Regexp)

# Validation for hPercent
#
# source://caxlsx//lib/axlsx/drawing/view_3D.rb#19
Axlsx::View3D::H_PERCENT_REGEX = T.let(T.unsafe(nil), Regexp)

# a vml drawing used for comments in excel.
#
# source://caxlsx//lib/axlsx/drawing/vml_drawing.rb#3
class Axlsx::VmlDrawing
  # creates a new Vml Drawing object.
  #
  # @param comments [Comments] the comments object this drawing is associated with
  # @raise [ArgumentError]
  # @return [VmlDrawing] a new instance of VmlDrawing
  #
  # source://caxlsx//lib/axlsx/drawing/vml_drawing.rb#6
  def initialize(comments); end

  # The part name for this vml drawing
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/vml_drawing.rb#14
  def pn; end

  # serialize the vml_drawing to xml.
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/vml_drawing.rb#21
  def to_xml_string(str = T.unsafe(nil)); end
end

# A VmlShape is used to position and render a comment.
#
# source://caxlsx//lib/axlsx/drawing/vml_shape.rb#3
class Axlsx::VmlShape
  include ::Axlsx::OptionsParser
  include ::Axlsx::Accessors
  extend ::Axlsx::Accessors::ClassMethods

  # Creates a new VmlShape
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [VmlShape] a new instance of VmlShape
  # @yield [_self]
  # @yieldparam _self [Axlsx::VmlShape] the object that the method was called on
  #
  # source://caxlsx//lib/axlsx/drawing/vml_shape.rb#18
  def initialize(options = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def bottom_offset; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def bottom_offset=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def bottom_row; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def bottom_row=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def column; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def column=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def left_column; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def left_column=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def left_offset; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def left_offset=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def right_column; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def right_column=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def right_offset; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def right_offset=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def row; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def row=(value); end

  # serialize the shape to a string
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/drawing/vml_shape.rb#38
  def to_xml_string(str = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def top_offset; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def top_offset=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def top_row; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def top_row=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def visible; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def visible=(value); end
end

# workbook content type
#
# source://caxlsx//lib/axlsx/util/constants.rb#114
Axlsx::WORKBOOK_CT = T.let(T.unsafe(nil), String)

# workbook part
#
# source://caxlsx//lib/axlsx/util/constants.rb#180
Axlsx::WORKBOOK_PN = T.let(T.unsafe(nil), String)

# workbook rels namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#60
Axlsx::WORKBOOK_R = T.let(T.unsafe(nil), String)

# workbook rels part
#
# source://caxlsx//lib/axlsx/util/constants.rb#201
Axlsx::WORKBOOK_RELS_PN = T.let(T.unsafe(nil), String)

# worksheet content type
#
# source://caxlsx//lib/axlsx/util/constants.rb#129
Axlsx::WORKSHEET_CT = T.let(T.unsafe(nil), String)

# worksheet maximum name length
#
# source://caxlsx//lib/axlsx/util/constants.rb#276
Axlsx::WORKSHEET_MAX_NAME_LENGTH = T.let(T.unsafe(nil), Integer)

# worksheet name forbidden characters
#
# source://caxlsx//lib/axlsx/util/constants.rb#279
Axlsx::WORKSHEET_NAME_FORBIDDEN_CHARS = T.let(T.unsafe(nil), Array)

# worksheet part
#
# source://caxlsx//lib/axlsx/util/constants.rb#204
Axlsx::WORKSHEET_PN = T.let(T.unsafe(nil), String)

# worksheet rels namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#63
Axlsx::WORKSHEET_R = T.let(T.unsafe(nil), String)

# worksheet rels part
#
# source://caxlsx//lib/axlsx/util/constants.rb#207
Axlsx::WORKSHEET_RELS_PN = T.let(T.unsafe(nil), String)

# The Workbook class is an xlsx workbook that manages worksheets, charts, drawings and styles.
# The following parts of the Office Open XML spreadsheet specification are not implimented in this version.
#
#   bookViews
#   calcPr
#   customWorkbookViews
#   definedNames
#   externalReferences
#   extLst
#   fileRecoveryPr
#   fileSharing
#   fileVersion
#   functionGroups
#   oleSize
#   pivotCaches
#   smartTagPr
#   smartTagTypes
#   webPublishing
#   webPublishObjects
#   workbookProtection
#   workbookPr*
#
#   *workbookPr is only supported to the extend of date1904
#
# source://caxlsx//lib/axlsx/workbook/workbook.rb#84
class Axlsx::Workbook
  # Creates a new Workbook.
  # The recommended way to work with workbooks is via Package#workbook.
  #
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Workbook] a new instance of Workbook
  # @yield [_self]
  # @yieldparam _self [Axlsx::Workbook] the object that the method was called on
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#229
  def initialize(options = T.unsafe(nil)); end

  # returns a range of cells in a worksheet
  # retrieve the cells from. e.g. range('Sheet1!A1:B2') will return an array of four cells [A1, A2, B1, B2] while range('Sheet1!A1') will return a single Cell.
  #
  # @param cell_def [String] The excel style reference defining the worksheet and cells. The range must specify the sheet to
  # @raise [ArgumentError]
  # @return [Cell, Array]
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#395
  def [](cell_def); end

  # Adds a defined name to this workbook
  #
  # @param formula [String] @see DefinedName
  # @param options [Hash] @see DefinedName
  # @return [DefinedName]
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#346
  def add_defined_name(formula, options); end

  # Adds a new WorkbookView
  #
  # @option options
  # @param options [Hash] a customizable set of options
  # @return WorkbookViews
  # @see WorkbookView#initialize
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#338
  def add_view(options = T.unsafe(nil)); end

  # Adds a worksheet to this workbook
  #
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Worksheet]
  # @see Worksheet#initialize
  # @yield [worksheet]
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#328
  def add_worksheet(options = T.unsafe(nil)); end

  # A helper to apply styles that were added using `worksheet.add_style`
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#197
  def apply_styles; end

  # Font size of bold fonts is multiplied with this
  # Used for automatic calculation of cell widths with bold text
  #
  # @return [Float]
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#289
  def bold_font_multiplier; end

  # source://caxlsx//lib/axlsx/workbook/workbook.rb#291
  def bold_font_multiplier=(v); end

  # A collection of charts associated with this workbook
  #
  # @note The recommended way to manage charts is Worksheet#add_chart
  # @return [SimpleTypedList]
  # @see Worksheet#add_chart
  # @see Chart
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#121
  def charts; end

  # A collection of comments associated with this workbook
  #
  # @note The recommended way to manage comments is WOrksheet#add_comment
  # @return [Comments]
  # @see Worksheet#add_comment
  # @see Comment
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#171
  def comments; end

  # Instance level access to the class variable 1904
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#250
  def date1904; end

  # see @date1904
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#253
  def date1904=(v); end

  # A collection of defined names for this workbook
  #
  # @note The recommended way to manage defined names is Workbook#add_defined_name
  # @return [DefinedNames]
  # @see DefinedName
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#162
  def defined_names; end

  # A collection of drawings associated with this workbook
  #
  # @note The recommended way to manage drawings is Worksheet#add_chart
  # @return [SimpleTypedList]
  # @see Worksheet#add_chart
  # @see Drawing
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#135
  def drawings; end

  # Whether to treat values starting with an equals sign as formulas or as literal strings.
  # Allowing user-generated data to be interpreted as formulas is a security risk.
  # See https://www.owasp.org/index.php/CSV_Injection for details.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#267
  def escape_formulas; end

  # Sets whether to treat values starting with an equals sign as formulas or as literal strings.
  #
  # @param value [Boolean] The value to set.
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#271
  def escape_formulas=(value); end

  # Font scale is calculated with this value (font_size / font_scale_divisor)
  # Used for automatic calculation of cell widths
  #
  # @return [Float]
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#299
  def font_scale_divisor; end

  # source://caxlsx//lib/axlsx/workbook/workbook.rb#301
  def font_scale_divisor=(v); end

  # A collection of images associated with this workbook
  #
  # @note The recommended way to manage images is Worksheet#add_image
  # @return [SimpleTypedList]
  # @see Worksheet#add_image
  # @see Pic
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#128
  def images; end

  # inserts a worksheet into this workbook at the position specified.
  # It the index specified is out of range, the worksheet will be added to the end of the
  # worksheets collection
  #
  # @option options
  # @option options
  # @param index The zero based position to insert the newly created worksheet
  # @param options [Hash] Options to pass into the worksheed during initialization.
  # @return [Worksheet]
  # @yield [worksheet]
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#314
  def insert_worksheet(index = T.unsafe(nil), options = T.unsafe(nil)); end

  # If true reverse the order in which the workbook is serialized
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#102
  def is_reversed; end

  # source://caxlsx//lib/axlsx/workbook/workbook.rb#104
  def is_reversed=(v); end

  # A collection of pivot tables associated with this workbook
  #
  # @note The recommended way to manage drawings is Worksheet#add_table
  # @return [SimpleTypedList]
  # @see Worksheet#add_table
  # @see Table
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#151
  def pivot_tables; end

  # The workbook relationships. This is managed automatically by the workbook
  #
  # @return [Relationships]
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#352
  def relationships; end

  # generates a shared string object against all cells in all worksheets.
  #
  # @return [SharedStringTable]
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#369
  def shared_strings; end

  # A quick helper to retrive a worksheet by name
  #
  # @param name [String] The name of the sheet you are looking for
  # @return [Worksheet] The sheet found, or nil
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#221
  def sheet_by_name(name); end

  # An array that holds all cells with styles
  #
  # @return Set
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#187
  def styled_cells; end

  # The styles associated with this workbook
  #
  # @note The recommended way to manage styles is Styles#add_style
  # @return [Styles]
  # @see Style#add_style
  # @see Style
  # @yield [@styles]
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#180
  def styles; end

  # Are the styles added with workbook.add_styles applied yet
  #
  # @return Boolean
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#193
  def styles_applied; end

  # Are the styles added with workbook.add_styles applied yet
  #
  # @return Boolean
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#193
  def styles_applied=(_arg0); end

  # A collection of tables associated with this workbook
  #
  # @note The recommended way to manage drawings is Worksheet#add_table
  # @return [SimpleTypedList]
  # @see Worksheet#add_table
  # @see Table
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#144
  def tables; end

  # Serialize the workbook
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#406
  def to_xml_string(str = T.unsafe(nil)); end

  # Indicates if the workbook should use autowidths or not.
  #
  # @note This gem no longer depends on RMagick for autowidth
  #   calculation. Thus the performance benefits of turning this off are
  #   marginal unless you are creating a very large sheet.
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#281
  def use_autowidth; end

  # see @use_autowidth
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#284
  def use_autowidth=(v = T.unsafe(nil)); end

  # When true, the Package will be generated with a shared string table. This may be required by some OOXML processors that do not
  # adhere to the ECMA specification that dictates string may be inline in the sheet.
  # Using this option will increase the time required to serialize the document as every string in every cell must be analzed and referenced.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#92
  def use_shared_strings; end

  # @see use_shared_strings
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#95
  def use_shared_strings=(v); end

  # A collection of views for this workbook
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#154
  def views; end

  # A collection of worksheets associated with this workbook.
  #
  # @note The recommended way to manage worksheets is add_worksheet
  # @return [SimpleTypedList]
  # @see Workbook#add_worksheet
  # @see Worksheet
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#114
  def worksheets; end

  # The xml:space attribute for the worksheet.
  # This determines how whitespace is handled withing the document.
  # The most relevant part being whitespace in the cell text.
  # allowed values are :preserve and :default. Axlsx uses :preserve unless
  # you explicily set this to :default.
  #
  # @return Symbol
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#379
  def xml_space; end

  # Sets the xml:space attribute for the worksheet
  #
  # @param space [Symbol] must be one of :preserve or :default
  # @see Worksheet#xml_space
  #
  # source://caxlsx//lib/axlsx/workbook/workbook.rb#386
  def xml_space=(space); end

  class << self
    # retrieves the date1904 attribute
    #
    # @return [Boolean]
    #
    # source://caxlsx//lib/axlsx/workbook/workbook.rb#261
    def date1904; end

    # Sets the date1904 attribute to the provided boolean
    #
    # @return [Boolean]
    #
    # source://caxlsx//lib/axlsx/workbook/workbook.rb#257
    def date1904=(v); end
  end
end

# source://caxlsx//lib/axlsx/workbook/workbook.rb#85
Axlsx::Workbook::BOLD_FONT_MULTIPLIER = T.let(T.unsafe(nil), Float)

# source://caxlsx//lib/axlsx/workbook/workbook.rb#86
Axlsx::Workbook::FONT_SCALE_DIVISOR = T.let(T.unsafe(nil), Float)

# A BookView defines the display properties for a workbook.
# Units for window widths and other dimensions are expressed in twips.
# Twip measurements are portable between different display resolutions.
# The formula is (screen pixels) * (20 * 72) / (logical device dpi),
# where the logical device dpi can be different for x and y coordinates.
#
# source://caxlsx//lib/axlsx/workbook/workbook_view.rb#27
class Axlsx::WorkbookView
  include ::Axlsx::SerializedAttributes
  include ::Axlsx::OptionsParser
  include ::Axlsx::Accessors
  extend ::Axlsx::SerializedAttributes::ClassMethods
  extend ::Axlsx::Accessors::ClassMethods

  # Creates a new BookView object
  #
  # @option [Symbol]
  # @option [Boolean]
  # @option [Boolean]
  # @option [Boolean]
  # @option [Boolean]
  # @option [Integer]
  # @option [Integer]
  # @option [Integer]
  # @option [Integer]
  # @option [Integer]
  # @option [Integer]
  # @option [Integer]
  # @option [Boolean]
  # @param options [Hash] A hash of key/value pairs that will be mapped to this instances attributes.
  # @param [Symbol] [Hash] a customizable set of options
  # @param [Boolean] [Hash] a customizable set of options
  # @param [Integer] [Hash] a customizable set of options
  # @return [WorkbookView] a new instance of WorkbookView
  # @yield [_self]
  # @yieldparam _self [Axlsx::WorkbookView] the object that the method was called on
  #
  # source://caxlsx//lib/axlsx/workbook/workbook_view.rb#47
  def initialize(options = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def active_tab; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def active_tab=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def auto_filter_date_grouping; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def auto_filter_date_grouping=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def first_sheet; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def first_sheet=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def minimized; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def minimized=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def show_horizontal_scroll; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def show_horizontal_scroll=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def show_sheet_tabs; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def show_sheet_tabs=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def show_vertical_scroll; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def show_vertical_scroll=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def tab_ratio; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def tab_ratio=(value); end

  # Serialize the WorkbookView
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/workbook_view.rb#69
  def to_xml_string(str = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def visibility; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def visibility=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def window_height; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def window_height=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def window_width; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def window_width=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def x_window; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def x_window=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def y_window; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def y_window=(value); end
end

# a simple types list of BookView objects
#
# source://caxlsx//lib/axlsx/workbook/workbook_views.rb#3
class Axlsx::WorkbookViews < ::Axlsx::SimpleTypedList
  # creates the book views object
  #
  # @return [WorkbookViews] a new instance of WorkbookViews
  #
  # source://caxlsx//lib/axlsx/workbook/workbook_views.rb#5
  def initialize; end

  # Serialize to xml
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/workbook_views.rb#12
  def to_xml_string(str = T.unsafe(nil)); end
end

# The Worksheet class represents a worksheet in the workbook.
#
# source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#5
class Axlsx::Worksheet
  include ::Axlsx::OptionsParser
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new worksheet.
  #
  # @note the recommended way to manage worksheets is Workbook#add_worksheet
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Worksheet] a new instance of Worksheet
  # @see Workbook#add_worksheet
  # @yield [_self]
  # @yieldparam _self [Axlsx::Worksheet] the object that the method was called on
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#19
  def initialize(wb, options = T.unsafe(nil)); end

  # Adds a row to the worksheet and updates auto fit data.
  #   (see https://www.owasp.org/index.php/CSV_Injection for details).
  #
  # @example - add a column offset when adding a row (inserts 'n' blank, unstyled columns before data)
  #   ws.add_row ['I wish', 'for a fish', 'on my fish wish dish'], offset: 3
  # @example - specify a fixed width for a column in your spreadsheet
  #   # The first column will ignore the content of this cell when calculating column autowidth.
  #   # The second column will include this text in calculating the columns autowidth
  #   # The third cell will set a fixed with of 80 for the column.
  #   # If you need to un-fix a column width, use :auto. That will recalculate the column width based on all content in the column
  #
  #   ws.add_row ['I wish', 'for a fish', 'on my fish wish dish'], :widths=>[:ignore, :auto, 80]
  # @example - specify a fixed height for a row
  #   ws.add_row ['I wish', 'for a fish', 'on my fish wish dish'], :height => 40
  # @example - create and use a style for all cells in the row
  #   blue = ws.styles.add_style :color => "#00FF00"
  #   ws.add_row [1, 2, 3], :style=>blue
  # @example - only style some cells
  #   blue = ws.styles.add_style :color => "#00FF00"
  #   red = ws.styles.add_style :color => "#FF0000"
  #   big = ws.styles.add_style :sz => 40
  #   ws.add_row ["red fish", "blue fish", "one fish", "two fish"], :style=>[red, blue, nil, big] # the last nil is optional
  # @example - force the second cell to be a float value
  #   ws.add_row [3, 4, 5], :types => [nil, :float]
  # @example - use << alias
  #   ws << [3, 4, 5], :types => [nil, :float]
  # @example - specify whether a row should escape formulas or not
  #   ws.add_row ['=IF(2+2=4,4,5)', 2, 3], :escape_formulas=>true
  # @example - specify whether a certain cells in a row should escape formulas or not
  #   ws.add_row ['=IF(2+2=4,4,5)', '=IF(13+13=4,4,5)'], :escape_formulas=>[true, false]
  # @example - put a vanilla row in your spreadsheet
  #   ws.add_row [1, 'fish on my pl', '8']
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Row]
  # @see Worksheet#column_widths
  # @yield [row]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#429
  def <<(values = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns the cell or cells defined using excel style A1:B3 references.
  #
  # @param cell_def [String|Integer] the string defining the cell or range of cells, or the rownumber
  # @return [Cell, Array]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#666
  def [](cell_def); end

  # Set the style for cells in a specific column
  #
  # @param cell [String|Array] references
  # @param border [Hash|Array|Symbol] options
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#606
  def add_border(cell_refs, options = T.unsafe(nil)); end

  # Adds a chart to this worksheets drawing. This is the recommended way to create charts for your worksheet. This method wraps the complexity of dealing with ooxml drawing, anchors, markers graphic frames chart objects and all the other dirty details.
  #
  # @note each chart type also specifies additional options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @param chart_type [Class]
  # @see Chart
  # @see Pie3DChart
  # @see Bar3DChart
  # @see Line3DChart
  # @see README for examples
  # @yield [chart]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#488
  def add_chart(chart_type, options = T.unsafe(nil)); end

  # Shortcut to worsksheet_comments#add_comment
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#508
  def add_comment(options = T.unsafe(nil)); end

  # Add conditional formatting to this worksheet.
  #
  # @example This would format column A whenever it is FALSE.
  #   # for a longer example, see examples/example_conditional_formatting.rb (link below)
  #   worksheet.add_conditional_formatting( "A1:A1048576", { :type => :cellIs, :operator => :equal, :formula => "FALSE", :dxfId => 1, :priority => 1 }
  # @param cells [String] The range to apply the formatting to
  # @param rules [Array|Hash] An array of hashes (or just one) to create Conditional formatting rules from.
  # @see ConditionalFormattingRule#initialize
  # @see file:examples/example_conditional_formatting.rb
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#449
  def add_conditional_formatting(cells, rules); end

  # Add data validation to this worksheet.
  #
  # @param cells [String] The cells the validation will apply to.
  # @param data_validation [hash] options defining the validation to apply.
  # @see examples/data_validation.rb for an example
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#461
  def add_data_validation(cells, data_validation); end

  # Adds a new hyperlink to the worksheet
  #
  # @param options [Hash] for the hyperlink
  # @return [WorksheetHyperlink]
  # @see WorksheetHyperlink for a list of options
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#471
  def add_hyperlink(options = T.unsafe(nil)); end

  # Adds a media item to the worksheets drawing
  #
  # @option [Hash]
  # @param [Hash] [Hash] a customizable set of options
  # @yield [image]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#514
  def add_image(options = T.unsafe(nil)); end

  # Adds a page break (row break) to the worksheet
  # should be added to the sheet.
  #
  # @example
  #   ws.add_page_break("A4")
  # @param cell A Cell object or excel style string reference indicating where the break
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#525
  def add_page_break(cell); end

  # @yield [pivot_tables.last]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#501
  def add_pivot_table(ref, range, options = T.unsafe(nil)); end

  # Adds a row to the worksheet and updates auto fit data.
  #   (see https://www.owasp.org/index.php/CSV_Injection for details).
  #
  # @example - add a column offset when adding a row (inserts 'n' blank, unstyled columns before data)
  #   ws.add_row ['I wish', 'for a fish', 'on my fish wish dish'], offset: 3
  # @example - specify a fixed width for a column in your spreadsheet
  #   # The first column will ignore the content of this cell when calculating column autowidth.
  #   # The second column will include this text in calculating the columns autowidth
  #   # The third cell will set a fixed with of 80 for the column.
  #   # If you need to un-fix a column width, use :auto. That will recalculate the column width based on all content in the column
  #
  #   ws.add_row ['I wish', 'for a fish', 'on my fish wish dish'], :widths=>[:ignore, :auto, 80]
  # @example - specify a fixed height for a row
  #   ws.add_row ['I wish', 'for a fish', 'on my fish wish dish'], :height => 40
  # @example - create and use a style for all cells in the row
  #   blue = ws.styles.add_style :color => "#00FF00"
  #   ws.add_row [1, 2, 3], :style=>blue
  # @example - only style some cells
  #   blue = ws.styles.add_style :color => "#00FF00"
  #   red = ws.styles.add_style :color => "#FF0000"
  #   big = ws.styles.add_style :sz => 40
  #   ws.add_row ["red fish", "blue fish", "one fish", "two fish"], :style=>[red, blue, nil, big] # the last nil is optional
  # @example - force the second cell to be a float value
  #   ws.add_row [3, 4, 5], :types => [nil, :float]
  # @example - use << alias
  #   ws << [3, 4, 5], :types => [nil, :float]
  # @example - specify whether a row should escape formulas or not
  #   ws.add_row ['=IF(2+2=4,4,5)', 2, 3], :escape_formulas=>true
  # @example - specify whether a certain cells in a row should escape formulas or not
  #   ws.add_row ['=IF(2+2=4,4,5)', '=IF(13+13=4,4,5)'], :escape_formulas=>[true, false]
  # @example - put a vanilla row in your spreadsheet
  #   ws.add_row [1, 'fish on my pl', '8']
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Row]
  # @see Worksheet#column_widths
  # @yield [row]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#429
  def add_row(values = T.unsafe(nil), options = T.unsafe(nil)); end

  # Set the style for cells in a specific column
  #
  # @param cell [String|Array] references
  # @param styles [Hash]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#585
  def add_style(cell_refs, *styles); end

  # needs documentation
  #
  # @yield [tables.last]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#495
  def add_table(ref, options = T.unsafe(nil)); end

  # A range that excel will apply an auto-filter to "A1:B3"
  # This will turn filtering on for the cells in the range.
  # The first row is considered the header, while subsequent rows are considered to be data.
  #
  # @return String
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#178
  def auto_filter; end

  # The auto filter range for the worksheet
  #
  # @param v [String]
  # @see auto_filter
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#334
  def auto_filter=(v); end

  # convenience method to access all cells in this worksheet
  #
  # @return [Array] cells
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#283
  def cells; end

  # A collection of column breaks added to this worksheet
  # add_page_break
  #
  # @note Please do not use this directly. Instead use
  # @see Worksheet#add_page_break
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#132
  def col_breaks; end

  # Set the style for cells in a specific column
  #
  # @note You can also specify the style for specific columns in the call to add_row by using an array for the :styles option
  # @option [Integer]
  # @param style [Integer] the cellXfs index
  # @param [Integer] [Hash] a customizable set of options
  # @param options [Hash]
  # @param index [Integer] the index of the column
  # @see Worksheet#add_row
  # @see README.md for an example
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#562
  def col_style(index, style, options = T.unsafe(nil)); end

  # returns the sheet data as columns
  # If you pass a block, it will be evaluated whenever a row does not have a
  # cell at a specific index. The block will be called with the row and column
  # index in the missing cell was found.
  #
  # @example
  #   cols { |row_index, column_index| puts "warn - row #{row_index} does not have a cell at #{column_index}" }
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#170
  def cols(&block); end

  # Column info for the sheet
  #
  # @return [SimpleTypedList]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#195
  def column_info; end

  # This is a helper method that Lets you specify a fixed width for multiple columns in a worksheet in one go.
  # Note that you must call column_widths AFTER adding data, otherwise the width will not be set successfully.
  # Setting a fixed column width to nil will revert the behaviour back to calculating the width for you on the next call to add_row.
  #
  # @example This would set the first and third column widhts but leave the second column in autofit state.
  #   ws.column_widths 7.2, nil, 3
  # @note For updating only a single column it is probably easier to just set the width of the ws.column_info[col_index].width directly
  # @param widths [Integer|Float|nil]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#545
  def column_widths(*widths); end

  # The a shortcut to the worksheet_comments list of comments
  #
  # @return [Array|SimpleTypedList]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#152
  def comments; end

  # The dimensions of a worksheet. This is not actually a required element by the spec,
  # but at least a few other document readers expect this for conversion
  #
  # @return [Dimension]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#311
  def dimension; end

  # The drawing associated with this worksheet.
  #
  # @note the recommended way to work with drawings and charts is Worksheet#add_chart
  # @return [Drawing]
  # @see Worksheet#add_chart
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#372
  def drawing; end

  # Whether to treat values starting with an equals sign as formulas or as literal strings.
  # Allowing user-generated data to be interpreted as formulas is a security risk.
  # See https://www.owasp.org/index.php/CSV_Injection for details.
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#53
  def escape_formulas; end

  # Sets whether to treat values starting with an equals sign as formulas or as literal strings.
  #
  # @param value [Boolean] The value to set.
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#58
  def escape_formulas=(value); end

  # Indicates if the worksheet will be fit by witdh or height to a specific number of pages.
  # To alter the width or height for page fitting, please use page_setup.fit_to_widht or page_setup.fit_to_height.
  # If you want the worksheet to fit on more pages (e.g. 2x2), set {PageSetup#fit_to_width} and {PageSetup#fit_to_height} accordingly.
  #
  # @return [Boolean] Boolean
  # @see #page_setup
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#187
  def fit_to_page?; end

  # Options for headers and footers.
  #
  # @example
  #   wb = Axlsx::Package.new.workbook
  #   # would generate something like: "file.xlsx : sheet_name 2 of 7 date with timestamp"
  #   header = {:different_odd_ => false, :odd_header => "&L&F : &A&C&Pof%N%R%D %T"}
  #   ws = wb.add_worksheet :header_footer => header
  # @return [HeaderFooter]
  # @see HeaderFooter#initialize
  # @yield [@header_footer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#275
  def header_footer; end

  # A typed collection of hyperlinks associated with this worksheet
  #
  # @return [WorksheetHyperlinks]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#146
  def hyperlinks; end

  # The index of this worksheet in the owning Workbook's worksheets list.
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#364
  def index; end

  # Initalizes page margin, setup and print options
  #
  # @param options [Hash] Options passed in from the initializer
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#34
  def initialize_page_options(options); end

  # Creates merge information for this worksheet.
  # Cells can be merged by calling the merge_cells method on a worksheet.
  #
  # @example This would merge the three cells C1..E1 #
  #   worksheet.merge_cells "C1:E1"
  #   # you can also provide an array of cells to be merged
  #   worksheet.merge_cells worksheet.rows.first.cells[(2..4)]
  #   #alternatively you can do it from a single cell
  #   worksheet["C1"].merge worksheet["E1"]
  # @param cells [Array, string]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#296
  def merge_cells(cells); end

  # The name of the worksheet
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#45
  def name; end

  # The name of the worksheet
  # The name of a worksheet must be unique in the workbook, and must not exceed the number
  # of characters defined in Axlsx::WORKSHEET_MAX_NAME_LENGTH
  #
  # @param name [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#326
  def name=(name); end

  # returns the column and row index for a named based cell
  #
  # @param name [String] The cell or cell range to return. "A1" will return the first cell of the first row.
  # @return [Cell]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#689
  def name_to_cell(name); end

  # shortcut level to specify the outline level for a series of columns
  # Oulining is what lets you add collapse and expand to a data set.
  #
  # @param start_index [Integer] The zero based index of the first column of outlining.
  # @param end_index [Integer] The zero based index of  the last column to be outlined
  # @param level [integer] The level of outline to apply
  # @param collapsed [Integer] The initial collapsed state of the outline group
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#732
  def outline_level_columns(start_index, end_index, level = T.unsafe(nil), collapsed = T.unsafe(nil)); end

  # shortcut level to specify the outline level for a series of rows
  # Oulining is what lets you add collapse and expand to a data set.
  #
  # @param start_index [Integer] The zero based index of the first row of outlining.
  # @param end_index [Integer] The zero based index of  the last row to be outlined
  # @param level [integer] The level of outline to apply
  # @param collapsed [Integer] The initial collapsed state of the outline group
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#722
  def outline_level_rows(start_index, end_index, level = T.unsafe(nil), collapsed = T.unsafe(nil)); end

  # Page margins for printing the worksheet.
  #
  # @example
  #   wb = Axlsx::Package.new.workbook
  #   # using options when creating the worksheet.
  #   ws = wb.add_worksheet :page_margins => {:left => 1.9, :header => 0.1}
  #
  #   # use the set method of the page_margins object
  #   ws.page_margins.set(:bottom => 3, :footer => 0.7)
  #
  #   # set page margins in a block
  #   ws.page_margins do |margins|
  #   margins.right = 6
  #   margins.top = 0.2
  #   end
  # @return [PageMargins]
  # @see PageMargins#initialize
  # @yield [@page_margins]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#215
  def page_margins; end

  # Page setup settings for printing the worksheet.
  #
  # @example
  #   wb = Axlsx::Package.new.workbook
  #
  #   # using options when creating the worksheet.
  #   ws = wb.add_worksheet :page_setup => {:fit_to_width => 2, :orientation => :landscape}
  #
  #   # use the set method of the page_setup object
  #   ws.page_setup.set(:paper_width => "297mm", :paper_height => "210mm")
  #
  #   # setup page in a block
  #   ws.page_setup do |page|
  #   page.scale = 80
  #   page.orientation = :portrait
  #   end
  # @return [PageSetup]
  # @see PageSetup#initialize
  # @yield [@page_setup]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#238
  def page_setup; end

  # The pivot tables in this worksheet
  #
  # @return [Array] of Table
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#124
  def pivot_tables; end

  # The part name of this worksheet
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#345
  def pn; end

  # Accessor for controlling whether leading and trailing spaces in cells are
  # preserved or ignored. The default is to preserve spaces.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#341
  def preserve_spaces; end

  # Accessor for controlling whether leading and trailing spaces in cells are
  # preserved or ignored. The default is to preserve spaces.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#341
  def preserve_spaces=(_arg0); end

  # Options for printing the worksheet.
  #
  # @example
  #   wb = Axlsx::Package.new.workbook
  #   # using options when creating the worksheet.
  #   ws = wb.add_worksheet :print_options => {:grid_lines => true, :horizontal_centered => true}
  #
  #   # use the set method of the page_margins object
  #   ws.print_options.set(:headings => true)
  #
  #   # set page margins in a block
  #   ws.print_options do |options|
  #   options.horizontal_centered = true
  #   options.vertical_centered = true
  #   end
  # @return [PrintOptions]
  # @see PrintOptions#initialize
  # @yield [@print_options]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#260
  def print_options; end

  # Adds a new protected cell range to the worksheet. Note that protected ranges are only in effect when sheet protection is enabled.
  #
  # @note When using an array of cells, a contiguous range is created from the minimum top left to the maximum top bottom of the cells provided.
  # @param cells [String|Array] The string reference for the cells to protect or an array of cells.
  # @return [ProtectedRange]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#304
  def protect_range(cells); end

  # The relationship id of this worksheet.
  #
  # @return [String]
  # @see Relationship#Id
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#358
  def rId; end

  # The worksheet relationships. This is managed automatically by the worksheet
  #
  # @return [Relationships]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#653
  def relationships; end

  # The relationship part name of this worksheet
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#351
  def rels_pn; end

  # A collection of row breaks added to this worksheet
  # add_page_break
  #
  # @note Please do not use this directly. Instead use
  # @see Worksheet#add_page_break
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#140
  def row_breaks; end

  # Set the style for cells in a specific row
  #
  # @note You can also specify the style in the add_row call
  # @option [Integer]
  # @param style [Integer] the cellXfs index
  # @param [Integer] [Hash] a customizable set of options
  # @param options [Hash] the options used when applying the style
  # @param index [Integer] or range of indexes in the table
  # @see Worksheet#add_row
  # @see README.md for an example
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#576
  def row_style(index, style, options = T.unsafe(nil)); end

  # The rows in this worksheet
  #
  # @note The recommended way to manage rows is Worksheet#add_row
  # @return [SimpleTypedList]
  # @see Worksheet#add_row
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#160
  def rows; end

  # The sheet calculation properties
  #
  # @return [SheetCalcPr]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#81
  def sheet_calc_pr; end

  # The sheet format pr for this worksheet
  #
  # @return [SheetFormatPr]
  # @see [SheetFormatPr]
  # @yield [@sheet_format_pr]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#106
  def sheet_format_pr; end

  # The sheet properties for this workbook.
  # Currently only pageSetUpPr -> fitToPage is implemented
  #
  # @return [SheetPr]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#318
  def sheet_pr; end

  # The sheet protection object for this workbook
  #
  # @return [SheetProtection]
  # @see SheetProtection
  # @yield [@sheet_protection]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#88
  def sheet_protection; end

  # The sheet view object for this worksheet
  #
  # @return [SheetView]
  # @see [SheetView]
  # @yield [@sheet_view]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#97
  def sheet_view; end

  # The visibility of this sheet
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#75
  def state; end

  # Specifies the visible state of this sheet. Allowed states are
  # :visible, :hidden or :very_hidden. The default value is :visible.
  #
  # Worksheets in the :hidden state can be shown using the sheet formatting properties in excel.
  # :very_hidden sheets should be inaccessible to end users.
  #
  # @param sheet_state [Symbol] The visible state for this sheet.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#69
  def state=(sheet_state); end

  # Shortcut method to access workbook styles
  #
  # This lets us do stuff like:
  #
  # @example
  #   p = Axlsx::Package.new
  #   p.workbook.add_worksheet(:name => 'foo') do |sheet|
  #   my_style = sheet.styles.add_style { :bg_color => "FF0000" }
  #   sheet.add_row ['Oh No!'], :styles => my_style
  #   end
  #   p.serialize 'foo.xlsx'
  # @note The XLSX format does not support worksheet-specific styles. Even when using this method
  #   you're still working with the single global {Axlsx::Styles} object in the workbook.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#712
  def styles; end

  # The tables in this worksheet
  #
  # @return [Array] of Table
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#118
  def tables; end

  # Returns a sheet node serialization for this sheet in the workbook.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#629
  def to_sheet_node_xml_string(str = T.unsafe(nil)); end

  # Serializes the worksheet object to an xml string
  # This intentionally does not use nokogiri for performance reasons
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#640
  def to_xml_string(str = T.unsafe(nil)); end

  # The workbook that owns this worksheet
  #
  # @return [Workbook]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#114
  def workbook; end

  private

  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#851
  def add_autofilter_defined_name_to_workbook; end

  # conditional formattings
  #
  # @return [Array]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#799
  def conditional_formattings; end

  # data validations array
  #
  # @return [Array]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#805
  def data_validations; end

  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#847
  def find_or_create_column_info(index); end

  # merged cells array
  #
  # @return [Array]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#811
  def merged_cells; end

  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#742
  def outline(collection, range, level = T.unsafe(nil), collapsed = T.unsafe(nil)); end

  # A collection of protected ranges in the worksheet
  #
  # @note The recommended way to manage protected ranges is with Worksheet#protect_range
  # @return [SimpleTypedList] The protected ranges for this worksheet
  # @see Worksheet#protect_range
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#792
  def protected_ranges; end

  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#775
  def range(*cell_def); end

  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#766
  def serializable_parts; end

  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#821
  def sheet_data; end

  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#837
  def update_column_info(cells, widths = T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#752
  def validate_sheet_name(name); end

  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#835
  def workbook=(v); end

  # The comments associated with this worksheet
  #
  # @return [SimpleTypedList]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#831
  def worksheet_comments; end

  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#825
  def worksheet_drawing; end

  # Helper method for parsingout the root node for worksheet
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#817
  def worksheet_node; end

  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet.rb#738
  def xml_space; end
end

# A wraper class for comments that defines its on worksheet
# serailization
#
# source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_comments.rb#4
class Axlsx::WorksheetComments
  # Creates a new WorksheetComments object
  # param [Worksheet] worksheet The worksheet comments in thes object belong to
  #
  # @raise [ArugumentError]
  # @return [WorksheetComments] a new instance of WorksheetComments
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_comments.rb#7
  def initialize(worksheet); end

  # Adds a comment
  #
  # @param options [Hash]
  # @see Comments#add_comment
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_comments.rb#24
  def add_comment(options = T.unsafe(nil)); end

  # The comments for this worksheet.
  #
  # @return [Comments]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_comments.rb#17
  def comments; end

  # The relationship id of the VML drawing that will render the comments.
  #
  # @return [String]
  # @see Relationship#Id
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_comments.rb#45
  def drawing_rId; end

  # Helper method to tell us if there are comments in the comments collection
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_comments.rb#38
  def has_comments?; end

  # The relationships defined by this objects comments collection
  #
  # @return [Relationships]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_comments.rb#30
  def relationships; end

  # Seraalize the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_comments.rb#52
  def to_xml_string(str = T.unsafe(nil)); end

  # Returns the value of attribute worksheet.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_comments.rb#13
  def worksheet; end
end

# This is a utility class for serialing the drawing node in a
# worksheet. Drawing objects have their own serialization that exports
# a drawing document. This is only for the single node in the
# worksheet
#
# source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_drawing.rb#6
class Axlsx::WorksheetDrawing
  # Creates a new WorksheetDrawing
  #
  # @param worksheet [Worksheet]
  # @raise [ArgumentError]
  # @return [WorksheetDrawing] a new instance of WorksheetDrawing
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_drawing.rb#9
  def initialize(worksheet); end

  # adds a chart to the drawing object
  #
  # @param chart_type [Class] The type of chart to add
  # @param options [Hash] Options to pass on to the drawing and chart
  # @see Worksheet#add_chart
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_drawing.rb#24
  def add_chart(chart_type, options); end

  # adds an image to the drawing object
  #
  # @param options [Hash] Options to pass on to the drawing and image
  # @see Worksheet#add_image
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_drawing.rb#32
  def add_image(options); end

  # Returns the value of attribute drawing.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_drawing.rb#18
  def drawing; end

  # helper method to tell us if the drawing has something in it or not
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_drawing.rb#39
  def has_drawing?; end

  # The relationship instance for this drawing.
  #
  # @return [Relationship]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_drawing.rb#45
  def relationship; end

  # Serialize the drawing for the worksheet
  #
  # @param str [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_drawing.rb#53
  def to_xml_string(str = T.unsafe(nil)); end

  # Returns the value of attribute worksheet.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_drawing.rb#16
  def worksheet; end
end

# A worksheet hyperlink object. Note that this is not the same as a drawing hyperlink object.
#
# source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_hyperlink.rb#3
class Axlsx::WorksheetHyperlink
  include ::Axlsx::OptionsParser
  include ::Axlsx::Accessors
  include ::Axlsx::SerializedAttributes
  extend ::Axlsx::Accessors::ClassMethods
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new hyperlink object.
  #
  # @note the preferred way to add hyperlinks to your worksheet is the Worksheet#add_hyperlink method
  # @option [String]
  # @option [String]
  # @option [String]
  # @option [Symbol]
  # @option [String|Cell]
  # @param options [Hash] options to use when creating this hyperlink
  # @param worksheet [Worksheet] the Worksheet that owns this hyperlink
  # @param [String] [Hash] a customizable set of options
  # @param [Symbol] [Hash] a customizable set of options
  # @param [String|Cell] [Hash] a customizable set of options
  # @return [WorksheetHyperlink] a new instance of WorksheetHyperlink
  # @yield [_self]
  # @yieldparam _self [Axlsx::WorksheetHyperlink] the object that the method was called on
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_hyperlink.rb#16
  def initialize(worksheet, options = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def display; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def display=(value); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def location; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def location=(value); end

  # The values to be used in serialization based on the target.
  # location should only be specified for non-external targets.
  # r:id should only be specified for external targets.
  #
  # @return [Hash]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_hyperlink.rb#69
  def location_or_id; end

  # Cell location of hyperlink on worksheet.
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_hyperlink.rb#30
  def ref; end

  # Sets the cell location of this hyperlink in the worksheet
  #
  # @param cell_reference [String|Cell] The string reference or cell that defines where this hyperlink shows in the worksheet.
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_hyperlink.rb#40
  def ref=(cell_reference); end

  # The relationship instance for this hyperlink.
  # A relationship is only required if `@target` is `:external`. If not, this method will simply return `nil`.
  #
  # @return [Relationship]
  # @see #target=
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_hyperlink.rb#50
  def relationship; end

  # Sets the target for this hyperlink. Anything other than :external instructs the library to treat the location as an in-workbook reference.
  #
  # @param target [Symbol]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_hyperlink.rb#34
  def target=(target); end

  # Seralize the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_hyperlink.rb#59
  def to_xml_string(str = T.unsafe(nil)); end

  # source://caxlsx//lib/axlsx/util/accessors.rb#55
  def tooltip; end

  # source://caxlsx//lib/axlsx/util/accessors.rb#57
  def tooltip=(value); end
end

# A collection of hyperlink objects for a worksheet
#
# source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_hyperlinks.rb#3
class Axlsx::WorksheetHyperlinks < ::Axlsx::SimpleTypedList
  # Creates a new Hyperlinks collection
  #
  # @param worksheet [Worksheet] the worksheet that owns these hyperlinks
  # @return [WorksheetHyperlinks] a new instance of WorksheetHyperlinks
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_hyperlinks.rb#6
  def initialize(worksheet); end

  # Creates and adds a new hyperlink based on the options provided
  #
  # @return [WorksheetHyperlink]
  # @see WorksheetHyperlink#initialize
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_hyperlinks.rb#15
  def add(options); end

  # The relationships required by this collection's hyperlinks
  #
  # @return Array
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_hyperlinks.rb#22
  def relationships; end

  # seralize the collection of hyperlinks
  #
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/workbook/worksheet/worksheet_hyperlinks.rb#30
  def to_xml_string(str = T.unsafe(nil)); end
end

# xml content type
#
# source://caxlsx//lib/axlsx/util/constants.rb#126
Axlsx::XML_CT = T.let(T.unsafe(nil), String)

# xml content type extensions
#
# source://caxlsx//lib/axlsx/util/constants.rb#165
Axlsx::XML_EX = T.let(T.unsafe(nil), String)

# spreadsheetML namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#6
Axlsx::XML_NS = T.let(T.unsafe(nil), String)

# drawing namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#39
Axlsx::XML_NS_A = T.let(T.unsafe(nil), String)

# chart namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#42
Axlsx::XML_NS_C = T.let(T.unsafe(nil), String)

# relationships namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#45
Axlsx::XML_NS_R = T.let(T.unsafe(nil), String)

# content-types namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#9
Axlsx::XML_NS_T = T.let(T.unsafe(nil), String)

# spreadsheet drawing namespace
#
# source://caxlsx//lib/axlsx/util/constants.rb#36
Axlsx::XML_NS_XDR = T.let(T.unsafe(nil), String)

# The Xf class defines a formatting record for use in Styles. The recommended way to manage styles for your workbook is with Styles#add_style
#
# @see Styles#add_style
#
# source://caxlsx//lib/axlsx/stylesheet/xf.rb#4
class Axlsx::Xf
  include ::Axlsx::SerializedAttributes
  include ::Axlsx::OptionsParser
  extend ::Axlsx::SerializedAttributes::ClassMethods

  # Creates a new Xf object
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Xf] a new instance of Xf
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#25
  def initialize(options = T.unsafe(nil)); end

  # The cell alignment for this style
  #
  # @return [CellAlignment]
  # @see CellAlignment
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#36
  def alignment; end

  # @see Xf#alignment
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#96
  def alignment=(v); end

  # Indicates if the alignment options should be applied
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#89
  def applyAlignment; end

  # @see applyAlignment
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#127
  def applyAlignment=(v); end

  # indicates if the borderId should be applied
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#85
  def applyBorder; end

  # @see applyBorder
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#124
  def applyBorder=(v); end

  # indicates if the fillId should be applied
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#81
  def applyFill; end

  # @see applyFill
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#121
  def applyFill=(v); end

  # indicates if the fontId should be applied
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#77
  def applyFont; end

  # @see applyFont
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#119
  def applyFont=(v); end

  # indicates if the numFmtId should be applied
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#73
  def applyNumberFormat; end

  # @see applyNumberFormat
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#117
  def applyNumberFormat=(v); end

  # Indicates if the protection options should be applied
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#93
  def applyProtection; end

  # @see applyProtection
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#130
  def applyProtection=(v); end

  # index (0 based) of the border to be used in this style
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#57
  def borderId; end

  # @see borderId
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#109
  def borderId=(v); end

  # index (0 based) of the fill to be used in this style
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#53
  def fillId; end

  # @see fillId
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#107
  def fillId=(v); end

  # index (0 based) of the font to be used in this style
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#49
  def fontId; end

  # @see fontId
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#105
  def fontId=(v); end

  # id of the numFmt to apply to this style
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#45
  def numFmtId; end

  # @see numFmtId
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#102
  def numFmtId=(v); end

  # indicates if the cell has a pivot table drop down button
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#69
  def pivotButton; end

  # @see pivotButton
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#115
  def pivotButton=(v); end

  # The cell protection for this style
  #
  # @return [CellProtection]
  # @see CellProtection
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#41
  def protection; end

  # @see protection
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#99
  def protection=(v); end

  # indecates if text should be prefixed by a single quote in the cell
  #
  # @return [Boolean]
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#65
  def quotePrefix; end

  # @see quotePrefix
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#113
  def quotePrefix=(v); end

  # Serializes the object
  #
  # @param str [String]
  # @return [String]
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#135
  def to_xml_string(str = T.unsafe(nil)); end

  # index (0 based) of cellStylesXfs item to be used in this style. Only applies to cellXfs items
  #
  # @return [Integer]
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#61
  def xfId; end

  # @see xfId
  #
  # source://caxlsx//lib/axlsx/stylesheet/xf.rb#111
  def xfId=(v); end
end

# The ZipCommand class supports zipping the Excel file contents using
# a binary zip program instead of RubyZip's `Zip::OutputStream`.
#
# The methods provided here mimic `Zip::OutputStream` so that `ZipCommand` can
# be used as a drop-in replacement. Note that method signatures are not
# identical to `Zip::OutputStream`, they are only sufficiently close so that
# `ZipCommand` and `Zip::OutputStream` can be interchangeably used within
# `caxlsx`.
#
# source://caxlsx//lib/axlsx/util/zip_command.rb#13
class Axlsx::ZipCommand
  # @return [ZipCommand] a new instance of ZipCommand
  #
  # source://caxlsx//lib/axlsx/util/zip_command.rb#17
  def initialize(zip_command); end

  # Write to a buffer that will be written to the current entry
  #
  # source://caxlsx//lib/axlsx/util/zip_command.rb#44
  def <<(content); end

  # Create a temporary directory for writing files to.
  #
  # The directory and its contents are removed at the end of the block.
  #
  # source://caxlsx//lib/axlsx/util/zip_command.rb#26
  def open(output, &block); end

  # Closes the current entry and opens a new for writing.
  #
  # source://caxlsx//lib/axlsx/util/zip_command.rb#36
  def put_next_entry(entry); end

  # Write to a buffer that will be written to the current entry
  #
  # source://caxlsx//lib/axlsx/util/zip_command.rb#44
  def write(content); end

  private

  # source://caxlsx//lib/axlsx/util/zip_command.rb#51
  def write_file; end

  # source://caxlsx//lib/axlsx/util/zip_command.rb#60
  def zip_parts(output); end
end

# Raised when the zip command exits with a non-zero status.
#
# source://caxlsx//lib/axlsx/util/zip_command.rb#15
class Axlsx::ZipCommand::ZipError < ::StandardError; end
