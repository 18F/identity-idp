# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rqrcode_core` gem.
# Please instead update this file by running `bin/tapioca gem rqrcode_core`.


# source://rqrcode_core//lib/rqrcode_core.rb#3
module RQRCodeCore; end

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_alphanumeric.rb#4
RQRCodeCore::ALPHANUMERIC = T.let(T.unsafe(nil), Array)

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_numeric.rb#4
RQRCodeCore::NUMERIC = T.let(T.unsafe(nil), Array)

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_8bit_byte.rb#4
class RQRCodeCore::QR8bitByte
  # @return [QR8bitByte] a new instance of QR8bitByte
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_8bit_byte.rb#5
  def initialize(data); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_8bit_byte.rb#9
  def write(buffer); end
end

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_alphanumeric.rb#10
class RQRCodeCore::QRAlphanumeric
  # @return [QRAlphanumeric] a new instance of QRAlphanumeric
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_alphanumeric.rb#11
  def initialize(data); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_alphanumeric.rb#23
  def write(buffer); end

  class << self
    # @return [Boolean]
    #
    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_alphanumeric.rb#19
    def valid_data?(data); end
  end
end

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_bit_buffer.rb#4
class RQRCodeCore::QRBitBuffer
  # @return [QRBitBuffer] a new instance of QRBitBuffer
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_bit_buffer.rb#10
  def initialize(version); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_bit_buffer.rb#49
  def alphanumeric_encoding_start(length); end

  # Returns the value of attribute buffer.
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_bit_buffer.rb#5
  def buffer; end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_bit_buffer.rb#44
  def byte_encoding_start(length); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_bit_buffer.rb#72
  def end_of_message(max_data_bits); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_bit_buffer.rb#16
  def get(index); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_bit_buffer.rb#27
  def get_length_in_bits; end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_bit_buffer.rb#54
  def numeric_encoding_start(length); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_bit_buffer.rb#59
  def pad_until(prefered_size); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_bit_buffer.rb#21
  def put(num, length); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_bit_buffer.rb#31
  def put_bit(bit); end
end

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_bit_buffer.rb#7
RQRCodeCore::QRBitBuffer::PAD0 = T.let(T.unsafe(nil), Integer)

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_bit_buffer.rb#8
RQRCodeCore::QRBitBuffer::PAD1 = T.let(T.unsafe(nil), Integer)

# == Creation
#
# QRCode objects expect only one required constructor parameter
# and an optional hash of any other. Here's a few examples:
#
#  qr = RQRCodeCore::QRCode.new('hello world')
#  qr = RQRCodeCore::QRCode.new('hello world', size: 1, level: :m, mode: :alphanumeric)
#
# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#83
class RQRCodeCore::QRCode
  extend ::Gem::Deprecate

  # Expects a string or array (for multi-segment encoding) to be parsed in, other args are optional
  #
  #   # data - the string, QRSegment or array of Hashes (with data:, mode: keys) you wish to encode
  #   # size - the size (Integer) of the QR Code (defaults to smallest size needed to encode the data)
  #   # max_size - the max_size (Integer) of the QR Code (default RQRCodeCore::QRUtil.max_size)
  #   # level - the error correction level, can be:
  #      * Level :l 7%  of code can be restored
  #      * Level :m 15% of code can be restored
  #      * Level :q 25% of code can be restored
  #      * Level :h 30% of code can be restored (default :h)
  #   # mode - the mode of the QR Code (defaults to alphanumeric or byte_8bit, depending on the input data, only used when data is a string):
  #      * :number
  #      * :alphanumeric
  #      * :byte_8bit
  #      * :kanji
  #
  #   qr = RQRCodeCore::QRCode.new('hello world', size: 1, level: :m, mode: :alphanumeric)
  #   segment_qr = QRCodeCore::QRCode.new({ data: 'foo', mode: :byte_8bit })
  #   multi_qr = RQRCodeCore::QRCode.new([{ data: 'foo', mode: :byte_8bit }, { data: 'bar1', mode: :alphanumeric }])
  #
  # @return [QRCode] a new instance of QRCode
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#106
  def initialize(data, *args); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#151
  def _deprecated_dark?(row, col); end

  # <tt>checked?</tt> is called with a +col+ and +row+ parameter. This will
  # return true or false based on whether that coordinate exists in the
  # matrix returned. It would normally be called while iterating through
  # <tt>modules</tt>. A simple example would be:
  #
  #  instance.checked?( 10, 10 ) => true
  #
  # @return [Boolean]
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#151
  def checked?(row, col); end

  # <tt>checked?</tt> is called with a +col+ and +row+ parameter. This will
  # return true or false based on whether that coordinate exists in the
  # matrix returned. It would normally be called while iterating through
  # <tt>modules</tt>. A simple example would be:
  #
  #  instance.checked?( 10, 10 ) => true
  #
  # @return [Boolean]
  def dark?(*args, **_arg1, &block); end

  # Return a symbol for current error connection level
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#213
  def error_correction_level; end

  # Public overide as default inspect is very verbose
  #
  #  RQRCodeCore::QRCode.new('my string to generate', size: 4, level: :h)
  #  => QRCodeCore: @data='my string to generate', @error_correct_level=2, @version=4, @module_count=33
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#208
  def inspect; end

  # Return a symbol in QRMODE.keys for current mode used
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#223
  def mode; end

  # Returns the value of attribute module_count.
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#84
  def module_count; end

  # Returns the value of attribute modules.
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#84
  def modules; end

  # Return true if this QR Code includes multiple encoded segments
  #
  # @return [Boolean]
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#218
  def multi_segment?; end

  # This is a public method that returns the QR Code you have
  # generated as a string. It will not be able to be read
  # in this format by a QR Code reader, but will give you an
  # idea if the final outout. It takes two optional args
  # +:dark+ and +:light+ which are there for you to choose
  # how the output looks. Here's an example of it's use:
  #
  #  instance.to_s =>
  #  xxxxxxx x  x x   x x  xx  xxxxxxx
  #  x     x  xxx  xxxxxx xxx  x     x
  #  x xxx x  xxxxx x       xx x xxx x
  #
  #  instance.to_s( dark: 'E', light: 'Q' ) =>
  #  EEEEEEEQEQQEQEQQQEQEQQEEQQEEEEEEE
  #  EQQQQQEQQEEEQQEEEEEEQEEEQQEQQQQQE
  #  EQEEEQEQQEEEEEQEQQQQQQQEEQEQEEEQE
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#179
  def to_s(*args); end

  # Returns the value of attribute version.
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#84
  def version; end

  protected

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#236
  def make; end

  private

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#419
  def extract_options!(arr); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#287
  def get_best_mask_pattern; end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#255
  def make_impl(test, mask_pattern); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#368
  def map_data(data, mask_pattern); end

  # @raise [QRCodeRunTimeError]
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#407
  def minimum_version(limit: T.unsafe(nil), version: T.unsafe(nil)); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#336
  def place_format_info(test, mask_pattern); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#309
  def place_position_adjust_pattern; end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#270
  def place_position_probe_pattern(row, col); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#303
  def place_timing_pattern; end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#326
  def place_version_info(test); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#243
  def prepare_common_patterns; end

  class << self
    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#424
    def count_max_data_bits(rs_blocks); end

    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#449
    def create_bytes(buffer, rs_blocks); end

    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#432
    def create_data(version, error_correct_level, data_list); end
  end
end

# StandardErrors
#
# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#70
class RQRCodeCore::QRCodeArgumentError < ::ArgumentError; end

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#72
class RQRCodeCore::QRCodeRunTimeError < ::RuntimeError; end

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#17
RQRCodeCore::QRERRORCORRECTLEVEL = T.let(T.unsafe(nil), Hash)

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#47
RQRCodeCore::QRFORMATINFOLENGTH = T.let(T.unsafe(nil), Integer)

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#35
RQRCodeCore::QRMASKCOMPUTATIONS = T.let(T.unsafe(nil), Array)

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#24
RQRCodeCore::QRMASKPATTERN = T.let(T.unsafe(nil), Hash)

# http://web.archive.org/web/20110710094955/http://www.denso-wave.com/qrcode/vertable1-e.html
# http://web.archive.org/web/20110710094955/http://www.denso-wave.com/qrcode/vertable2-e.html
# http://web.archive.org/web/20110710094955/http://www.denso-wave.com/qrcode/vertable3-e.html
# http://web.archive.org/web/20110710094955/http://www.denso-wave.com/qrcode/vertable4-e.html
#
# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#53
RQRCodeCore::QRMAXBITS = T.let(T.unsafe(nil), Hash)

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#4
RQRCodeCore::QRMODE = T.let(T.unsafe(nil), Hash)

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#10
RQRCodeCore::QRMODE_NAME = T.let(T.unsafe(nil), Hash)

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_math.rb#4
class RQRCodeCore::QRMath
  class << self
    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_math.rb#34
    def gexp(n); end

    # @raise [QRCodeRunTimeError]
    #
    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_math.rb#29
    def glog(n); end
  end
end

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_math.rb#24
RQRCodeCore::QRMath::EXP_TABLE = T.let(T.unsafe(nil), Array)

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_math.rb#25
RQRCodeCore::QRMath::LOG_TABLE = T.let(T.unsafe(nil), Array)

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_multi.rb#4
class RQRCodeCore::QRMulti
  # @return [QRMulti] a new instance of QRMulti
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_multi.rb#5
  def initialize(data); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_multi.rb#9
  def write(buffer); end
end

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_numeric.rb#6
class RQRCodeCore::QRNumeric
  # @raise [QRCodeArgumentError]
  # @return [QRNumeric] a new instance of QRNumeric
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_numeric.rb#7
  def initialize(data); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_numeric.rb#17
  def write(buffer); end

  private

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_numeric.rb#37
  def get_bit_length(length); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_numeric.rb#41
  def get_code(chars); end

  class << self
    # @return [Boolean]
    #
    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_numeric.rb#13
    def valid_data?(data); end
  end
end

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_numeric.rb#31
RQRCodeCore::QRNumeric::NUMBER_LENGTH = T.let(T.unsafe(nil), Hash)

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_code.rb#46
RQRCodeCore::QRPOSITIONPATTERNLENGTH = T.let(T.unsafe(nil), Integer)

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_polynomial.rb#4
class RQRCodeCore::QRPolynomial
  # @raise [QRCodeRunTimeError]
  # @return [QRPolynomial] a new instance of QRPolynomial
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_polynomial.rb#5
  def initialize(num, shift); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_polynomial.rb#20
  def get(index); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_polynomial.rb#24
  def get_length; end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_polynomial.rb#41
  def mod(e); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_polynomial.rb#28
  def multiply(e); end
end

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_rs_block.rb#4
class RQRCodeCore::QRRSBlock
  # @return [QRRSBlock] a new instance of QRRSBlock
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_rs_block.rb#7
  def initialize(total_count, data_count); end

  # Returns the value of attribute data_count.
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_rs_block.rb#5
  def data_count; end

  # Returns the value of attribute total_count.
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_rs_block.rb#5
  def total_count; end

  class << self
    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_rs_block.rb#285
    def get_rs_block_table(version, error_correct_level); end

    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_rs_block.rb#261
    def get_rs_blocks(version, error_correct_level); end
  end
end

# http://www.thonky.com/qr-code-tutorial/error-correction-table/
#
# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_rs_block.rb#13
RQRCodeCore::QRRSBlock::RS_BLOCK_TABLE = T.let(T.unsafe(nil), Array)

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_segment.rb#4
class RQRCodeCore::QRSegment
  # @return [QRSegment] a new instance of QRSegment
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_segment.rb#7
  def initialize(data:, mode: T.unsafe(nil)); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_segment.rb#29
  def content_size; end

  # Returns the value of attribute data.
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_segment.rb#5
  def data; end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_segment.rb#25
  def header_size(version); end

  # Returns the value of attribute mode.
  #
  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_segment.rb#5
  def mode; end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_segment.rb#21
  def size(version); end

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_segment.rb#42
  def writer; end

  private

  # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_segment.rb#57
  def data_length; end
end

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#4
class RQRCodeCore::QRUtil
  class << self
    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#156
    def demerit_points_1_same_color(modules); end

    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#187
    def demerit_points_2_full_blocks(modules); end

    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#208
    def demerit_points_3_dangerous_patterns(modules); end

    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#244
    def demerit_points_4_dark_ratio(modules); end

    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#89
    def get_bch_digit(data); end

    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#68
    def get_bch_format_info(data); end

    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#81
    def get_bch_version(data); end

    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#112
    def get_error_correct_polynomial(error_correct_length); end

    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#122
    def get_length_in_bits(mode, version); end

    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#145
    def get_lost_points(modules); end

    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#104
    def get_mask(mask_pattern, i, j); end

    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#100
    def get_pattern_positions(version); end

    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#64
    def max_size; end

    # source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#76
    def rszf(num, count); end
  end
end

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#57
RQRCodeCore::QRUtil::BITS_FOR_MODE = T.let(T.unsafe(nil), Hash)

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#52
RQRCodeCore::QRUtil::DEMERIT_POINTS_1 = T.let(T.unsafe(nil), Integer)

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#53
RQRCodeCore::QRUtil::DEMERIT_POINTS_2 = T.let(T.unsafe(nil), Integer)

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#54
RQRCodeCore::QRUtil::DEMERIT_POINTS_3 = T.let(T.unsafe(nil), Integer)

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#55
RQRCodeCore::QRUtil::DEMERIT_POINTS_4 = T.let(T.unsafe(nil), Integer)

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#48
RQRCodeCore::QRUtil::G15 = T.let(T.unsafe(nil), Integer)

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#50
RQRCodeCore::QRUtil::G15_MASK = T.let(T.unsafe(nil), Integer)

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#49
RQRCodeCore::QRUtil::G18 = T.let(T.unsafe(nil), Integer)

# source://rqrcode_core//lib/rqrcode_core/qrcode/qr_util.rb#5
RQRCodeCore::QRUtil::PATTERN_POSITION_TABLE = T.let(T.unsafe(nil), Array)

# source://rqrcode_core//lib/rqrcode_core/version.rb#4
RQRCodeCore::VERSION = T.let(T.unsafe(nil), String)
