# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Agreements::IaaOrder`.
# Please instead update this file by running `bin/tapioca dsl Agreements::IaaOrder`.


class Agreements::IaaOrder
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(::Agreements::IaaOrder)
    end
    def new(attributes = nil, &block); end
  end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Agreements::IaaOrder).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig do
      params(
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(::Agreements::IaaOrder)
    end
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(T::Array[::Agreements::IaaOrder])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(::Agreements::IaaOrder)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::Agreements::IaaOrder).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(::Agreements::IaaOrder)
    end
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(T::Array[::Agreements::IaaOrder])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(::Agreements::IaaOrder)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(::Agreements::IaaOrder)
    end
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(T::Array[::Agreements::IaaOrder])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(::Agreements::IaaOrder)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(T::Array[::Agreements::IaaOrder])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(::Agreements::IaaOrder)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(T::Array[::Agreements::IaaOrder])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(::Agreements::IaaOrder)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Agreements::IaaOrder]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Agreements::IaaOrder)) }
    def fifth; end

    sig { returns(::Agreements::IaaOrder) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::Agreements::IaaOrder)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::Agreements::IaaOrder])
    end
    sig do
      params(
        args: NilClass,
        block: T.proc.params(object: ::Agreements::IaaOrder).void
      ).returns(T.nilable(::Agreements::IaaOrder))
    end
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::Agreements::IaaOrder)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Agreements::IaaOrder) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::Agreements::IaaOrder).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::Agreements::IaaOrder])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::Agreements::IaaOrder]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::Agreements::IaaOrder]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(T::Array[::Agreements::IaaOrder])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(::Agreements::IaaOrder)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(T::Array[::Agreements::IaaOrder])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(::Agreements::IaaOrder)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(T::Array[::Agreements::IaaOrder])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(::Agreements::IaaOrder)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Agreements::IaaOrder)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Agreements::IaaOrder) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Agreements::IaaOrder) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::Agreements::IaaOrder)) }
    sig { params(limit: Integer).returns(T::Array[::Agreements::IaaOrder]) }
    def first(limit = nil); end

    sig { returns(::Agreements::IaaOrder) }
    def first!; end

    sig { returns(T.nilable(::Agreements::IaaOrder)) }
    def forty_two; end

    sig { returns(::Agreements::IaaOrder) }
    def forty_two!; end

    sig { returns(T.nilable(::Agreements::IaaOrder)) }
    def fourth; end

    sig { returns(::Agreements::IaaOrder) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::Agreements::IaaOrder)) }
    sig { params(limit: Integer).returns(T::Array[::Agreements::IaaOrder]) }
    def last(limit = nil); end

    sig { returns(::Agreements::IaaOrder) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Agreements::IaaOrder).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(::Agreements::IaaOrder)
    end
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(T::Array[::Agreements::IaaOrder])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Agreements::IaaOrder).void)
      ).returns(::Agreements::IaaOrder)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Agreements::IaaOrder).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Agreements::IaaOrder).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Agreements::IaaOrder)) }
    def second; end

    sig { returns(::Agreements::IaaOrder) }
    def second!; end

    sig { returns(T.nilable(::Agreements::IaaOrder)) }
    def second_to_last; end

    sig { returns(::Agreements::IaaOrder) }
    def second_to_last!; end

    sig { returns(::Agreements::IaaOrder) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::Agreements::IaaOrder).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::Agreements::IaaOrder)) }
    sig { params(limit: Integer).returns(T::Array[::Agreements::IaaOrder]) }
    def take(limit = nil); end

    sig { returns(::Agreements::IaaOrder) }
    def take!; end

    sig { returns(T.nilable(::Agreements::IaaOrder)) }
    def third; end

    sig { returns(::Agreements::IaaOrder) }
    def third!; end

    sig { returns(T.nilable(::Agreements::IaaOrder)) }
    def third_to_last; end

    sig { returns(::Agreements::IaaOrder) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Agreements::IaaGtc) }
    def build_iaa_gtc(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Agreements::PartnerAccount) }
    def build_partner_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Agreements::IaaGtc) }
    def create_iaa_gtc(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Agreements::IaaGtc) }
    def create_iaa_gtc!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Agreements::PartnerAccount) }
    def create_partner_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Agreements::PartnerAccount) }
    def create_partner_account!(*args, &blk); end

    sig { returns(T.nilable(::Agreements::IaaGtc)) }
    def iaa_gtc; end

    sig { params(value: T.nilable(::Agreements::IaaGtc)).void }
    def iaa_gtc=(value); end

    sig { returns(T::Boolean) }
    def iaa_gtc_changed?; end

    sig { returns(T::Boolean) }
    def iaa_gtc_previously_changed?; end

    sig { returns(T::Array[T.untyped]) }
    def integration_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def integration_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def integration_usage_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def integration_usage_ids=(ids); end

    # This method is created by ActiveRecord on the `Agreements::IaaOrder` class because it declared `has_many :integration_usages`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Agreements::IntegrationUsage::PrivateCollectionProxy) }
    def integration_usages; end

    sig { params(value: T::Enumerable[::Agreements::IntegrationUsage]).void }
    def integration_usages=(value); end

    # This method is created by ActiveRecord on the `Agreements::IaaOrder` class because it declared `has_many :integrations, through: :integration_usages`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Agreements::Integration::PrivateCollectionProxy) }
    def integrations; end

    sig { params(value: T::Enumerable[::Agreements::Integration]).void }
    def integrations=(value); end

    sig { returns(T.nilable(::Agreements::PartnerAccount)) }
    def partner_account; end

    sig { params(value: T.nilable(::Agreements::PartnerAccount)).void }
    def partner_account=(value); end

    sig { returns(T.nilable(::Agreements::IaaGtc)) }
    def reload_iaa_gtc; end

    sig { returns(T.nilable(::Agreements::PartnerAccount)) }
    def reload_partner_account; end

    sig { void }
    def reset_iaa_gtc; end

    sig { void }
    def reset_partner_account; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::Date)) }
    def end_date; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def end_date=(value); end

    sig { returns(T::Boolean) }
    def end_date?; end

    sig { returns(T.nilable(::Date)) }
    def end_date_before_last_save; end

    sig { returns(T.untyped) }
    def end_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def end_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def end_date_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def end_date_change_to_be_saved; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def end_date_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def end_date_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def end_date_previous_change; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def end_date_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def end_date_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def end_date_was; end

    sig { void }
    def end_date_will_change!; end

    sig { returns(T.nilable(::BigDecimal)) }
    def estimated_amount; end

    sig { params(value: T.nilable(::BigDecimal)).returns(T.nilable(::BigDecimal)) }
    def estimated_amount=(value); end

    sig { returns(T::Boolean) }
    def estimated_amount?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def estimated_amount_before_last_save; end

    sig { returns(T.untyped) }
    def estimated_amount_before_type_cast; end

    sig { returns(T::Boolean) }
    def estimated_amount_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def estimated_amount_change; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def estimated_amount_change_to_be_saved; end

    sig { params(from: T.nilable(::BigDecimal), to: T.nilable(::BigDecimal)).returns(T::Boolean) }
    def estimated_amount_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def estimated_amount_in_database; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def estimated_amount_previous_change; end

    sig { params(from: T.nilable(::BigDecimal), to: T.nilable(::BigDecimal)).returns(T::Boolean) }
    def estimated_amount_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def estimated_amount_previously_was; end

    sig { returns(T.nilable(::BigDecimal)) }
    def estimated_amount_was; end

    sig { void }
    def estimated_amount_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def iaa_gtc_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def iaa_gtc_id=(value); end

    sig { returns(T::Boolean) }
    def iaa_gtc_id?; end

    sig { returns(T.nilable(::Integer)) }
    def iaa_gtc_id_before_last_save; end

    sig { returns(T.untyped) }
    def iaa_gtc_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def iaa_gtc_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def iaa_gtc_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def iaa_gtc_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def iaa_gtc_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def iaa_gtc_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def iaa_gtc_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def iaa_gtc_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def iaa_gtc_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def iaa_gtc_id_was; end

    sig { void }
    def iaa_gtc_id_will_change!; end

    sig { returns(::Integer) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(::Integer) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::Integer) }
    def mod_number; end

    sig { params(value: ::Integer).returns(::Integer) }
    def mod_number=(value); end

    sig { returns(T::Boolean) }
    def mod_number?; end

    sig { returns(T.nilable(::Integer)) }
    def mod_number_before_last_save; end

    sig { returns(T.untyped) }
    def mod_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def mod_number_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def mod_number_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def mod_number_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def mod_number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def mod_number_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def mod_number_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def mod_number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def mod_number_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def mod_number_was; end

    sig { void }
    def mod_number_will_change!; end

    sig { returns(::Integer) }
    def order_number; end

    sig { params(value: ::Integer).returns(::Integer) }
    def order_number=(value); end

    sig { returns(T::Boolean) }
    def order_number?; end

    sig { returns(T.nilable(::Integer)) }
    def order_number_before_last_save; end

    sig { returns(T.untyped) }
    def order_number_before_type_cast; end

    sig { returns(T::Boolean) }
    def order_number_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def order_number_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def order_number_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def order_number_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def order_number_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def order_number_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def order_number_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def order_number_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def order_number_was; end

    sig { void }
    def order_number_will_change!; end

    sig { returns(::Integer) }
    def pricing_model; end

    sig { params(value: ::Integer).returns(::Integer) }
    def pricing_model=(value); end

    sig { returns(T::Boolean) }
    def pricing_model?; end

    sig { returns(T.nilable(::Integer)) }
    def pricing_model_before_last_save; end

    sig { returns(T.untyped) }
    def pricing_model_before_type_cast; end

    sig { returns(T::Boolean) }
    def pricing_model_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pricing_model_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pricing_model_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def pricing_model_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def pricing_model_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pricing_model_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def pricing_model_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def pricing_model_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def pricing_model_was; end

    sig { void }
    def pricing_model_will_change!; end

    sig { void }
    def restore_end_date!; end

    sig { void }
    def restore_estimated_amount!; end

    sig { void }
    def restore_iaa_gtc_id!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_mod_number!; end

    sig { void }
    def restore_order_number!; end

    sig { void }
    def restore_pricing_model!; end

    sig { void }
    def restore_start_date!; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_end_date; end

    sig { returns(T::Boolean) }
    def saved_change_to_end_date?; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def saved_change_to_estimated_amount; end

    sig { returns(T::Boolean) }
    def saved_change_to_estimated_amount?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_iaa_gtc_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_iaa_gtc_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_mod_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_mod_number?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_order_number; end

    sig { returns(T::Boolean) }
    def saved_change_to_order_number?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_pricing_model; end

    sig { returns(T::Boolean) }
    def saved_change_to_pricing_model?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_start_date; end

    sig { returns(T::Boolean) }
    def saved_change_to_start_date?; end

    sig { returns(T.nilable(::Date)) }
    def start_date; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def start_date=(value); end

    sig { returns(T::Boolean) }
    def start_date?; end

    sig { returns(T.nilable(::Date)) }
    def start_date_before_last_save; end

    sig { returns(T.untyped) }
    def start_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def start_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def start_date_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def start_date_change_to_be_saved; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def start_date_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def start_date_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def start_date_previous_change; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def start_date_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def start_date_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def start_date_was; end

    sig { void }
    def start_date_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_end_date?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_estimated_amount?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_iaa_gtc_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_mod_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_order_number?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pricing_model?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_start_date?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Agreements::IaaOrder } }

    sig { returns(T::Array[::Agreements::IaaOrder]) }
    def to_a; end

    sig { returns(T::Array[::Agreements::IaaOrder]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Agreements::IaaOrder } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::Agreements::IaaOrder } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Agreements::IaaOrder } }

    sig do
      params(
        records: T.any(::Agreements::IaaOrder, T::Enumerable[T.any(::Agreements::IaaOrder, T::Enumerable[::Agreements::IaaOrder])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Agreements::IaaOrder, T::Enumerable[T.any(::Agreements::IaaOrder, T::Enumerable[::Agreements::IaaOrder])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Agreements::IaaOrder, T::Enumerable[T.any(::Agreements::IaaOrder, T::Enumerable[::Agreements::IaaOrder])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Agreements::IaaOrder]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Agreements::IaaOrder, T::Enumerable[T.any(::Agreements::IaaOrder, T::Enumerable[::Agreements::IaaOrder])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Agreements::IaaOrder, T::Enumerable[T.any(::Agreements::IaaOrder, T::Enumerable[::Agreements::IaaOrder])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Agreements::IaaOrder, T::Enumerable[T.any(::Agreements::IaaOrder, T::Enumerable[::Agreements::IaaOrder])])
      ).returns(T::Array[::Agreements::IaaOrder])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Agreements::IaaOrder]) }
    def target; end

    sig { returns(T::Array[::Agreements::IaaOrder]) }
    def to_a; end

    sig { returns(T::Array[::Agreements::IaaOrder]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Agreements::IaaOrder } }

    sig { returns(T::Array[::Agreements::IaaOrder]) }
    def to_a; end

    sig { returns(T::Array[::Agreements::IaaOrder]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::Agreements::IaaOrder } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::Agreements::IaaOrder } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
