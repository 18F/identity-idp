# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `jwe` gem.
# Please instead update this file by running `bin/tapioca gem jwe`.


# A ruby implementation of the RFC 7516 JSON Web Encryption (JWE) standard.
#
# source://jwe//lib/jwe/base64.rb#1
module JWE
  class << self
    # source://jwe//lib/jwe.rb#80
    def apply_zip(header, data, direction); end

    # @raise [ArgumentError]
    #
    # source://jwe//lib/jwe.rb#59
    def check_alg(alg); end

    # @raise [ArgumentError]
    #
    # source://jwe//lib/jwe.rb#63
    def check_enc(enc); end

    # @raise [ArgumentError]
    #
    # source://jwe//lib/jwe.rb#71
    def check_key(key); end

    # source://jwe//lib/jwe.rb#52
    def check_params(header, key); end

    # @raise [ArgumentError]
    #
    # source://jwe//lib/jwe.rb#67
    def check_zip(zip); end

    # source://jwe//lib/jwe.rb#39
    def decrypt(payload, key); end

    # source://jwe//lib/jwe.rb#24
    def encrypt(payload, key, alg: T.unsafe(nil), enc: T.unsafe(nil), **more_headers); end

    # source://jwe//lib/jwe.rb#89
    def generate_header(alg, enc, more); end

    # source://jwe//lib/jwe.rb#95
    def generate_serialization(hdr, cek, content, cipher); end

    # source://jwe//lib/jwe.rb#75
    def param_to_class_name(param); end
  end
end

# Key encryption algorithms namespace
#
# source://jwe//lib/jwe/alg/aes_kw.rb#4
module JWE::Alg
  class << self
    # source://jwe//lib/jwe/alg.rb#21
    def decrypt_cek(alg, key, encrypted_cek); end

    # source://jwe//lib/jwe/alg.rb#17
    def encrypt_cek(alg, key, cek); end

    # source://jwe//lib/jwe/alg.rb#11
    def for(alg); end
  end
end

# AES-128 Key Wrapping algorithm
#
# source://jwe//lib/jwe/alg/a128_kw.rb#6
class JWE::Alg::A128kw
  include ::JWE::Alg::AesKw

  # source://jwe//lib/jwe/alg/a128_kw.rb#9
  def cipher_name; end
end

# AES-192 Key Wrapping algorithm
#
# source://jwe//lib/jwe/alg/a192_kw.rb#6
class JWE::Alg::A192kw
  include ::JWE::Alg::AesKw

  # source://jwe//lib/jwe/alg/a192_kw.rb#9
  def cipher_name; end
end

# AES-256 Key Wrapping algorithm
#
# source://jwe//lib/jwe/alg/a256_kw.rb#6
class JWE::Alg::A256kw
  include ::JWE::Alg::AesKw

  # source://jwe//lib/jwe/alg/a256_kw.rb#9
  def cipher_name; end
end

# Generic AES Key Wrapping algorithm for any key size.
#
# source://jwe//lib/jwe/alg/aes_kw.rb#6
module JWE::Alg::AesKw
  # source://jwe//lib/jwe/alg/aes_kw.rb#10
  def initialize(key = T.unsafe(nil), iv = T.unsafe(nil)); end

  # source://jwe//lib/jwe/alg/aes_kw.rb#65
  def a_ri(b); end

  # source://jwe//lib/jwe/alg/aes_kw.rb#69
  def cipher; end

  # source://jwe//lib/jwe/alg/aes_kw.rb#38
  def decrypt(encrypted_cek); end

  # source://jwe//lib/jwe/alg/aes_kw.rb#80
  def decrypt_round(data); end

  # source://jwe//lib/jwe/alg/aes_kw.rb#15
  def encrypt(cek); end

  # source://jwe//lib/jwe/alg/aes_kw.rb#73
  def encrypt_round(data); end

  # Returns the value of attribute iv.
  #
  # source://jwe//lib/jwe/alg/aes_kw.rb#8
  def iv; end

  # Sets the attribute iv
  #
  # @param value the value to set the attribute iv to.
  #
  # source://jwe//lib/jwe/alg/aes_kw.rb#8
  def iv=(_arg0); end

  # Returns the value of attribute key.
  #
  # source://jwe//lib/jwe/alg/aes_kw.rb#7
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  #
  # source://jwe//lib/jwe/alg/aes_kw.rb#7
  def key=(_arg0); end

  # source://jwe//lib/jwe/alg/aes_kw.rb#53
  def kw_decrypt_round(j, a, r); end

  # source://jwe//lib/jwe/alg/aes_kw.rb#26
  def kw_encrypt_round(j, a, r); end

  # source://jwe//lib/jwe/alg/aes_kw.rb#87
  def xor(data, t); end
end

# Direct (no-op) key encryption algorithm.
#
# source://jwe//lib/jwe/alg/dir.rb#4
class JWE::Alg::Dir
  # @return [Dir] a new instance of Dir
  #
  # source://jwe//lib/jwe/alg/dir.rb#7
  def initialize(key); end

  # source://jwe//lib/jwe/alg/dir.rb#15
  def decrypt(_encrypted_cek); end

  # source://jwe//lib/jwe/alg/dir.rb#11
  def encrypt(_cek); end

  # Returns the value of attribute key.
  #
  # source://jwe//lib/jwe/alg/dir.rb#5
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  #
  # source://jwe//lib/jwe/alg/dir.rb#5
  def key=(_arg0); end
end

# RSA RSA with PKCS1 v1.5 algorithm.
#
# source://jwe//lib/jwe/alg/rsa15.rb#4
class JWE::Alg::Rsa15
  # @return [Rsa15] a new instance of Rsa15
  #
  # source://jwe//lib/jwe/alg/rsa15.rb#7
  def initialize(key); end

  # source://jwe//lib/jwe/alg/rsa15.rb#15
  def decrypt(encrypted_cek); end

  # source://jwe//lib/jwe/alg/rsa15.rb#11
  def encrypt(cek); end

  # Returns the value of attribute key.
  #
  # source://jwe//lib/jwe/alg/rsa15.rb#5
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  #
  # source://jwe//lib/jwe/alg/rsa15.rb#5
  def key=(_arg0); end
end

# RSA-OAEP key encryption algorithm.
#
# source://jwe//lib/jwe/alg/rsa_oaep.rb#4
class JWE::Alg::RsaOaep
  # @return [RsaOaep] a new instance of RsaOaep
  #
  # source://jwe//lib/jwe/alg/rsa_oaep.rb#7
  def initialize(key); end

  # source://jwe//lib/jwe/alg/rsa_oaep.rb#15
  def decrypt(encrypted_cek); end

  # source://jwe//lib/jwe/alg/rsa_oaep.rb#11
  def encrypt(cek); end

  # Returns the value of attribute key.
  #
  # source://jwe//lib/jwe/alg/rsa_oaep.rb#5
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  #
  # source://jwe//lib/jwe/alg/rsa_oaep.rb#5
  def key=(_arg0); end
end

# source://jwe//lib/jwe.rb#16
class JWE::BadCEK < ::RuntimeError; end

# Base64 for JWE is slightly different from what ruby provides.
#
# source://jwe//lib/jwe/base64.rb#3
module JWE::Base64
  class << self
    # source://jwe//lib/jwe/base64.rb#8
    def jwe_decode(payload); end

    # source://jwe//lib/jwe/base64.rb#4
    def jwe_encode(payload); end
  end
end

# source://jwe//lib/jwe.rb#14
class JWE::DecodeError < ::RuntimeError; end

# Content encryption algorithms namespace
#
# source://jwe//lib/jwe/enc/cipher.rb#2
module JWE::Enc
  class << self
    # source://jwe//lib/jwe/enc.rb#11
    def for(enc, cek = T.unsafe(nil), iv = T.unsafe(nil), tag = T.unsafe(nil)); end
  end
end

# AES CBC 128 + SHA256 message verification algorithm.
#
# source://jwe//lib/jwe/enc/a128cbc_hs256.rb#6
class JWE::Enc::A128cbcHs256
  include ::JWE::Enc::AesCbcHs
  extend ::JWE::Enc::AesCbcHs::ClassMethods

  # source://jwe//lib/jwe/enc/a128cbc_hs256.rb#13
  def cipher_name; end

  # source://jwe//lib/jwe/enc/a128cbc_hs256.rb#17
  def hash_name; end

  # source://jwe//lib/jwe/enc/a128cbc_hs256.rb#9
  def key_length; end
end

# AES GCM 128 algorithm.
#
# source://jwe//lib/jwe/enc/a128gcm.rb#6
class JWE::Enc::A128gcm
  include ::JWE::Enc::AesGcm
  extend ::JWE::Enc::AesGcm::ClassMethods

  # source://jwe//lib/jwe/enc/a128gcm.rb#13
  def cipher_name; end

  # source://jwe//lib/jwe/enc/a128gcm.rb#9
  def key_length; end
end

# AES CBC 192 + SHA384 message verification algorithm.
#
# source://jwe//lib/jwe/enc/a192cbc_hs384.rb#6
class JWE::Enc::A192cbcHs384
  include ::JWE::Enc::AesCbcHs
  extend ::JWE::Enc::AesCbcHs::ClassMethods

  # source://jwe//lib/jwe/enc/a192cbc_hs384.rb#13
  def cipher_name; end

  # source://jwe//lib/jwe/enc/a192cbc_hs384.rb#17
  def hash_name; end

  # source://jwe//lib/jwe/enc/a192cbc_hs384.rb#9
  def key_length; end
end

# AES GCM 192 algorithm.
#
# source://jwe//lib/jwe/enc/a192gcm.rb#6
class JWE::Enc::A192gcm
  include ::JWE::Enc::AesGcm
  extend ::JWE::Enc::AesGcm::ClassMethods

  # source://jwe//lib/jwe/enc/a192gcm.rb#13
  def cipher_name; end

  # source://jwe//lib/jwe/enc/a192gcm.rb#9
  def key_length; end
end

# AES CBC 256 + SHA512 message verification algorithm.
#
# source://jwe//lib/jwe/enc/a256cbc_hs512.rb#6
class JWE::Enc::A256cbcHs512
  include ::JWE::Enc::AesCbcHs
  extend ::JWE::Enc::AesCbcHs::ClassMethods

  # source://jwe//lib/jwe/enc/a256cbc_hs512.rb#13
  def cipher_name; end

  # source://jwe//lib/jwe/enc/a256cbc_hs512.rb#17
  def hash_name; end

  # source://jwe//lib/jwe/enc/a256cbc_hs512.rb#9
  def key_length; end
end

# AES GCM 256 algorithm.
#
# source://jwe//lib/jwe/enc/a256gcm.rb#6
class JWE::Enc::A256gcm
  include ::JWE::Enc::AesGcm
  extend ::JWE::Enc::AesGcm::ClassMethods

  # source://jwe//lib/jwe/enc/a256gcm.rb#13
  def cipher_name; end

  # source://jwe//lib/jwe/enc/a256gcm.rb#9
  def key_length; end
end

# Abstract AES in Block cipher mode, with message signature for different key sizes.
#
# source://jwe//lib/jwe/enc/aes_cbc_hs.rb#6
module JWE::Enc::AesCbcHs
  mixes_in_class_methods ::JWE::Enc::AesCbcHs::ClassMethods

  # source://jwe//lib/jwe/enc/aes_cbc_hs.rb#11
  def initialize(cek = T.unsafe(nil), iv = T.unsafe(nil)); end

  # Returns the value of attribute cek.
  #
  # source://jwe//lib/jwe/enc/aes_cbc_hs.rb#60
  def cek; end

  # Sets the attribute cek
  #
  # @param value the value to set the attribute cek to.
  #
  # source://jwe//lib/jwe/enc/aes_cbc_hs.rb#7
  def cek=(_arg0); end

  # source://jwe//lib/jwe/enc/aes_cbc_hs.rb#72
  def cipher; end

  # source://jwe//lib/jwe/enc/aes_cbc_hs.rb#40
  def cipher_round(direction, iv, data); end

  # source://jwe//lib/jwe/enc/aes_cbc_hs.rb#27
  def decrypt(ciphertext, authenticated_data); end

  # source://jwe//lib/jwe/enc/aes_cbc_hs.rb#68
  def enc_key; end

  # @raise [JWE::BadCEK]
  #
  # source://jwe//lib/jwe/enc/aes_cbc_hs.rb#16
  def encrypt(cleartext, authenticated_data); end

  # source://jwe//lib/jwe/enc/aes_cbc_hs.rb#48
  def generate_tag(authenticated_data, iv, ciphertext); end

  # Returns the value of attribute iv.
  #
  # source://jwe//lib/jwe/enc/aes_cbc_hs.rb#56
  def iv; end

  # Sets the attribute iv
  #
  # @param value the value to set the attribute iv to.
  #
  # source://jwe//lib/jwe/enc/aes_cbc_hs.rb#8
  def iv=(_arg0); end

  # source://jwe//lib/jwe/enc/aes_cbc_hs.rb#64
  def mac_key; end

  # Returns the value of attribute tag.
  #
  # source://jwe//lib/jwe/enc/aes_cbc_hs.rb#76
  def tag; end

  # Sets the attribute tag
  #
  # @param value the value to set the attribute tag to.
  #
  # source://jwe//lib/jwe/enc/aes_cbc_hs.rb#9
  def tag=(_arg0); end

  class << self
    # @private
    #
    # source://jwe//lib/jwe/enc/aes_cbc_hs.rb#80
    def included(base); end
  end
end

# Provides availability checks for Key Encryption algorithms
#
# source://jwe//lib/jwe/enc/aes_cbc_hs.rb#85
module JWE::Enc::AesCbcHs::ClassMethods
  # @return [Boolean]
  #
  # source://jwe//lib/jwe/enc/aes_cbc_hs.rb#86
  def available?; end
end

# Abstract AES in Galois Counter mode for different key sizes.
#
# source://jwe//lib/jwe/enc/aes_gcm.rb#6
module JWE::Enc::AesGcm
  mixes_in_class_methods ::JWE::Enc::AesGcm::ClassMethods

  # source://jwe//lib/jwe/enc/aes_gcm.rb#11
  def initialize(cek = T.unsafe(nil), iv = T.unsafe(nil)); end

  # Returns the value of attribute cek.
  #
  # source://jwe//lib/jwe/enc/aes_gcm.rb#47
  def cek; end

  # Sets the attribute cek
  #
  # @param value the value to set the attribute cek to.
  #
  # source://jwe//lib/jwe/enc/aes_gcm.rb#7
  def cek=(_arg0); end

  # source://jwe//lib/jwe/enc/aes_gcm.rb#51
  def cipher; end

  # source://jwe//lib/jwe/enc/aes_gcm.rb#26
  def decrypt(ciphertext, authenticated_data); end

  # @raise [JWE::BadCEK]
  #
  # source://jwe//lib/jwe/enc/aes_gcm.rb#16
  def encrypt(cleartext, authenticated_data); end

  # Returns the value of attribute iv.
  #
  # source://jwe//lib/jwe/enc/aes_gcm.rb#43
  def iv; end

  # Sets the attribute iv
  #
  # @param value the value to set the attribute iv to.
  #
  # source://jwe//lib/jwe/enc/aes_gcm.rb#8
  def iv=(_arg0); end

  # source://jwe//lib/jwe/enc/aes_gcm.rb#35
  def setup_cipher(direction, auth_data); end

  # Returns the value of attribute tag.
  #
  # source://jwe//lib/jwe/enc/aes_gcm.rb#55
  def tag; end

  # Sets the attribute tag
  #
  # @param value the value to set the attribute tag to.
  #
  # source://jwe//lib/jwe/enc/aes_gcm.rb#9
  def tag=(_arg0); end

  class << self
    # @private
    #
    # source://jwe//lib/jwe/enc/aes_gcm.rb#59
    def included(base); end
  end
end

# Provides availability checks for Key Encryption algorithms
#
# source://jwe//lib/jwe/enc/aes_gcm.rb#64
module JWE::Enc::AesGcm::ClassMethods
  # @return [Boolean]
  #
  # source://jwe//lib/jwe/enc/aes_gcm.rb#65
  def available?; end
end

# Helper to get OpenSSL cipher instance from a string.
#
# source://jwe//lib/jwe/enc/cipher.rb#4
module JWE::Enc::Cipher
  class << self
    # source://jwe//lib/jwe/enc/cipher.rb#6
    def for(cipher_name); end
  end
end

# source://jwe//lib/jwe.rb#17
class JWE::InvalidData < ::RuntimeError; end

# source://jwe//lib/jwe.rb#15
class JWE::NotImplementedError < ::RuntimeError; end

# Serialization namespace.
#
# source://jwe//lib/jwe/serialization/compact.rb#3
module JWE::Serialization; end

# The default and suggested way of serializing JWE messages.
#
# source://jwe//lib/jwe/serialization/compact.rb#5
class JWE::Serialization::Compact
  class << self
    # @raise [JWE::DecodeError]
    #
    # source://jwe//lib/jwe/serialization/compact.rb#10
    def decode(payload); end

    # source://jwe//lib/jwe/serialization/compact.rb#6
    def encode(header, encrypted_cek, iv, ciphertext, tag); end
  end
end

# source://jwe//lib/jwe.rb#19
JWE::VALID_ALG = T.let(T.unsafe(nil), Array)

# source://jwe//lib/jwe.rb#20
JWE::VALID_ENC = T.let(T.unsafe(nil), Array)

# source://jwe//lib/jwe.rb#21
JWE::VALID_ZIP = T.let(T.unsafe(nil), Array)

# Message deflating algorithms namespace
#
# source://jwe//lib/jwe/zip/def.rb#4
module JWE::Zip
  class << self
    # source://jwe//lib/jwe/zip.rb#6
    def for(zip); end
  end
end

# Deflate algorithm.
#
# source://jwe//lib/jwe/zip/def.rb#6
class JWE::Zip::Def
  # source://jwe//lib/jwe/zip/def.rb#7
  def compress(payload); end

  # Was using RFC 1950 instead of 1951.
  #
  # source://jwe//lib/jwe/zip/def.rb#13
  def decompress(payload); end
end
