<% title t('titles.doc_auth.verify') %>

<% if updating_address %>
  <%= render PageHeadingComponent.new.with_content(t('in_person_proofing.headings.update_address')) %>
<% else %>
  <%= render PageHeadingComponent.new.with_content(t('in_person_proofing.headings.address')) %>
<% end %>

<p>
  <%= t('in_person_proofing.body.address.info') %>
  <%= new_window_link_to(t('in_person_proofing.body.address.learn_more'), MarketingSite.security_and_privacy_practices_url) %>
</p>

<%= simple_form_for(
      :doc_auth, url: url_for, method: 'PUT',
                 html: { autocomplete: 'off' }
    ) do |f| %>
  <%= render ValidatedFieldComponent.new(
        form: f,
        input_html: { value: pii[:address1] },
        label: t('in_person_proofing.form.address.address1'),
        label_html: { class: 'usa-label' },
        maxlength: 255,
        name: :address1,
        required: true,
      ) %>
  <%= render ValidatedFieldComponent.new(
        form: f,
        input_html: { value: pii[:address2] },
        label: t('in_person_proofing.form.address.address2'),
        label_html: { class: 'usa-label' },
        maxlength: 255,
        name: :address2,
        required: false,
      ) %>
  <%= render ValidatedFieldComponent.new(
        form: f,
        input_html: { value: pii[:city] },
        label: t('in_person_proofing.form.address.city'),
        label_html: { class: 'usa-label' },
        maxlength: 255,
        name: :city,
        required: true,
      ) %>
  <%= render ValidatedFieldComponent.new(
        collection: us_states_territories,
        form: f,
        label: t('in_person_proofing.form.address.state'),
        label_html: { class: 'usa-label' },
        name: :state,
        prompt: t('in_person_proofing.form.address.state_prompt'),
        required: true,
        selected: pii[:state],
      ) %>

  <div class="tablet:grid-col-6">
    <%# using :tel for mobile numeric keypad %>
    <%= render ValidatedFieldComponent.new(
          as: :tel,
          error_messages: { patternMismatch: t('idv.errors.pattern_mismatch.zipcode') },
          form: f,
          input_html: { value: pii[:zipcode], class: 'zipcode' },
          label: t('in_person_proofing.form.address.zipcode'),
          label_html: { class: 'usa-label' },
          name: :zipcode,
          pattern: '\d{5}([\-]\d{4})?',
          required: true,
        ) %>
  </div>

  <%= render ValidatedFieldComponent.new(
        as: :radio_buttons,
        checked: pii[:same_address_as_id],
        collection: [
          [t('in_person_proofing.form.address.same_address_choice_yes'), true],
          [t('in_person_proofing.form.address.same_address_choice_no'), false],
        ],
        form: f,
        label: t('in_person_proofing.form.address.same_address'),
        name: :same_address_as_id,
        required: true,
        wrapper: :uswds_radio_buttons,
      ) %>

  <%= render ButtonComponent.new(big: true, wide: true, class: 'margin-top-1') do %>
    <% if updating_address %>
      <%= t('forms.buttons.submit.update') %>
    <% else %>
      <%= t('forms.buttons.continue') %>
    <% end %>
  <% end %>
<% end %>

<%= javascript_packs_tag_once('formatted-fields') %>
