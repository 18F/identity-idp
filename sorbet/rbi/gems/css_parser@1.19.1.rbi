# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `css_parser` gem.
# Please instead update this file by running `bin/tapioca gem css_parser`.


# source://css_parser//lib/css_parser/version.rb#3
module CssParser
  class << self
    # Calculates the specificity of a CSS selector
    # per http://www.w3.org/TR/CSS21/cascade.html#specificity
    #
    # Returns an integer.
    #
    # ==== Example
    #  CssParser.calculate_specificity('#content div p:first-line a:link')
    #  => 114
    # --
    # Thanks to Rafael Salazar and Nick Fitzsimons on the css-discuss list for their help.
    # ++
    #
    # source://css_parser//lib/css_parser.rb#112
    def calculate_specificity(selector); end

    # Make <tt>url()</tt> links absolute.
    #
    # Takes a block of CSS and returns it with all relative URIs converted to absolute URIs.
    #
    # "For CSS style sheets, the base URI is that of the style sheet, not that of the source document."
    # per http://www.w3.org/TR/CSS21/syndata.html#uri
    #
    # Returns a string.
    #
    # ==== Example
    #  CssParser.convert_uris("body { background: url('../style/yellow.png?abc=123') };",
    #               "http://example.org/style/basic.css").inspect
    #  => "body { background: url('http://example.org/style/yellow.png?abc=123') };"
    #
    # source://css_parser//lib/css_parser.rb#136
    def convert_uris(css, base_uri); end

    # Merge multiple CSS RuleSets by cascading according to the CSS 2.1 cascading rules
    # (http://www.w3.org/TR/REC-CSS2/cascade.html#cascading-order).
    #
    # Takes one or more RuleSet objects.
    #
    # Returns a RuleSet.
    #
    # ==== Cascading
    # If a RuleSet object has its +specificity+ defined, that specificity is
    # used in the cascade calculations.
    #
    # If no specificity is explicitly set and the RuleSet has *one* selector,
    # the specificity is calculated using that selector.
    #
    # If no selectors the specificity is treated as 0.
    #
    # If multiple selectors are present then the greatest specificity is used.
    #
    # ==== Example #1
    #   rs1 = RuleSet.new(nil, 'color: black;')
    #   rs2 = RuleSet.new(nil, 'margin: 0px;')
    #
    #   merged = CssParser.merge(rs1, rs2)
    #
    #   puts merged
    #   => "{ margin: 0px; color: black; }"
    #
    # ==== Example #2
    #   rs1 = RuleSet.new(nil, 'background-color: black;')
    #   rs2 = RuleSet.new(nil, 'background-image: none;')
    #
    #   merged = CssParser.merge(rs1, rs2)
    #
    #   puts merged
    #   => "{ background: none black; }"
    # --
    # TODO: declaration_hashes should be able to contain a RuleSet
    #       this should be a Class method
    #
    # source://css_parser//lib/css_parser.rb#55
    def merge(*rule_sets); end

    # source://css_parser//lib/css_parser/regexps.rb#4
    def regex_possible_values(*values); end

    # source://css_parser//lib/css_parser.rb#153
    def sanitize_media_query(raw); end
  end
end

# Special units
#
# source://css_parser//lib/css_parser/regexps.rb#53
CssParser::BOX_MODEL_UNITS_RX = T.let(T.unsafe(nil), Regexp)

# Exception class used if a request is made to load a CSS file more than once.
#
# source://css_parser//lib/css_parser/parser.rb#10
class CssParser::CircularReferenceError < ::StandardError; end

# source://css_parser//lib/css_parser/regexps.rb#98
CssParser::ELEMENTS_AND_PSEUDO_ELEMENTS_RX_NC = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#59
CssParser::FONT_UNITS_RX = T.let(T.unsafe(nil), Regexp)

# RE_AT_IMPORT_RULE = Regexp.new('@import[\s]*(' + RE_STRING.to_s + ')([\w\s\,]*)[;]?', Regexp::IGNORECASE) -- should handle url() even though it is not allowed
# ++
#
# source://css_parser//lib/css_parser/regexps.rb#36
CssParser::IMPORTANT_IN_PROPERTY_RX = T.let(T.unsafe(nil), Regexp)

# Colours
#
# source://css_parser//lib/css_parser/regexps.rb#109
CssParser::NAMED_COLOURS = T.let(T.unsafe(nil), Array)

# Patterns for specificity calculations
#
# source://css_parser//lib/css_parser/regexps.rb#80
CssParser::NON_ID_ATTRIBUTES_AND_PSEUDO_CLASSES_RX_NC = T.let(T.unsafe(nil), Regexp)

# == Parser class
#
# All CSS is converted to UTF-8.
#
# When calling Parser#new there are some configuaration options:
# [<tt>absolute_paths</tt>] Convert relative paths to absolute paths (<tt>href</tt>, <tt>src</tt> and <tt>url('')</tt>. Boolean, default is <tt>false</tt>.
# [<tt>import</tt>] Follow <tt>@import</tt> rules. Boolean, default is <tt>true</tt>.
# [<tt>io_exceptions</tt>] Throw an exception if a link can not be found. Boolean, default is <tt>true</tt>.
#
# source://css_parser//lib/css_parser/parser.rb#20
class CssParser::Parser
  # @return [Parser] a new instance of Parser
  #
  # source://css_parser//lib/css_parser/parser.rb#40
  def initialize(options = T.unsafe(nil)); end

  # Get declarations by selector.
  #
  # +media_types+ are optional, and can be a symbol or an array of symbols.
  # The default value is <tt>:all</tt>.
  #
  # ==== Examples
  #  find_by_selector('#content')
  #  => 'font-size: 13px; line-height: 1.2;'
  #
  #  find_by_selector('#content', [:screen, :handheld])
  #  => 'font-size: 13px; line-height: 1.2;'
  #
  #  find_by_selector('#content', :print)
  #  => 'font-size: 11pt; line-height: 1.2;'
  #
  # Returns an array of declarations.
  #
  # source://css_parser//lib/css_parser/parser.rb#78
  def [](selector, media_types = T.unsafe(nil)); end

  # Add a raw block of CSS.
  #
  # In order to follow +@import+ rules you must supply either a
  # +:base_dir+ or +:base_uri+ option.
  #
  # Use the +:media_types+ option to set the media type(s) for this block.  Takes an array of symbols.
  #
  # Use the +:only_media_types+ option to selectively follow +@import+ rules.  Takes an array of symbols.
  #
  # ==== Example
  #   css = <<-EOT
  #     body { font-size: 10pt }
  #     p { margin: 0px; }
  #     @media screen, print {
  #       body { line-height: 1.2 }
  #     }
  #   EOT
  #
  #   parser = CssParser::Parser.new
  #   parser.add_block!(css)
  #
  # source://css_parser//lib/css_parser/parser.rb#123
  def add_block!(block, options = T.unsafe(nil)); end

  # Add a CSS rule by setting the +selectors+, +declarations+
  # and +media_types+. Optional pass +filename+ , +offset+ for source
  # reference too.
  #
  # +media_types+ can be a symbol or an array of symbols. default to :all
  # optional fields for source location for source location
  # +filename+ can be a string or uri pointing to the file or url location.
  # +offset+ should be Range object representing the start and end byte locations where the rule was found in the file.
  #
  # source://css_parser//lib/css_parser/parser.rb#178
  def add_rule!(*args, selectors: T.unsafe(nil), block: T.unsafe(nil), filename: T.unsafe(nil), offset: T.unsafe(nil), media_types: T.unsafe(nil)); end

  # Add a CssParser RuleSet object.
  #
  # +media_types+ can be a symbol or an array of symbols.
  #
  # @raise [ArgumentError]
  #
  # source://css_parser//lib/css_parser/parser.rb#226
  def add_rule_set!(ruleset, media_types = T.unsafe(nil)); end

  # Add a CSS rule by setting the +selectors+, +declarations+, +filename+, +offset+ and +media_types+.
  #
  # +filename+ can be a string or uri pointing to the file or url location.
  # +offset+ should be Range object representing the start and end byte locations where the rule was found in the file.
  # +media_types+ can be a symbol or an array of symbols.
  #
  # source://css_parser//lib/css_parser/parser.rb#215
  def add_rule_with_offsets!(selectors, declarations, filename, offset, media_types = T.unsafe(nil)); end

  # Merge declarations with the same selector.
  #
  # source://css_parser//lib/css_parser/parser.rb#344
  def compact!; end

  # Iterate through RuleSet objects.
  #
  # +media_types+ can be a symbol or an array of symbols.
  #
  # source://css_parser//lib/css_parser/parser.rb#251
  def each_rule_set(media_types = T.unsafe(nil)); end

  # Iterate through CSS selectors.
  #
  # +media_types+ can be a symbol or an array of symbols.
  # See RuleSet#each_selector for +options+.
  #
  # source://css_parser//lib/css_parser/parser.rb#287
  def each_selector(all_media_types = T.unsafe(nil), options = T.unsafe(nil)); end

  # Get declarations by selector.
  #
  # +media_types+ are optional, and can be a symbol or an array of symbols.
  # The default value is <tt>:all</tt>.
  #
  # ==== Examples
  #  find_by_selector('#content')
  #  => 'font-size: 13px; line-height: 1.2;'
  #
  #  find_by_selector('#content', [:screen, :handheld])
  #  => 'font-size: 13px; line-height: 1.2;'
  #
  #  find_by_selector('#content', :print)
  #  => 'font-size: 11pt; line-height: 1.2;'
  #
  # Returns an array of declarations.
  #
  # source://css_parser//lib/css_parser/parser.rb#78
  def find_by_selector(selector, media_types = T.unsafe(nil)); end

  # Finds the rule sets that match the given selectors
  #
  # source://css_parser//lib/css_parser/parser.rb#88
  def find_rule_sets(selectors, media_types = T.unsafe(nil)); end

  # Load a local CSS file.
  #
  # source://css_parser//lib/css_parser/parser.rb#523
  def load_file!(file_name, options = T.unsafe(nil), deprecated = T.unsafe(nil)); end

  # Load a local CSS string.
  #
  # source://css_parser//lib/css_parser/parser.rb#548
  def load_string!(src, options = T.unsafe(nil), deprecated = T.unsafe(nil)); end

  # Load a remote CSS file.
  #
  # You can also pass in file://test.css
  #
  # See add_block! for options.
  #
  # Deprecated: originally accepted three params: `uri`, `base_uri` and `media_types`
  #
  # source://css_parser//lib/css_parser/parser.rb#493
  def load_uri!(uri, options = T.unsafe(nil), deprecated = T.unsafe(nil)); end

  # Array of CSS files that have been loaded.
  #
  # source://css_parser//lib/css_parser/parser.rb#32
  def loaded_uris; end

  # source://css_parser//lib/css_parser/parser.rb#348
  def parse_block_into_rule_sets!(block, options = T.unsafe(nil)); end

  # Remove a CssParser RuleSet object.
  #
  # +media_types+ can be a symbol or an array of symbols.
  #
  # @raise [ArgumentError]
  #
  # source://css_parser//lib/css_parser/parser.rb#238
  def remove_rule_set!(ruleset, media_types = T.unsafe(nil)); end

  # A hash of { :media_query => rule_sets }
  #
  # source://css_parser//lib/css_parser/parser.rb#329
  def rules_by_media_query; end

  # Output all CSS rules as a Hash
  #
  # source://css_parser//lib/css_parser/parser.rb#263
  def to_h(which_media = T.unsafe(nil)); end

  # Output all CSS rules as a single stylesheet.
  #
  # source://css_parser//lib/css_parser/parser.rb#298
  def to_s(which_media = T.unsafe(nil)); end

  protected

  # Check that a path hasn't been loaded already
  #
  # Raises a CircularReferenceError exception if io_exceptions are on,
  # otherwise returns true/false.
  #
  # source://css_parser//lib/css_parser/parser.rb#569
  def circular_reference_check(path); end

  # Strip comments and clean up blank lines from a block of CSS.
  #
  # Returns a string.
  #
  # source://css_parser//lib/css_parser/parser.rb#595
  def cleanup_block(block, options = T.unsafe(nil)); end

  # Remove a pattern from a given string
  #
  # Returns a string.
  #
  # source://css_parser//lib/css_parser/parser.rb#584
  def ignore_pattern(css, regex, options); end

  # Download a file into a string.
  #
  # Returns the file's data and character set in an array.
  # --
  # TODO: add option to fail silently or throw and exception on a 404
  # ++
  #
  # source://css_parser//lib/css_parser/parser.rb#616
  def read_remote_file(uri); end

  private

  # recurse through nested nodes and return them as Hashes nested in
  # passed hash
  #
  # source://css_parser//lib/css_parser/parser.rb#719
  def css_node_to_h(hash, key, val); end

  # Retrieve a folded declaration block from the internal cache.
  #
  # source://css_parser//lib/css_parser/parser.rb#706
  def get_folded_declaration(block_hash); end

  # source://css_parser//lib/css_parser/parser.rb#710
  def reset!; end

  # Save a folded declaration block to the internal cache.
  #
  # source://css_parser//lib/css_parser/parser.rb#701
  def save_folded_declaration(block_hash, folded_declaration); end

  class << self
    # Returns the value of attribute folded_declaration_cache.
    #
    # source://css_parser//lib/css_parser/parser.rb#38
    def folded_declaration_cache; end
  end
end

# source://css_parser//lib/css_parser/parser.rb#29
CssParser::Parser::MAX_REDIRECTS = T.let(T.unsafe(nil), Integer)

# Initial parsing
#
# source://css_parser//lib/css_parser/parser.rb#27
CssParser::Parser::RE_AT_IMPORT_RULE = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/parser.rb#22
CssParser::Parser::RULESET_TOKENIZER_RX = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/parser.rb#23
CssParser::Parser::STRIP_CSS_COMMENTS_RX = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/parser.rb#24
CssParser::Parser::STRIP_HTML_COMMENTS_RX = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/parser.rb#21
CssParser::Parser::USER_AGENT = T.let(T.unsafe(nil), String)

# Initial parsing
#
# source://css_parser//lib/css_parser/regexps.rb#29
CssParser::RE_AT_IMPORT_RULE = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#57
CssParser::RE_BACKGROUND_POSITION = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#58
CssParser::RE_BACKGROUND_SIZE = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#60
CssParser::RE_BORDER_STYLE = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#61
CssParser::RE_BORDER_UNITS = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#266
CssParser::RE_COLOUR = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#264
CssParser::RE_COLOUR_HEX = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#265
CssParser::RE_COLOUR_NAMED = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#262
CssParser::RE_COLOUR_NUMERIC = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#263
CssParser::RE_COLOUR_NUMERIC_ALPHA = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#13
CssParser::RE_ESCAPE = T.let(T.unsafe(nil), Regexp)

# Functions like calc, var, clamp, etc.
#
# source://css_parser//lib/css_parser/regexps.rb#64
CssParser::RE_FUNCTIONS = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#26
CssParser::RE_GRADIENT = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#14
CssParser::RE_IDENT = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#47
CssParser::RE_IMAGE = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#21
CssParser::RE_INHERIT = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#38
CssParser::RE_INSIDE_OUTSIDE = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#54
CssParser::RE_LENGTH_OR_PERCENTAGE = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#41
CssParser::RE_LIST_STYLE_TYPE = T.let(T.unsafe(nil), Regexp)

# :stopdoc:
# Base types
#
# source://css_parser//lib/css_parser/regexps.rb#10
CssParser::RE_NL = T.let(T.unsafe(nil), Regexp)

# [^\0-\177]
#
# source://css_parser//lib/css_parser/regexps.rb#11
CssParser::RE_NON_ASCII = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#40
CssParser::RE_REPEAT = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#39
CssParser::RE_SCROLL_FIXED = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#55
CssParser::RE_SINGLE_BACKGROUND_POSITION = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#56
CssParser::RE_SINGLE_BACKGROUND_SIZE = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#19
CssParser::RE_STRING = T.let(T.unsafe(nil), Regexp)

# General strings
#
# source://css_parser//lib/css_parser/regexps.rb#17
CssParser::RE_STRING1 = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#18
CssParser::RE_STRING2 = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#12
CssParser::RE_UNICODE = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#23
CssParser::RE_URI = T.let(T.unsafe(nil), Regexp)

# Exception class used for any errors encountered while downloading remote files.
#
# source://css_parser//lib/css_parser/parser.rb#7
class CssParser::RemoteFileError < ::IOError; end

# source://css_parser//lib/css_parser/rule_set.rb#6
class CssParser::RuleSet
  extend ::Forwardable

  # @return [RuleSet] a new instance of RuleSet
  #
  # source://css_parser//lib/css_parser/rule_set.rb#252
  def initialize(*args, selectors: T.unsafe(nil), block: T.unsafe(nil), offset: T.unsafe(nil), filename: T.unsafe(nil), specificity: T.unsafe(nil)); end

  # Get the value of a property
  #
  # source://css_parser//lib/css_parser/rule_set.rb#289
  def [](property); end

  # @see CssParser::RuleSet::Declarations#add_declaration!
  #
  # source://forwardable/1.3.3/forwardable.rb#231
  def []=(*args, **_arg1, &block); end

  # @see CssParser::RuleSet::Declarations#add_declaration!
  #
  # source://forwardable/1.3.3/forwardable.rb#231
  def add_declaration!(*args, **_arg1, &block); end

  # Looks for long format CSS background properties (e.g. <tt>background-color</tt>) and
  # converts them into a shorthand CSS <tt>background</tt> property.
  #
  # Leaves properties declared !important alone.
  #
  # source://css_parser//lib/css_parser/rule_set.rb#539
  def create_background_shorthand!; end

  # Combine border-color, border-style and border-width into border
  # Should be run after create_dimensions_shorthand!
  #
  # TODO: this is extremely similar to create_background_shorthand! and should be combined
  #
  # source://css_parser//lib/css_parser/rule_set.rb#556
  def create_border_shorthand!; end

  # Looks for long format CSS dimensional properties (margin, padding, border-color, border-style and border-width)
  # and converts them into shorthand CSS properties.
  #
  # source://css_parser//lib/css_parser/rule_set.rb#578
  def create_dimensions_shorthand!; end

  # Looks for long format CSS font properties (e.g. <tt>font-weight</tt>) and
  # tries to convert them into a shorthand CSS <tt>font</tt> property.  All
  # font properties must be present in order to create a shorthand declaration.
  #
  # source://css_parser//lib/css_parser/rule_set.rb#602
  def create_font_shorthand!; end

  # Looks for long format CSS list-style properties (e.g. <tt>list-style-type</tt>) and
  # converts them into a shorthand CSS <tt>list-style</tt> property.
  #
  # Leaves properties declared !important alone.
  #
  # source://css_parser//lib/css_parser/rule_set.rb#629
  def create_list_style_shorthand!; end

  # Create shorthand declarations (e.g. +margin+ or +font+) whenever possible.
  #
  # source://css_parser//lib/css_parser/rule_set.rb#505
  def create_shorthand!; end

  # Combine several properties into a shorthand one
  #
  # source://css_parser//lib/css_parser/rule_set.rb#515
  def create_shorthand_properties!(properties, shorthand_property); end

  # Return all declarations as a string.
  #
  # source://css_parser//lib/css_parser/rule_set.rb#322
  def declarations_to_s(options = T.unsafe(nil)); end

  # @see CssParser::RuleSet::Declarations#delete
  #
  # source://forwardable/1.3.3/forwardable.rb#231
  def delete(*args, **_arg1, &block); end

  # Iterate through declarations.
  #
  # source://css_parser//lib/css_parser/rule_set.rb#315
  def each_declaration; end

  # Iterate through selectors.
  #
  # Options
  # -  +force_important+ -- boolean
  #
  # ==== Example
  #   ruleset.each_selector do |sel, dec, spec|
  #     ...
  #   end
  #
  # source://css_parser//lib/css_parser/rule_set.rb#305
  def each_selector(options = T.unsafe(nil)); end

  # Convert shorthand background declarations (e.g. <tt>background: url("chess.png") gray 50% repeat fixed;</tt>)
  # into their constituent parts.
  #
  # See http://www.w3.org/TR/CSS21/colors.html#propdef-background
  #
  # source://css_parser//lib/css_parser/rule_set.rb#345
  def expand_background_shorthand!; end

  # Split shorthand border declarations (e.g. <tt>border: 1px red;</tt>)
  # Additional splitting happens in expand_dimensions_shorthand!
  #
  # source://css_parser//lib/css_parser/rule_set.rb#375
  def expand_border_shorthand!; end

  # Split shorthand dimensional declarations (e.g. <tt>margin: 0px auto;</tt>)
  # into their constituent parts.  Handles margin, padding, border-color, border-style and border-width.
  #
  # source://css_parser//lib/css_parser/rule_set.rb#393
  def expand_dimensions_shorthand!; end

  # Convert shorthand font declarations (e.g. <tt>font: 300 italic 11px/14px verdana, helvetica, sans-serif;</tt>)
  # into their constituent parts.
  #
  # source://css_parser//lib/css_parser/rule_set.rb#430
  def expand_font_shorthand!; end

  # Convert shorthand list-style declarations (e.g. <tt>list-style: lower-alpha outside;</tt>)
  # into their constituent parts.
  #
  # See http://www.w3.org/TR/CSS21/generate.html#lists
  #
  # source://css_parser//lib/css_parser/rule_set.rb#485
  def expand_list_style_shorthand!; end

  # Split shorthand declarations (e.g. +margin+ or +font+) into their constituent parts.
  #
  # source://css_parser//lib/css_parser/rule_set.rb#332
  def expand_shorthand!; end

  # source://css_parser//lib/css_parser/rule_set.rb#367
  def extract_background_size_from(value); end

  # the local or remote location
  #
  # source://css_parser//lib/css_parser/rule_set.rb#236
  def filename; end

  # the local or remote location
  #
  # source://css_parser//lib/css_parser/rule_set.rb#236
  def filename=(_arg0); end

  # Get the value of a property
  #
  # source://css_parser//lib/css_parser/rule_set.rb#289
  def get_value(property); end

  # optional field for storing source reference
  # File offset range
  #
  # source://css_parser//lib/css_parser/rule_set.rb#234
  def offset; end

  # @see CssParser::RuleSet::Declarations#delete
  #
  # source://forwardable/1.3.3/forwardable.rb#231
  def remove_declaration!(*args, **_arg1, &block); end

  # Array of selector strings.
  #
  # source://css_parser//lib/css_parser/rule_set.rb#239
  def selectors; end

  # Integer with the specificity to use for this RuleSet.
  #
  # source://css_parser//lib/css_parser/rule_set.rb#242
  def specificity; end

  # Integer with the specificity to use for this RuleSet.
  #
  # source://css_parser//lib/css_parser/rule_set.rb#242
  def specificity=(_arg0); end

  # Return the CSS rule set as a string.
  #
  # source://css_parser//lib/css_parser/rule_set.rb#327
  def to_s; end

  private

  # source://css_parser//lib/css_parser/rule_set.rb#637
  def compute_dimensions_shorthand(values); end

  # Returns the value of attribute declarations.
  #
  # source://css_parser//lib/css_parser/rule_set.rb#635
  def declarations; end

  # Sets the attribute declarations
  #
  # @param value the value to set the attribute declarations to.
  #
  # source://css_parser//lib/css_parser/rule_set.rb#635
  def declarations=(_arg0); end

  # source://css_parser//lib/css_parser/rule_set.rb#650
  def parse_declarations!(block); end

  # --
  # TODO: way too simplistic
  # ++
  #
  # source://css_parser//lib/css_parser/rule_set.rb#685
  def parse_selectors!(selectors); end

  # source://css_parser//lib/css_parser/rule_set.rb#693
  def split_value_preserving_function_whitespace(value); end

  # @return [Boolean]
  #
  # source://css_parser//lib/css_parser/rule_set.rb#678
  def unmatched_open_parenthesis?(declarations); end
end

# source://css_parser//lib/css_parser/rule_set.rb#11
CssParser::RuleSet::BACKGROUND_PROPERTIES = T.let(T.unsafe(nil), Array)

# source://css_parser//lib/css_parser/rule_set.rb#15
CssParser::RuleSet::BORDER_PROPERTIES = T.let(T.unsafe(nil), Array)

# source://css_parser//lib/css_parser/rule_set.rb#14
CssParser::RuleSet::BORDER_STYLE_PROPERTIES = T.let(T.unsafe(nil), Array)

# Tokens for parse_declarations!
#
# source://css_parser//lib/css_parser/rule_set.rb#30
CssParser::RuleSet::COLON = T.let(T.unsafe(nil), String)

# source://css_parser//lib/css_parser/rule_set.rb#19
CssParser::RuleSet::DIMENSIONS = T.let(T.unsafe(nil), Array)

# source://css_parser//lib/css_parser/rule_set.rb#35
class CssParser::RuleSet::Declarations
  extend ::Forwardable

  # @return [Declarations] a new instance of Declarations
  #
  # source://css_parser//lib/css_parser/rule_set.rb#69
  def initialize(declarations = T.unsafe(nil)); end

  # source://css_parser//lib/css_parser/rule_set.rb#209
  def ==(other); end

  # source://css_parser//lib/css_parser/rule_set.rb#107
  def [](property); end

  # Add a CSS declaration
  # If the property already exists its value will be over-written.
  # If the value is empty - property will be deleted
  #
  # @example
  #   declarations['color'] = 'blue'
  #
  #   puts declarations['color']
  #   => #<CssParser::RuleSet::Declarations::Value:0x000000000305c730 @important=false, @order=1, @value="blue">
  # @example
  #   declarations['margin'] = '0px auto !important'
  #
  #   puts declarations['margin']
  #   => #<CssParser::RuleSet::Declarations::Value:0x00000000030c1838 @important=true, @order=2, @value="0px auto">
  # @param property [#to_s] that should be added
  # @param value [Value, #to_s] of the property
  #
  # source://css_parser//lib/css_parser/rule_set.rb#92
  def []=(property, value); end

  # Add a CSS declaration
  # If the property already exists its value will be over-written.
  # If the value is empty - property will be deleted
  #
  # @example
  #   declarations['color'] = 'blue'
  #
  #   puts declarations['color']
  #   => #<CssParser::RuleSet::Declarations::Value:0x000000000305c730 @important=false, @order=1, @value="blue">
  # @example
  #   declarations['margin'] = '0px auto !important'
  #
  #   puts declarations['margin']
  #   => #<CssParser::RuleSet::Declarations::Value:0x00000000030c1838 @important=true, @order=2, @value="0px auto">
  # @param property [#to_s] that should be added
  # @param value [Value, #to_s] of the property
  #
  # source://css_parser//lib/css_parser/rule_set.rb#92
  def add_declaration!(property, value); end

  # Remove CSS declaration
  #
  # @example
  #   declarations.delete('color')
  # @param property [#to_s] property to be removed
  #
  # source://css_parser//lib/css_parser/rule_set.rb#125
  def delete(property); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def each(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def each_value(*args, **_arg1, &block); end

  # source://css_parser//lib/css_parser/rule_set.rb#107
  def get_value(property); end

  # @return [Boolean]
  #
  # source://css_parser//lib/css_parser/rule_set.rb#112
  def key?(property); end

  # Remove CSS declaration
  #
  # @example
  #   declarations.delete('color')
  # @param property [#to_s] property to be removed
  #
  # source://css_parser//lib/css_parser/rule_set.rb#125
  def remove_declaration!(property); end

  # Replace CSS property with multiple declarations
  #
  # @example
  #   declarations = Declarations.new('line-height' => '0.25px', 'font' => 'small-caps', 'font-size' => '12em')
  #   declarations.replace_declaration!('font', {'line-height' => '1px', 'font-variant' => 'small-caps', 'font-size' => '24px'})
  #   declarations
  #   => #<CssParser::RuleSet::Declarations:0x00000000029c3018
  #   @declarations=
  #   {"line-height"=>#<CssParser::RuleSet::Declarations::Value:0x00000000038ac458 @important=false, @value="1px">,
  #   "font-variant"=>#<CssParser::RuleSet::Declarations::Value:0x00000000039b3ec8 @important=false, @value="small-caps">,
  #   "font-size"=>#<CssParser::RuleSet::Declarations::Value:0x00000000029c2c80 @important=false, @value="12em">}>
  # @param property [#to_s] property name to be replaces
  # @param replacements [Hash<String => [String, Value]>] hash with properties to replace with
  # @raise [ArgumentError]
  #
  # source://css_parser//lib/css_parser/rule_set.rb#143
  def replace_declaration!(property, replacements, preserve_importance: T.unsafe(nil)); end

  # source://css_parser//lib/css_parser/rule_set.rb#116
  def size; end

  # source://css_parser//lib/css_parser/rule_set.rb#198
  def to_s(options = T.unsafe(nil)); end

  protected

  # Returns the value of attribute declarations.
  #
  # source://css_parser//lib/css_parser/rule_set.rb#217
  def declarations; end

  private

  # Sets the attribute declarations
  #
  # @param value the value to set the attribute declarations to.
  #
  # source://css_parser//lib/css_parser/rule_set.rb#221
  def declarations=(_arg0); end

  # source://css_parser//lib/css_parser/rule_set.rb#223
  def normalize_property(property); end
end

# source://css_parser//lib/css_parser/rule_set.rb#36
class CssParser::RuleSet::Declarations::Value
  # @return [Value] a new instance of Value
  #
  # source://css_parser//lib/css_parser/rule_set.rb#40
  def initialize(value, important: T.unsafe(nil)); end

  # source://css_parser//lib/css_parser/rule_set.rb#58
  def ==(other); end

  # Returns the value of attribute important.
  #
  # source://css_parser//lib/css_parser/rule_set.rb#38
  def important; end

  # Sets the attribute important
  #
  # @param value the value to set the attribute important to.
  #
  # source://css_parser//lib/css_parser/rule_set.rb#38
  def important=(_arg0); end

  # source://css_parser//lib/css_parser/rule_set.rb#54
  def to_s; end

  # Returns the value of attribute value.
  #
  # source://css_parser//lib/css_parser/rule_set.rb#37
  def value; end

  # @raise [ArgumentError]
  #
  # source://css_parser//lib/css_parser/rule_set.rb#45
  def value=(value); end
end

# source://css_parser//lib/css_parser/rule_set.rb#13
CssParser::RuleSet::FONT_STYLE_PROPERTIES = T.let(T.unsafe(nil), Array)

# source://css_parser//lib/css_parser/rule_set.rb#34
CssParser::RuleSet::IMPORTANT = T.let(T.unsafe(nil), String)

# source://css_parser//lib/css_parser/rule_set.rb#12
CssParser::RuleSet::LIST_STYLE_PROPERTIES = T.let(T.unsafe(nil), Array)

# source://css_parser//lib/css_parser/rule_set.rb#32
CssParser::RuleSet::LPAREN = T.let(T.unsafe(nil), String)

# source://css_parser//lib/css_parser/rule_set.rb#17
CssParser::RuleSet::NUMBER_OF_DIMENSIONS = T.let(T.unsafe(nil), Integer)

# Patterns for specificity calculations
#
# source://css_parser//lib/css_parser/rule_set.rb#8
CssParser::RuleSet::RE_ELEMENTS_AND_PSEUDO_ELEMENTS = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/rule_set.rb#9
CssParser::RuleSet::RE_NON_ID_ATTRIBUTES_AND_PSEUDO_CLASSES = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/rule_set.rb#33
CssParser::RuleSet::RPAREN = T.let(T.unsafe(nil), String)

# source://css_parser//lib/css_parser/rule_set.rb#31
CssParser::RuleSet::SEMICOLON = T.let(T.unsafe(nil), String)

# source://css_parser//lib/css_parser/rule_set.rb#27
CssParser::RuleSet::WHITESPACE_REPLACEMENT = T.let(T.unsafe(nil), String)

# source://css_parser//lib/css_parser/regexps.rb#49
CssParser::STRIP_CSS_COMMENTS_RX = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#50
CssParser::STRIP_HTML_COMMENTS_RX = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#24
CssParser::URI_RX = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/regexps.rb#25
CssParser::URI_RX_OR_NONE = T.let(T.unsafe(nil), Regexp)

# source://css_parser//lib/css_parser/version.rb#4
CssParser::VERSION = T.let(T.unsafe(nil), String)
