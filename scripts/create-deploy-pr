#!/usr/bin/env bash

set -euo pipefail

ORIGIN=${ORIGIN:-origin}
DEPLOY_BRANCH=stages/prod
PATCH=${PATCH:-}
DRY_RUN=${DRY_RUN:-0}
CHANGELOG_FILE=${CHANGELOG_FILE:-.rc-changelog.md}

while [[ $# -gt 0 ]]
do
    case "$1" in
        --dry-run)
            DRY_RUN=1
            shift
            ;;

        --patch)
            PATCH=1
            shift
            ;;

        *)
            echo "Invalid argument: $1"
            exit 1
            ;;
    esac
done

function get_last_rc {
    GH_OUTPUT=$(gh release list --exclude-drafts --exclude-pre-releases --limit 1 || true)
    if [ -z "$GH_OUTPUT" ]; then
        echo "Failed to get latest released" >&2
        exit 1
    fi

    LAST_RC=$(echo "$GH_OUTPUT" | grep -E --only-matching 'RC [0-9]+(\.[0-9]+)?' | sed 's/RC //')
    if [ -z "$LAST_RC" ]; then
        echo 0
    else
        echo "$LAST_RC"
    fi
}

function get_next_rc {
    LAST_RC="$1"; shift
    
    MAJOR=$(echo "$LAST_RC" | sed -E 's/\.[0-9]+//')
    MINOR=$(echo "$LAST_RC" | sed -E 's/[0-9]+\.//')
    
    if [ "$PATCH" == "1" ]; then
        # Doing a patch, so increment minor version by 1
        if [ -z "$MINOR" ]; then
            MINOR=0
        fi

        MINOR=$((MINOR + 1))
    else
        # Not doing a patch, clear minor and increment major
        MAJOR=$((MAJOR + 1))
        MINOR=0
    fi

    if [ "$MINOR" == "0" ]; then
        echo "$MAJOR"
    else
        echo "$MAJOR.$MINOR"
    fi
}

function get_staging_sha {
    curl --silent https://idp.staging.login.gov/api/deploy.json | jq -r .git_sha
}

if [ -z "${CI:-}" ]; then
    echo "This script is meant to be run in a continuous integration environment."
    exit 1
fi

if [ -z "${GH_TOKEN:-}" ]; then
    echo "You must set the GH_TOKEN environment variable."
    exit 1
fi

LAST_RC=$(get_last_rc)
NEXT_RC=$(get_next_rc "$LAST_RC")
echo "Last RC was ${LAST_RC}. The next RC will be ${NEXT_RC}."

SHA=$(get_staging_sha)
echo "Staging currently running ${SHA}"

RC_BRANCH=stages/rc-$(date +'%Y-%m-%d')
echo "Preparing RC branch ${RC_BRANCH}..."

if git rev-parse "$RC_BRANCH" > /dev/null 2>&1; then
    echo "RC branch $RC_BRANCH already exists." >&2
    exit 1
fi

echo "Building changelog..."
scripts/changelog_check.rb -s "$SHA" -b "${ORIGIN}/${DEPLOY_BRANCH}" > "$CHANGELOG_FILE"

if [[ $DRY_RUN -eq 0 ]]; then
    echo "Pushing $RC_BRANCH to origin..."
    git push $ORIGIN "$SHA:refs/heads/$RC_BRANCH"

    # Create PR
    echo "Creating PR..."
    gh pr create \
        --title "Deploy RC ${NEXT_RC} to Production" \
        --label 'status - promotion' \
        --base "$DEPLOY_BRANCH" \
        --head "$RC_BRANCH" \
        --body-file "$CHANGELOG_FILE"
else
    echo "Dry run. Not creating PR."
fi

echo "# Changelog"
cat "$CHANGELOG_FILE" && rm "$CHANGELOG_FILE"

